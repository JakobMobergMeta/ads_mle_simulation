Reults Details:

=== Modifiers: modifiers_01 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.071760
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.129129
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 5: arch=[[512, 512, 512]], score=0.003075
    Step 6: arch=[[512, 512]], score=-0.008055
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.066340
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=0.012302
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.083992

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.011511
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.006959
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003907
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001902
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.005977
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.008672
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.020326

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.036426
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.093258
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.033686
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.044924
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.130588
    Step 8: arch=[[128, 128, 128, 128]], score=0.002650
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.017917

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.130089
    Step 4: arch=[[128, 128, 128, 128]], score=0.002650
    Step 5: arch=[[1024, 1024]], score=0.006166
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003047
    Step 7: arch=[[512, 512]], score=-0.008055
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129039
    Step 10: arch=[[2048, 2048]], score=0.044051

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.021087
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.108042
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.018858
    Step 5: arch=[[256, 256], [512, 512]], score=-0.008358
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.008338
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.034445
    Step 10: arch=[[128, 128]], score=-0.016655

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.130089
    Step 4: arch=[[128, 128, 128, 128]], score=0.002650
    Step 5: arch=[[1024, 1024]], score=0.006166
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003047
    Step 7: arch=[[512, 512]], score=-0.008055
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129039
    Step 10: arch=[[2048, 2048]], score=0.044051

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.130089
    Step 4: arch=[[128, 128, 128, 128]], score=0.002650
    Step 5: arch=[[1024, 1024]], score=0.006166
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003047
    Step 7: arch=[[512, 512]], score=-0.008055
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129039
    Step 10: arch=[[2048, 2048]], score=0.044051

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.130089
    Step 4: arch=[[128, 128, 128, 128]], score=0.002650
    Step 5: arch=[[1024, 1024]], score=0.006166
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003047
    Step 7: arch=[[512, 512]], score=-0.008055
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129039
    Step 10: arch=[[2048, 2048]], score=0.044051


=== Modifiers: modifiers_02 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.073504
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.113189
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 5: arch=[[512, 512, 512]], score=-0.016752
    Step 6: arch=[[512, 512]], score=-0.028271
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.044723
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=-0.004714
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054212

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.008433
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.001029
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.008059
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007470
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.004726
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.004573
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.003898

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.047530
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.076692
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.062461
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.091169
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.100660
    Step 8: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.037739

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 5: arch=[[1024, 1024]], score=-0.015591
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001352
    Step 7: arch=[[512, 512]], score=-0.028271
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.015712

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.036826
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033872
    Step 5: arch=[[256, 256], [512, 512]], score=-0.015174
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.027197
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.041294
    Step 10: arch=[[128, 128]], score=-0.036479

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 5: arch=[[1024, 1024]], score=-0.015591
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001352
    Step 7: arch=[[512, 512]], score=-0.028271
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.015712

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 5: arch=[[1024, 1024]], score=-0.015591
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001352
    Step 7: arch=[[512, 512]], score=-0.028271
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.015712

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 5: arch=[[1024, 1024]], score=-0.015591
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001352
    Step 7: arch=[[512, 512]], score=-0.028271
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.015712


=== Modifiers: modifiers_03 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.070474
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.104449
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 5: arch=[[512, 512, 512]], score=-0.023352
    Step 6: arch=[[512, 512]], score=-0.033306
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.016725
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=-0.021654
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.043502

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002139
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.002587
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007581
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007270
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.021915
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.002173
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.000041

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.034456
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.101377
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.031897
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.093060
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.090152
    Step 8: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.049482

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 5: arch=[[1024, 1024]], score=-0.012020
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006964
    Step 7: arch=[[512, 512]], score=-0.033306
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.039510

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.010309
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.015999
    Step 5: arch=[[256, 256], [512, 512]], score=-0.012001
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.041000
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.070827
    Step 10: arch=[[128, 128]], score=-0.047311

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 5: arch=[[1024, 1024]], score=-0.012020
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006964
    Step 7: arch=[[512, 512]], score=-0.033306
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.039510

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 5: arch=[[1024, 1024]], score=-0.012020
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006964
    Step 7: arch=[[512, 512]], score=-0.033306
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.039510

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 5: arch=[[1024, 1024]], score=-0.012020
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006964
    Step 7: arch=[[512, 512]], score=-0.033306
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.039510


=== Modifiers: modifiers_04 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.049373
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.088525
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 5: arch=[[512, 512, 512]], score=-0.021409
    Step 6: arch=[[512, 512]], score=-0.026332
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.005700
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=-0.029312
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054138

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003174
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.008151
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002634
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.000692
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.023392
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.000194
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.003036

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.037523
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.082806
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.033096
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.079777
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.041052

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115151
    Step 4: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 5: arch=[[1024, 1024]], score=-0.006202
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030820
    Step 7: arch=[[512, 512]], score=-0.026332
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.044642

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.017127
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.113970
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.013352
    Step 5: arch=[[256, 256], [512, 512]], score=-0.013896
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.037868
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.054382
    Step 10: arch=[[128, 128]], score=-0.039115

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115151
    Step 4: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 5: arch=[[1024, 1024]], score=-0.006202
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030820
    Step 7: arch=[[512, 512]], score=-0.026332
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.044642

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115151
    Step 4: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 5: arch=[[1024, 1024]], score=-0.006202
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030820
    Step 7: arch=[[512, 512]], score=-0.026332
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.044642

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115151
    Step 4: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 5: arch=[[1024, 1024]], score=-0.006202
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030820
    Step 7: arch=[[512, 512]], score=-0.026332
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.044642


=== Modifiers: modifiers_05 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.072971
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.094983
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 5: arch=[[512, 512, 512]], score=-0.052718
    Step 6: arch=[[512, 512]], score=-0.058172
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.000087
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=-0.049097
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.045755

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003497
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.009314
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007226
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006212
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.027402
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.033389
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.029827

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.041380
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.016276
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.064063
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.095443
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.063895

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 5: arch=[[1024, 1024]], score=-0.050097
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033672
    Step 7: arch=[[512, 512]], score=-0.058172
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.106989
    Step 10: arch=[[2048, 2048]], score=-0.029041

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.034258
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033361
    Step 5: arch=[[256, 256], [512, 512]], score=-0.019802
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.099442
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.059248
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.075071
    Step 10: arch=[[128, 128]], score=-0.063154

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 5: arch=[[1024, 1024]], score=-0.050097
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033672
    Step 7: arch=[[512, 512]], score=-0.058172
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.106989
    Step 10: arch=[[2048, 2048]], score=-0.029041

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 5: arch=[[1024, 1024]], score=-0.050097
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033672
    Step 7: arch=[[512, 512]], score=-0.058172
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.106989
    Step 10: arch=[[2048, 2048]], score=-0.029041

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 5: arch=[[1024, 1024]], score=-0.050097
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033672
    Step 7: arch=[[512, 512]], score=-0.058172
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.106989
    Step 10: arch=[[2048, 2048]], score=-0.029041


=== Modifiers: modifiers_06 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.042591
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.102378
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 5: arch=[[512, 512, 512]], score=-0.016321
    Step 6: arch=[[512, 512]], score=-0.036533
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.039269
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=0.009287
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.040297

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003649
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.016526
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010059
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.009473
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=-0.000878
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.013394
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.009705

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.089840
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.097601
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.097620
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.098839
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.093824
    Step 8: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.046920

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097832
    Step 4: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 5: arch=[[1024, 1024]], score=-0.020853
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030050
    Step 7: arch=[[512, 512]], score=-0.036533
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.022698

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.072850
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.101553
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.055953
    Step 5: arch=[[256, 256], [512, 512]], score=-0.029778
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.028711
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.025366
    Step 10: arch=[[128, 128]], score=-0.045627

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097832
    Step 4: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 5: arch=[[1024, 1024]], score=-0.020853
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030050
    Step 7: arch=[[512, 512]], score=-0.036533
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.022698

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097832
    Step 4: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 5: arch=[[1024, 1024]], score=-0.020853
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030050
    Step 7: arch=[[512, 512]], score=-0.036533
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.022698

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097832
    Step 4: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 5: arch=[[1024, 1024]], score=-0.020853
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030050
    Step 7: arch=[[512, 512]], score=-0.036533
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.022698


=== Modifiers: modifiers_07 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.025847
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.086151
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 5: arch=[[512, 512, 512]], score=0.014522
    Step 6: arch=[[512, 512]], score=-0.012661
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.055337
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=0.050903
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.051550

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.004563
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.000791
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002534
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.001640
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.014685
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.013928
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.018513

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.072667
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.110641
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.065106
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.029023
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128]], score=0.026136
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.024907

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=0.026136
    Step 5: arch=[[1024, 1024]], score=0.006159
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025323
    Step 7: arch=[[512, 512]], score=-0.012661
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.059241

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.058317
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.058112
    Step 5: arch=[[256, 256], [512, 512]], score=-0.006415
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.000261
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.080022
    Step 10: arch=[[128, 128]], score=-0.023399

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=0.026136
    Step 5: arch=[[1024, 1024]], score=0.006159
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025323
    Step 7: arch=[[512, 512]], score=-0.012661
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.059241

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=0.026136
    Step 5: arch=[[1024, 1024]], score=0.006159
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025323
    Step 7: arch=[[512, 512]], score=-0.012661
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.059241

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 4: arch=[[128, 128, 128, 128]], score=0.026136
    Step 5: arch=[[1024, 1024]], score=0.006159
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025323
    Step 7: arch=[[512, 512]], score=-0.012661
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.059241


=== Modifiers: modifiers_08 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.117958
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.047134
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 5: arch=[[512, 512, 512]], score=-0.016173
    Step 6: arch=[[512, 512]], score=-0.020747
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.080966
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=-0.025711
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.052910

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.014258
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.004877
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002116
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001100
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010834
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.016886
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.031259

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.046865
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.085912
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.049536
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.085969
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.120911
    Step 8: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.037373

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120857
    Step 4: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 5: arch=[[1024, 1024]], score=0.001111
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006553
    Step 7: arch=[[512, 512]], score=-0.020747
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.053972

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.037265
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.118307
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.031346
    Step 5: arch=[[256, 256], [512, 512]], score=-0.011476
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.034302
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.062047
    Step 10: arch=[[128, 128]], score=-0.035141

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120857
    Step 4: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 5: arch=[[1024, 1024]], score=0.001111
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006553
    Step 7: arch=[[512, 512]], score=-0.020747
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.053972

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120857
    Step 4: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 5: arch=[[1024, 1024]], score=0.001111
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006553
    Step 7: arch=[[512, 512]], score=-0.020747
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.053972

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120857
    Step 4: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 5: arch=[[1024, 1024]], score=0.001111
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006553
    Step 7: arch=[[512, 512]], score=-0.020747
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.053972


=== Modifiers: modifiers_09 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.064715
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.133507
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 5: arch=[[512, 512, 512]], score=-0.013344
    Step 6: arch=[[512, 512]], score=-0.015409
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.039484
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=-0.014843
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.079378

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010754
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.006807
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003414
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001094
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.012645
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.006574
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.004228

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.009953
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.029577
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.011920
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.051529
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.097835
    Step 8: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.019830

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099485
    Step 4: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 5: arch=[[1024, 1024]], score=-0.009172
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.012971
    Step 7: arch=[[512, 512]], score=-0.015409
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.007092

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.001271
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.045076
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.000368
    Step 5: arch=[[256, 256], [512, 512]], score=-0.007125
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.018388
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.024900
    Step 10: arch=[[128, 128]], score=-0.019257

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099485
    Step 4: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 5: arch=[[1024, 1024]], score=-0.009172
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.012971
    Step 7: arch=[[512, 512]], score=-0.015409
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.007092

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099485
    Step 4: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 5: arch=[[1024, 1024]], score=-0.009172
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.012971
    Step 7: arch=[[512, 512]], score=-0.015409
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.007092

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099485
    Step 4: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 5: arch=[[1024, 1024]], score=-0.009172
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.012971
    Step 7: arch=[[512, 512]], score=-0.015409
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.007092


=== Modifiers: modifiers_10 ===
Method: Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.040836
    Step 3: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120880
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 5: arch=[[512, 512, 512]], score=-0.024412
    Step 6: arch=[[512, 512]], score=-0.028523
    Step 7: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.002588
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[128, 128, 128, 128, 128]], score=-0.025444
    Step 10: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.041649

Method: SimulatedAnnealing
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 4: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003822
    Step 5: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.005810
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010477
    Step 7: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.008365
    Step 8: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.007219
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.014818
    Step 10: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.010981

Method: TPE
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.027995
    Step 4: arch=[[2048, 2048, 2048], [64], [1024]], score=0.067703
    Step 5: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.042341
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.105346
    Step 7: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.037294
    Step 8: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 9: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 10: arch=[[64, 64]], score=-0.037030

Method: Skopt-Random
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069582
    Step 4: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 5: arch=[[1024, 1024]], score=-0.017537
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022478
    Step 7: arch=[[512, 512]], score=-0.028523
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.008477

Method: Skopt-GP
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.008872
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.094502
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.004864
    Step 5: arch=[[256, 256], [512, 512]], score=-0.019777
    Step 6: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 8: arch=[[64, 64, 64]], score=-0.033584
    Step 9: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.021087
    Step 10: arch=[[128, 128]], score=-0.035878

Method: Skopt-RF
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069582
    Step 4: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 5: arch=[[1024, 1024]], score=-0.017537
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022478
    Step 7: arch=[[512, 512]], score=-0.028523
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.008477

Method: Skopt-ET
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069582
    Step 4: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 5: arch=[[1024, 1024]], score=-0.017537
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022478
    Step 7: arch=[[512, 512]], score=-0.028523
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.008477

Method: Skopt-GBRT
  Seed 0:
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069582
    Step 4: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 5: arch=[[1024, 1024]], score=-0.017537
    Step 6: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022478
    Step 7: arch=[[512, 512]], score=-0.028523
    Step 8: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 9: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 10: arch=[[2048, 2048]], score=0.008477


