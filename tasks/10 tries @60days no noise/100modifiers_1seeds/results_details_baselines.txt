Reults Details:

=== Modifiers: modifiers_01 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.033449
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.151335
    Step 5: arch=[[512, 512]], score=-0.160679
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.037282
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.148635
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.065652
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-0.000925

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 3: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024, 1024], [64]], score=0.003419
    Step 4: arch=[[512], [512, 512, 512, 512], [512], [1024, 1024, 1024, 1024], [64]], score=0.003233
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024], [64]], score=-0.049972
    Step 6: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024], [64], [128]], score=-0.048762
    Step 7: arch=[[512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024], [64], [128]], score=-0.022224
    Step 8: arch=[[1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024], [64], [128]], score=-0.022134
    Step 9: arch=[[1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024], [64], [128, 128]], score=-0.000463
    Step 10: arch=[[1024, 1024, 1024, 1024], [1024, 1024, 1024], [64], [128, 128]], score=-0.008394

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 2: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 3: arch=[[512], [512, 512, 512, 512], [512, 512], [512, 512, 512], [64]], score=-0.002916
    Step 4: arch=[[512, 512], [512, 512, 512, 512], [512, 512], [512, 512, 512], [64]], score=-0.001025
    Step 5: arch=[[256, 256], [512, 512, 512, 512], [512, 512], [512, 512, 512], [64]], score=-0.002150
    Step 6: arch=[[256], [512, 512, 512, 512], [512, 512], [512, 512, 512], [64]], score=-0.010000
    Step 7: arch=[[256], [512, 512, 512, 512], [512, 512], [256, 256, 256], [64]], score=-0.017577
    Step 8: arch=[[256], [512, 512, 512], [512, 512], [256, 256, 256], [64]], score=-0.035703
    Step 9: arch=[[256], [512, 512, 512], [512, 512], [512, 512, 512], [64]], score=-0.028126
    Step 10: arch=[[256], [512, 512, 512], [256, 256], [512, 512, 512], [64]], score=-0.040400

Method: TPE
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.132824
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.092016
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.025163
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.081715
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.043516
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.002103
    Step 7: arch=[[128, 128, 128, 128]], score=-0.156143
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.172693
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.092105

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.001174
    Step 3: arch=[[128, 128, 128, 128]], score=-0.156143
    Step 4: arch=[[1024, 1024]], score=-0.143283
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.155051
    Step 6: arch=[[512, 512]], score=-0.160679
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.006502
    Step 9: arch=[[2048, 2048]], score=-0.096760
    Step 10: arch=[[256, 256]], score=-0.167911

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.099612
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.001009
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.096843
    Step 4: arch=[[256, 256], [512, 512]], score=-0.142102
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.165276
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.064057
    Step 9: arch=[[128, 128]], score=-0.171160
    Step 10: arch=[[512, 512, 512, 512, 512]], score=-0.132646

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.001174
    Step 3: arch=[[128, 128, 128, 128]], score=-0.156143
    Step 4: arch=[[1024, 1024]], score=-0.143283
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.155051
    Step 6: arch=[[512, 512]], score=-0.160679
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.006502
    Step 9: arch=[[2048, 2048]], score=-0.096760
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [128, 128, 128, 128, 128], [64, 64, 64, 64], [256]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.001174
    Step 3: arch=[[128, 128, 128, 128]], score=-0.156143
    Step 4: arch=[[1024, 1024]], score=-0.143283
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.155051
    Step 6: arch=[[512, 512]], score=-0.160679
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.006502
    Step 9: arch=[[2048, 2048]], score=-0.096760
    Step 10: arch=[[1024, 1024], [128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128, 128], [2048, 2048]], score=0.006244

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.001174
    Step 3: arch=[[128, 128, 128, 128]], score=-0.156143
    Step 4: arch=[[1024, 1024]], score=-0.143283
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.155051
    Step 6: arch=[[512, 512]], score=-0.160679
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.006502
    Step 9: arch=[[2048, 2048]], score=-0.096760
    Step 10: arch=[[1024, 1024, 1024], [64, 64, 64], [512], [128, 128, 128, 128]], score=0.000709


=== Modifiers: modifiers_02 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.019094
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.047827
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.099673
    Step 5: arch=[[512, 512]], score=-0.110226
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.044381
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.088028
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.014599
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128, 128]], score=0.011824
    Step 4: arch=[[64, 64, 64, 64], [512, 512], [1024], [128, 128, 128, 128, 128]], score=0.000731
    Step 5: arch=[[64, 64, 64, 64], [512, 512], [128, 128, 128, 128, 128]], score=-0.053629
    Step 6: arch=[[64, 64, 64, 64], [512, 512], [128, 128, 128, 128, 128], [128]], score=-0.053185
    Step 7: arch=[[64, 64, 64, 64], [1024, 1024], [128, 128, 128, 128, 128], [128]], score=-0.042758
    Step 8: arch=[[64, 64, 64, 64], [1024, 1024], [128, 128, 128, 128, 128]], score=-0.043199
    Step 9: arch=[[1024, 1024], [128, 128, 128, 128, 128]], score=-0.062253
    Step 10: arch=[[1024, 1024], [128, 128, 128, 128]], score=-0.071112

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64], [512], [1024, 1024], [128, 128, 128, 128]], score=-0.009419
    Step 4: arch=[[64, 64, 64, 64], [512], [1024, 1024], [64, 64, 64, 64]], score=-0.010403
    Step 5: arch=[[64, 64, 64, 64, 64], [512], [1024, 1024], [64, 64, 64, 64]], score=-0.000590
    Step 6: arch=[[64, 64, 64, 64, 64], [512, 512], [1024, 1024], [64, 64, 64, 64]], score=0.008829
    Step 7: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [64, 64, 64, 64]], score=-0.000984
    Step 8: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 9: arch=[[64, 64, 64, 64], [256, 256], [1024, 1024], [128, 128, 128, 128]], score=-0.006018
    Step 10: arch=[[128, 128, 128, 128], [256, 256], [1024, 1024], [128, 128, 128, 128]], score=-0.004742

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.084256
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.040504
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.018501
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.026684
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.005013
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.001764
    Step 7: arch=[[128, 128, 128, 128]], score=-0.097877
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.118717
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.039563

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.097877
    Step 4: arch=[[1024, 1024]], score=-0.099115
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.082679
    Step 6: arch=[[512, 512]], score=-0.110226
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.072397
    Step 10: arch=[[256, 256]], score=-0.115219

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.049411
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.052322
    Step 4: arch=[[256, 256], [512, 512]], score=-0.098127
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.108904
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.048252
    Step 9: arch=[[128, 128]], score=-0.117574
    Step 10: arch=[[128, 128, 128], [512, 512], [128, 128], [512, 512, 512], [128]], score=-0.050767

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.097877
    Step 4: arch=[[1024, 1024]], score=-0.099115
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.082679
    Step 6: arch=[[512, 512]], score=-0.110226
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.072397
    Step 10: arch=[[128, 128, 128], [2048, 2048], [64], [128, 128, 128, 128, 128]], score=-0.008046

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.097877
    Step 4: arch=[[1024, 1024]], score=-0.099115
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.082679
    Step 6: arch=[[512, 512]], score=-0.110226
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.072397
    Step 10: arch=[[64, 64, 64, 64, 64], [2048, 2048]], score=-0.038034

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [512, 512], [1024, 1024], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.097877
    Step 4: arch=[[1024, 1024]], score=-0.099115
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.082679
    Step 6: arch=[[512, 512]], score=-0.110226
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.072397
    Step 10: arch=[[64, 64, 64, 64, 64]], score=-0.089277


=== Modifiers: modifiers_03 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.005901
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.059996
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.086217
    Step 5: arch=[[512, 512]], score=-0.094013
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.040700
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.084070
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.015221
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.059160

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256, 256], [512, 512]], score=0.007076
    Step 4: arch=[[128, 128, 128, 128, 128], [128], [512, 512], [256, 256], [512, 512]], score=-0.006310
    Step 5: arch=[[128, 128, 128, 128, 128], [128], [256, 256], [512, 512]], score=-0.048639
    Step 6: arch=[[128, 128, 128, 128, 128], [128], [256, 256], [512, 512], [128]], score=-0.046845
    Step 7: arch=[[128, 128, 128, 128, 128], [256], [256, 256], [512, 512], [128]], score=-0.042042
    Step 8: arch=[[256], [256, 256], [512, 512], [128]], score=-0.061701
    Step 9: arch=[[256], [256, 256], [512, 512], [128, 128]], score=-0.054766
    Step 10: arch=[[256], [256], [512, 512], [128, 128]], score=-0.061947

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [128], [512, 512]], score=-0.002107
    Step 4: arch=[[128, 128, 128, 128], [128], [512, 512, 512], [128], [512, 512]], score=-0.009047
    Step 5: arch=[[64, 64, 64, 64], [128], [512, 512, 512], [128], [512, 512]], score=-0.010887
    Step 6: arch=[[64, 64, 64], [128], [512, 512, 512], [128], [512, 512]], score=-0.017785
    Step 7: arch=[[64, 64, 64], [128], [512, 512, 512], [64], [512, 512]], score=-0.018843
    Step 8: arch=[[64, 64, 64], [128], [512, 512, 512], [64], [1024, 1024]], score=-0.004059
    Step 9: arch=[[64, 64, 64], [128], [512, 512, 512], [64], [512, 512]], score=-0.018843
    Step 10: arch=[[64, 64, 64], [64], [512, 512, 512], [64], [512, 512]], score=-0.021360

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.056126
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.011701
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.018422
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.001089
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.049657
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.009370
    Step 7: arch=[[128, 128, 128, 128]], score=-0.091011
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.106607
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.024480

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.091011
    Step 4: arch=[[1024, 1024]], score=-0.077912
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025900
    Step 6: arch=[[512, 512]], score=-0.094013
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.040242
    Step 10: arch=[[256, 256]], score=-0.101380

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.031421
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.035680
    Step 4: arch=[[256, 256], [512, 512]], score=-0.076843
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.099709
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.014185
    Step 9: arch=[[128, 128]], score=-0.104893
    Step 10: arch=[[128, 128, 128, 128], [128], [256, 256, 256], [256, 256]], score=-0.046929

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.091011
    Step 4: arch=[[1024, 1024]], score=-0.077912
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025900
    Step 6: arch=[[512, 512]], score=-0.094013
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.040242
    Step 10: arch=[[512, 512], [512], [256, 256, 256, 256]], score=-0.031304

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.091011
    Step 4: arch=[[1024, 1024]], score=-0.077912
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025900
    Step 6: arch=[[512, 512]], score=-0.094013
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.040242
    Step 10: arch=[[128, 128, 128, 128, 128], [2048], [64, 64, 64, 64]], score=0.023108

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [128], [512, 512, 512], [256], [512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.091011
    Step 4: arch=[[1024, 1024]], score=-0.077912
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025900
    Step 6: arch=[[512, 512]], score=-0.094013
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.040242
    Step 10: arch=[[64, 64, 64, 64, 64]], score=-0.085912


=== Modifiers: modifiers_04 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.031446
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.072228
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.085851
    Step 4: arch=[[512, 512, 512]], score=-0.039853
    Step 5: arch=[[512, 512]], score=-0.044923
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.012104
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.047715
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.041104
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64, 64], [128, 128, 128]], score=0.003460
    Step 4: arch=[[256, 256, 256, 256, 256], [256, 256], [256, 256], [64, 64, 64], [128, 128, 128]], score=0.015751
    Step 5: arch=[[256, 256, 256, 256, 256], [256, 256], [64, 64, 64], [128, 128, 128]], score=0.001622
    Step 6: arch=[[256, 256, 256, 256, 256], [256, 256], [64, 64, 64], [128, 128, 128], [128]], score=0.005319
    Step 7: arch=[[256, 256, 256, 256, 256], [512, 512], [64, 64, 64], [128, 128, 128], [128]], score=0.015155
    Step 8: arch=[[512, 512], [64, 64, 64], [128, 128, 128], [128]], score=-0.008046
    Step 9: arch=[[512, 512], [64, 64, 64], [128, 128, 128], [128, 128]], score=-0.004541
    Step 10: arch=[[512, 512], [64, 64], [128, 128, 128], [128, 128]], score=-0.010314

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=-0.003841
    Step 4: arch=[[128, 128, 128, 128], [256, 256], [256], [64, 64], [128, 128, 128]], score=-0.009054
    Step 5: arch=[[128, 128, 128], [256, 256], [256], [64, 64], [128, 128, 128]], score=-0.012599
    Step 6: arch=[[128, 128, 128], [128, 128], [256], [64, 64], [128, 128, 128]], score=-0.017206
    Step 7: arch=[[128, 128, 128], [128, 128], [256], [64, 64], [256, 256, 256]], score=-0.008685
    Step 8: arch=[[128, 128, 128], [128, 128], [256], [64, 64], [128, 128, 128]], score=-0.017206
    Step 9: arch=[[64, 64, 64], [128, 128], [256], [64, 64], [128, 128, 128]], score=-0.019415
    Step 10: arch=[[64, 64, 64], [128, 128], [256], [128, 128], [128, 128, 128]], score=-0.018747

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.017051
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.023249
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.063692
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.019156
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.062948
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.051262
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.060417
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.006443

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.085851
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.098513
    Step 3: arch=[[128, 128, 128, 128]], score=-0.051262
    Step 4: arch=[[1024, 1024]], score=-0.024175
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017294
    Step 6: arch=[[512, 512]], score=-0.044923
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027050
    Step 10: arch=[[256, 256]], score=-0.054081

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.002897
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.097250
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.001695
    Step 4: arch=[[256, 256], [512, 512]], score=-0.031822
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.056947
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.035429
    Step 9: arch=[[128, 128]], score=-0.058356
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.097707

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.085851
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.098513
    Step 3: arch=[[128, 128, 128, 128]], score=-0.051262
    Step 4: arch=[[1024, 1024]], score=-0.024175
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017294
    Step 6: arch=[[512, 512]], score=-0.044923
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027050
    Step 10: arch=[[2048, 2048], [256, 256, 256, 256], [64, 64, 64, 64, 64], [64], [64]], score=0.097447

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.085851
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.098513
    Step 3: arch=[[128, 128, 128, 128]], score=-0.051262
    Step 4: arch=[[1024, 1024]], score=-0.024175
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017294
    Step 6: arch=[[512, 512]], score=-0.044923
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027050
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.100609

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [256, 256], [256], [64, 64], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.085851
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.098513
    Step 3: arch=[[128, 128, 128, 128]], score=-0.051262
    Step 4: arch=[[1024, 1024]], score=-0.024175
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017294
    Step 6: arch=[[512, 512]], score=-0.044923
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027050
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_05 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.119001
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.145569
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.006691
    Step 5: arch=[[512, 512]], score=0.002728
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.064374
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.006972
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.090911
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.150873

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003486
    Step 4: arch=[[64, 64, 64, 64]], score=0.002458
    Step 5: arch=[[64, 64, 64, 64], [1024]], score=0.026538
    Step 6: arch=[[64, 64, 64, 64], [1024, 1024]], score=0.046602
    Step 7: arch=[[64, 64, 64, 64], [1024, 1024], [128]], score=0.049694
    Step 8: arch=[[64, 64, 64, 64], [2048, 2048], [128]], score=0.106241
    Step 9: arch=[[2048, 2048], [128]], score=0.036194
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.046395

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128]], score=0.000000
    Step 3: arch=[[128, 128]], score=-0.003486
    Step 4: arch=[[256, 256]], score=-0.001478
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.009266
    Step 6: arch=[[256, 256, 256, 256]], score=0.005685
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.009266
    Step 8: arch=[[256, 256, 256, 256]], score=0.005685
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.009266
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.006972

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.037515
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.065603
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.074245
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.078364
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.127110
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.003486
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.004466
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.060191

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003486
    Step 4: arch=[[1024, 1024]], score=0.011903
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048879
    Step 6: arch=[[512, 512]], score=0.002728
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.155196
    Step 9: arch=[[2048, 2048]], score=0.033300
    Step 10: arch=[[256, 256]], score=-0.001478

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.056706
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.056658
    Step 4: arch=[[256, 256], [512, 512]], score=0.023233
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.147724
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.001004
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.093968
    Step 9: arch=[[128, 128]], score=-0.003486
    Step 10: arch=[[64, 64], [256, 256, 256, 256], [128, 128, 128, 128]], score=0.055556

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003486
    Step 4: arch=[[1024, 1024]], score=0.011903
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048879
    Step 6: arch=[[512, 512]], score=0.002728
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.155196
    Step 9: arch=[[2048, 2048]], score=0.033300
    Step 10: arch=[[256], [2048, 2048], [64, 64, 64, 64, 64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003486
    Step 4: arch=[[1024, 1024]], score=0.011903
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048879
    Step 6: arch=[[512, 512]], score=0.002728
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.155196
    Step 9: arch=[[2048, 2048]], score=0.033300
    Step 10: arch=[[256], [2048], [512, 512, 512, 512], [64, 64, 64, 64], [1024]], score=0.138790

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003486
    Step 4: arch=[[1024, 1024]], score=0.011903
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048879
    Step 6: arch=[[512, 512]], score=0.002728
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.155196
    Step 9: arch=[[2048, 2048]], score=0.033300
    Step 10: arch=[[1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64], [64], [128, 128]], score=0.154818


=== Modifiers: modifiers_06 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.059839
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.103027
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.022626
    Step 5: arch=[[512, 512]], score=-0.031546
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.030137
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.026871
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.039203
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.107003

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[256, 256, 256], [1024, 1024, 1024, 1024, 1024]], score=0.009888
    Step 5: arch=[[256, 256, 256], [256, 256, 256, 256, 256]], score=-0.025490
    Step 6: arch=[[256, 256, 256], [512]], score=-0.024839
    Step 7: arch=[[512, 512, 512], [512]], score=-0.010842
    Step 8: arch=[[512, 512, 512], [512, 512]], score=-0.008662
    Step 9: arch=[[512, 512, 512], [512, 512, 512]], score=-0.006482
    Step 10: arch=[[512, 512, 512], [1024, 1024, 1024]], score=0.013430

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[64, 64, 64], [1024, 1024, 1024, 1024]], score=-0.005777
    Step 4: arch=[[64, 64, 64], [512, 512, 512, 512]], score=-0.027480
    Step 5: arch=[[64, 64, 64, 64], [512, 512, 512, 512]], score=-0.020401
    Step 6: arch=[[64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.018162
    Step 7: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=-0.025241
    Step 8: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 9: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=-0.025241
    Step 10: arch=[[128, 128, 128], [512, 512, 512, 512, 512]], score=-0.022266

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.003631
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.082975
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.103102
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.093819
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.104373
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.083618
    Step 7: arch=[[128, 128, 128, 128]], score=-0.034039
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.050976
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.060804

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.105128
    Step 3: arch=[[128, 128, 128, 128]], score=-0.034039
    Step 4: arch=[[1024, 1024]], score=-0.005841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.078683
    Step 6: arch=[[512, 512]], score=-0.031546
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.056769
    Step 10: arch=[[256, 256]], score=-0.042999

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.053637
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.105673
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.031308
    Step 4: arch=[[256, 256], [512, 512]], score=-0.030121
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.043896
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.018972
    Step 9: arch=[[128, 128]], score=-0.048375
    Step 10: arch=[[2048], [128, 128, 128, 128, 128], [2048]], score=0.080254

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.105128
    Step 3: arch=[[128, 128, 128, 128]], score=-0.034039
    Step 4: arch=[[1024, 1024]], score=-0.005841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.078683
    Step 6: arch=[[512, 512]], score=-0.031546
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.056769
    Step 10: arch=[[1024, 1024, 1024, 1024], [512], [128, 128], [1024, 1024]], score=0.093898

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.105128
    Step 3: arch=[[128, 128, 128, 128]], score=-0.034039
    Step 4: arch=[[1024, 1024]], score=-0.005841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.078683
    Step 6: arch=[[512, 512]], score=-0.031546
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.056769
    Step 10: arch=[[256, 256, 256], [2048, 2048], [64, 64, 64], [128], [256]], score=0.092821

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.105128
    Step 3: arch=[[128, 128, 128, 128]], score=-0.034039
    Step 4: arch=[[1024, 1024]], score=-0.005841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.078683
    Step 6: arch=[[512, 512]], score=-0.031546
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.056769
    Step 10: arch=[[2048, 2048, 2048], [512, 512]], score=0.102630


=== Modifiers: modifiers_07 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.030958
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.058306
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.075217
    Step 5: arch=[[512, 512]], score=-0.084946
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.061904
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.080493
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.041835
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.059408

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256, 256], [512, 512, 512, 512], [2048, 2048, 2048, 2048]], score=0.003420
    Step 4: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [2048, 2048, 2048, 2048]], score=-0.004177
    Step 5: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 6: arch=[[128, 128, 128, 128, 128], [1024, 1024, 1024, 1024], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[512, 512, 512, 512], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512, 512], [2048, 2048, 2048, 2048]], score=-0.000739
    Step 9: arch=[[128, 128], [512, 512, 512, 512, 512], [2048, 2048, 2048, 2048]], score=-0.022464
    Step 10: arch=[[128, 128], [512, 512, 512, 512, 512], [2048, 2048, 2048]], score=-0.030523

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256, 256], [512, 512], [2048, 2048, 2048, 2048]], score=-0.003420
    Step 4: arch=[[256, 256, 256, 256, 256], [1024, 1024], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 5: arch=[[128, 128, 128], [512, 512], [2048, 2048, 2048, 2048]], score=-0.025534
    Step 6: arch=[[128, 128, 128], [512, 512], [1024, 1024, 1024, 1024]], score=-0.043692
    Step 7: arch=[[128, 128], [512, 512], [1024, 1024, 1024, 1024]], score=-0.050934
    Step 8: arch=[[64, 64], [512, 512], [1024, 1024, 1024, 1024]], score=-0.053956
    Step 9: arch=[[64, 64], [512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.048399
    Step 10: arch=[[128, 128], [512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.045377

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.064806
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.034672
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.057124
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.061248
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.028166
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.087743
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.104838
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.059754

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.087743
    Step 4: arch=[[1024, 1024]], score=-0.057263
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.045863
    Step 6: arch=[[512, 512]], score=-0.084946
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013941
    Step 10: arch=[[256, 256]], score=-0.096808

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.067003
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.061650
    Step 4: arch=[[256, 256], [512, 512]], score=-0.071852
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.097712
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.000102
    Step 9: arch=[[128, 128]], score=-0.102244
    Step 10: arch=[[256, 256, 256, 256], [512, 512, 512, 512], [1024, 1024, 1024], [128, 128]], score=-0.023681

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.087743
    Step 4: arch=[[1024, 1024]], score=-0.057263
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.045863
    Step 6: arch=[[512, 512]], score=-0.084946
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013941
    Step 10: arch=[[64]], score=-0.111964

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.087743
    Step 4: arch=[[1024, 1024]], score=-0.057263
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.045863
    Step 6: arch=[[512, 512]], score=-0.084946
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013941
    Step 10: arch=[[256, 256], [128, 128, 128]], score=-0.089534

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.087743
    Step 4: arch=[[1024, 1024]], score=-0.057263
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.045863
    Step 6: arch=[[512, 512]], score=-0.084946
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013941
    Step 10: arch=[[256, 256], [1024, 1024, 1024]], score=-0.033323


=== Modifiers: modifiers_08 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.009690
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.016103
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.019716
    Step 4: arch=[[512, 512, 512]], score=-0.134540
    Step 5: arch=[[512, 512]], score=-0.152064
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.030615
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.115989
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.035575
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[256], [1024], [1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=-0.000446
    Step 4: arch=[[256], [1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=-0.026039
    Step 5: arch=[[256], [1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512], [128]], score=-0.023503
    Step 6: arch=[[256], [2048], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512], [128]], score=-0.011150
    Step 7: arch=[[2048], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512], [128]], score=-0.028595
    Step 8: arch=[[2048], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512], [128, 128]], score=-0.004859
    Step 9: arch=[[2048], [128, 128, 128, 128], [512, 512, 512, 512, 512], [128, 128]], score=-0.016725
    Step 10: arch=[[2048, 2048], [128, 128, 128, 128], [512, 512, 512, 512, 512], [128, 128]], score=-0.003400

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[256], [1024], [1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.000162
    Step 4: arch=[[256, 256], [1024], [1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.001186
    Step 5: arch=[[128, 128], [1024], [1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.000738
    Step 6: arch=[[128], [1024], [1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.000596
    Step 7: arch=[[128], [512], [1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.001329
    Step 8: arch=[[128], [512], [1024, 1024, 1024], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=0.000659
    Step 9: arch=[[128], [512], [1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.001329
    Step 10: arch=[[64], [512], [1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.001521

Method: TPE
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.130176
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.066485
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.032980
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.062745
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.067779
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.001372
    Step 7: arch=[[128, 128, 128, 128]], score=-0.132533
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.167765
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.057458

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.019716
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.000887
    Step 3: arch=[[128, 128, 128, 128]], score=-0.132533
    Step 4: arch=[[1024, 1024]], score=-0.132163
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.153464
    Step 6: arch=[[512, 512]], score=-0.152064
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.086096
    Step 10: arch=[[256, 256]], score=-0.161232

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.074001
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.003147
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.074726
    Step 4: arch=[[256, 256], [512, 512]], score=-0.139314
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.151271
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.052986
    Step 9: arch=[[128, 128]], score=-0.165620
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [1024], [64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.019716
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.000887
    Step 3: arch=[[128, 128, 128, 128]], score=-0.132533
    Step 4: arch=[[1024, 1024]], score=-0.132163
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.153464
    Step 6: arch=[[512, 512]], score=-0.152064
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.086096
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [1024], [256, 256], [2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.019716
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.000887
    Step 3: arch=[[128, 128, 128, 128]], score=-0.132533
    Step 4: arch=[[1024, 1024]], score=-0.132163
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.153464
    Step 6: arch=[[512, 512]], score=-0.152064
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.086096
    Step 10: arch=[[2048, 2048, 2048], [64], [128, 128, 128], [64, 64, 64, 64], [1024]], score=0.000866

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256], [1024], [1024, 1024, 1024], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.019716
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.000887
    Step 3: arch=[[128, 128, 128, 128]], score=-0.132533
    Step 4: arch=[[1024, 1024]], score=-0.132163
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.153464
    Step 6: arch=[[512, 512]], score=-0.152064
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.086096
    Step 10: arch=[[512, 512, 512, 512, 512], [2048, 2048, 2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_09 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.009865
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.062277
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.066926
    Step 4: arch=[[512, 512, 512]], score=-0.102329
    Step 5: arch=[[512, 512]], score=-0.104168
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.053497
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.103449
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.049750
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256, 256]], score=0.006247
    Step 4: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512], [256, 256, 256]], score=-0.013109
    Step 5: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [256, 256, 256]], score=-0.013562
    Step 6: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [256, 256, 256], [128]], score=-0.013211
    Step 7: arch=[[1024, 1024, 1024, 1024, 1024], [1024, 1024, 1024], [256, 256, 256], [128]], score=0.003749
    Step 8: arch=[[1024, 1024, 1024, 1024, 1024], [1024, 1024, 1024], [256, 256, 256]], score=0.003403
    Step 9: arch=[[1024, 1024, 1024], [256, 256, 256]], score=-0.068386
    Step 10: arch=[[1024, 1024, 1024], [256, 256]], score=-0.079832

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512], [512, 512, 512], [256, 256]], score=-0.012121
    Step 4: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512], [512, 512, 512], [128, 128]], score=-0.013006
    Step 5: arch=[[1024, 1024, 1024, 1024], [512, 512], [512, 512, 512], [128, 128]], score=-0.016182
    Step 6: arch=[[1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [128, 128]], score=-0.004060
    Step 7: arch=[[1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [128, 128]], score=-0.007236
    Step 8: arch=[[1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=-0.006352
    Step 9: arch=[[1024, 1024, 1024], [256, 256, 256], [512, 512, 512], [256, 256]], score=-0.013838
    Step 10: arch=[[2048, 2048, 2048], [256, 256, 256], [512, 512, 512], [256, 256]], score=0.006260

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.063466
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.013736
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.059236
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.013662
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.044149
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.034715
    Step 7: arch=[[128, 128, 128, 128]], score=-0.104837
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.108136
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.012512

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.066926
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.003531
    Step 3: arch=[[128, 128, 128, 128]], score=-0.104837
    Step 4: arch=[[1024, 1024]], score=-0.098734
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.016018
    Step 6: arch=[[512, 512]], score=-0.104168
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.084991
    Step 10: arch=[[256, 256]], score=-0.106525

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.013900
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.001951
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.028478
    Step 4: arch=[[256, 256], [512, 512]], score=-0.086281
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.106770
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.038152
    Step 9: arch=[[128, 128]], score=-0.107614
    Step 10: arch=[[2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [1024, 1024]], score=0.060206

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.066926
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.003531
    Step 3: arch=[[128, 128, 128, 128]], score=-0.104837
    Step 4: arch=[[1024, 1024]], score=-0.098734
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.016018
    Step 6: arch=[[512, 512]], score=-0.104168
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.084991
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [64, 64], [64, 64], [64, 64, 64]], score=0.023459

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.066926
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.003531
    Step 3: arch=[[128, 128, 128, 128]], score=-0.104837
    Step 4: arch=[[1024, 1024]], score=-0.098734
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.016018
    Step 6: arch=[[512, 512]], score=-0.104168
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.084991
    Step 10: arch=[[2048, 2048, 2048], [256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.066926
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.003531
    Step 3: arch=[[128, 128, 128, 128]], score=-0.104837
    Step 4: arch=[[1024, 1024]], score=-0.098734
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.016018
    Step 6: arch=[[512, 512]], score=-0.104168
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.084991
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [512, 512, 512], [512, 512], [2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_10 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.068512
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.126342
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.005101
    Step 5: arch=[[512, 512]], score=-0.012202
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.065550
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.031704
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.089380
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.015852
    Step 4: arch=[[64, 64, 64, 64]], score=0.015267
    Step 5: arch=[[64, 64, 64, 64], [1024]], score=0.023173
    Step 6: arch=[[64, 64, 64, 64], [1024, 1024]], score=0.040534
    Step 7: arch=[[64, 64, 64, 64], [1024, 1024], [128]], score=0.042154
    Step 8: arch=[[64, 64, 64, 64], [2048, 2048], [128]], score=0.064020
    Step 9: arch=[[2048, 2048], [128]], score=0.021681
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.034864

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128]], score=0.000000
    Step 3: arch=[[128, 128]], score=-0.015852
    Step 4: arch=[[256, 256]], score=-0.014828
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.033599
    Step 6: arch=[[256, 256, 256, 256]], score=0.017457
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.033599
    Step 8: arch=[[256, 256, 256, 256]], score=0.017457
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.033599
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.031704

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.020946
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.095382
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.071394
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.122048
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.123936
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.089121
    Step 7: arch=[[128, 128, 128, 128]], score=0.015852
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.016292
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.111728

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.123874
    Step 3: arch=[[128, 128, 128, 128]], score=0.015852
    Step 4: arch=[[1024, 1024]], score=-0.004631
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.031517
    Step 6: arch=[[512, 512]], score=-0.012202
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.019780
    Step 10: arch=[[256, 256]], score=-0.014828

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.095876
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.124987
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.085207
    Step 4: arch=[[256, 256], [512, 512]], score=0.003852
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.000512
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.068048
    Step 9: arch=[[128, 128]], score=-0.015852
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256, 256]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.123874
    Step 3: arch=[[128, 128, 128, 128]], score=0.015852
    Step 4: arch=[[1024, 1024]], score=-0.004631
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.031517
    Step 6: arch=[[512, 512]], score=-0.012202
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.019780
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [2048, 2048], [512, 512]], score=0.125286

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.123874
    Step 3: arch=[[128, 128, 128, 128]], score=0.015852
    Step 4: arch=[[1024, 1024]], score=-0.004631
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.031517
    Step 6: arch=[[512, 512]], score=-0.012202
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.019780
    Step 10: arch=[[64, 64, 64], [256, 256], [64, 64, 64], [256, 256]], score=0.047814

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.123874
    Step 3: arch=[[128, 128, 128, 128]], score=0.015852
    Step 4: arch=[[1024, 1024]], score=-0.004631
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.031517
    Step 6: arch=[[512, 512]], score=-0.012202
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.019780
    Step 10: arch=[[2048, 2048], [512, 512]], score=0.044269


=== Modifiers: modifiers_100 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.113725
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.108351
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.009780
    Step 4: arch=[[512, 512, 512]], score=-0.037430
    Step 5: arch=[[512, 512]], score=-0.039006
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.043298
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.040799
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.109350
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64], [64, 64, 64, 64]], score=0.022201
    Step 4: arch=[[64], [64, 64, 64, 64]], score=0.021267
    Step 5: arch=[[64, 64, 64, 64]], score=-0.042534
    Step 6: arch=[[64, 64, 64, 64], [128]], score=-0.039625
    Step 7: arch=[[64, 64, 64, 64], [256]], score=-0.033807
    Step 8: arch=[[64, 64, 64, 64]], score=-0.042534
    Step 9: arch=[[64, 64, 64]], score=-0.043467
    Step 10: arch=[[128, 128, 128]], score=-0.042727

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64], [64, 64]], score=-0.022201
    Step 4: arch=[[64, 64], [64]], score=-0.044401
    Step 5: arch=[[64, 64, 64], [64]], score=-0.043468
    Step 6: arch=[[64, 64, 64], [128]], score=-0.040559
    Step 7: arch=[[64, 64, 64], [64]], score=-0.043468
    Step 8: arch=[[128, 128, 128], [64]], score=-0.042720
    Step 9: arch=[[128, 128, 128], [64, 64]], score=-0.020519
    Step 10: arch=[[128, 128, 128], [128, 128]], score=-0.017431

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.026892
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.082752
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.002467
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.112172
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.116619
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.041763
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.044401
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.087238

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.009780
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.076532
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041763
    Step 4: arch=[[1024, 1024]], score=-0.031619
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.082945
    Step 6: arch=[[512, 512]], score=-0.039006
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.012934
    Step 10: arch=[[256, 256]], score=-0.042211

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.086274
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.099448
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.076941
    Step 4: arch=[[256, 256], [512, 512]], score=0.004077
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.043467
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.109058
    Step 9: arch=[[128, 128]], score=-0.043691
    Step 10: arch=[[2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024, 1024]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.009780
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.076532
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041763
    Step 4: arch=[[1024, 1024]], score=-0.031619
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.082945
    Step 6: arch=[[512, 512]], score=-0.039006
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.012934
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512], [128, 128, 128], [256]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.009780
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.076532
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041763
    Step 4: arch=[[1024, 1024]], score=-0.031619
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.082945
    Step 6: arch=[[512, 512]], score=-0.039006
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.012934
    Step 10: arch=[[128, 128, 128, 128, 128], [2048], [64, 64, 64, 64]], score=0.112800

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64], [64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.009780
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.076532
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041763
    Step 4: arch=[[1024, 1024]], score=-0.031619
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.082945
    Step 6: arch=[[512, 512]], score=-0.039006
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.012934
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048], [64, 64, 64, 64], [512, 512], [2048, 2048, 2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_11 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.021651
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.032090
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.024090
    Step 5: arch=[[512, 512]], score=-0.064976
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.030629
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.013955
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.039094
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.033867

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256], [128, 128, 128]], score=0.010320
    Step 4: arch=[[256, 256, 256], [128, 128, 128]], score=-0.028134
    Step 5: arch=[[128, 128, 128]], score=-0.061764
    Step 6: arch=[[128, 128, 128], [128]], score=-0.060709
    Step 7: arch=[[128, 128, 128], [256]], score=-0.058675
    Step 8: arch=[[128, 128, 128]], score=-0.061764
    Step 9: arch=[[128, 128]], score=-0.099624
    Step 10: arch=[[256, 256]], score=-0.088477

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256], [128]], score=-0.010320
    Step 4: arch=[[256, 256, 256, 256], [64]], score=-0.011442
    Step 5: arch=[[256, 256, 256, 256, 256], [64]], score=0.027019
    Step 6: arch=[[256, 256, 256, 256, 256], [64, 64]], score=0.030474
    Step 7: arch=[[256, 256, 256, 256], [64, 64]], score=-0.001159
    Step 8: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 9: arch=[[256, 256, 256, 256], [64, 64]], score=-0.001159
    Step 10: arch=[[512, 512, 512, 512], [64, 64]], score=0.027298

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.053405
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.032303
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.031344
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.030126
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.036266
    Step 7: arch=[[128, 128, 128, 128]], score=-0.023905
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.105046
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.032140

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023905
    Step 4: arch=[[1024, 1024]], score=-0.013139
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089352
    Step 6: arch=[[512, 512]], score=-0.064976
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.030475
    Step 9: arch=[[2048, 2048]], score=0.034213
    Step 10: arch=[[256, 256]], score=-0.088477

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.030189
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.028081
    Step 4: arch=[[256, 256], [512, 512]], score=-0.069401
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.067338
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.030397
    Step 9: arch=[[128, 128]], score=-0.099624
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=0.031311

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023905
    Step 4: arch=[[1024, 1024]], score=-0.013139
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089352
    Step 6: arch=[[512, 512]], score=-0.064976
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.030475
    Step 9: arch=[[2048, 2048]], score=0.034213
    Step 10: arch=[[512, 512], [1024, 1024, 1024, 1024]], score=-0.004750

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023905
    Step 4: arch=[[1024, 1024]], score=-0.013139
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089352
    Step 6: arch=[[512, 512]], score=-0.064976
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.030475
    Step 9: arch=[[2048, 2048]], score=0.034213
    Step 10: arch=[[256, 256, 256, 256, 256], [512, 512, 512, 512, 512], [256], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023905
    Step 4: arch=[[1024, 1024]], score=-0.013139
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089352
    Step 6: arch=[[512, 512]], score=-0.064976
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.030475
    Step 9: arch=[[2048, 2048]], score=0.034213
    Step 10: arch=[[256, 256], [256]], score=-0.084970


=== Modifiers: modifiers_12 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.122966
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.083668
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.008123
    Step 5: arch=[[512, 512]], score=-0.018566
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.084937
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.001284
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.092892
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.133497

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64]], score=-0.009025
    Step 4: arch=[[128, 128, 128, 128]], score=-0.007809
    Step 5: arch=[[128, 128, 128, 128, 128]], score=0.001284
    Step 6: arch=[[1024, 1024]], score=-0.006144
    Step 7: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[1024, 1024], [512, 512, 512]], score=0.076402
    Step 9: arch=[[1024, 1024], [512, 512, 512, 512]], score=0.105701
    Step 10: arch=[[1024, 1024], [512, 512, 512, 512, 512]], score=0.121649

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64]], score=-0.009025
    Step 4: arch=[[128, 128, 128, 128]], score=-0.007809
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.004392
    Step 6: arch=[[256, 256, 256, 256]], score=-0.004972
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.004392
    Step 8: arch=[[256, 256, 256, 256]], score=-0.004972
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.004392
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.001284

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.044004
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.116895
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.063403
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.122359
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.124625
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.007809
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.027076
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.121423

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007809
    Step 4: arch=[[1024, 1024]], score=-0.006144
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.070892
    Step 6: arch=[[512, 512]], score=-0.018566
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.136592
    Step 9: arch=[[2048, 2048]], score=0.027326
    Step 10: arch=[[256, 256]], score=-0.023698

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.120774
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.117029
    Step 4: arch=[[256, 256], [512, 512]], score=0.026251
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.018051
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.121995
    Step 9: arch=[[128, 128]], score=-0.025995
    Step 10: arch=[[1024, 1024, 1024, 1024], [512, 512, 512, 512]], score=0.121621

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007809
    Step 4: arch=[[1024, 1024]], score=-0.006144
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.070892
    Step 6: arch=[[512, 512]], score=-0.018566
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.136592
    Step 9: arch=[[2048, 2048]], score=0.027326
    Step 10: arch=[[256, 256], [512, 512, 512], [256, 256], [64, 64, 64, 64, 64], [1024]], score=0.120694

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007809
    Step 4: arch=[[1024, 1024]], score=-0.006144
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.070892
    Step 6: arch=[[512, 512]], score=-0.018566
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.136592
    Step 9: arch=[[2048, 2048]], score=0.027326
    Step 10: arch=[[128, 128, 128, 128], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [2048], [2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007809
    Step 4: arch=[[1024, 1024]], score=-0.006144
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.070892
    Step 6: arch=[[512, 512]], score=-0.018566
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.136592
    Step 9: arch=[[2048, 2048]], score=0.027326
    Step 10: arch=[[256, 256], [256]], score=-0.014869


=== Modifiers: modifiers_13 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.059804
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.087025
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.059770
    Step 5: arch=[[512, 512]], score=-0.065235
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.010226
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.060537
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.004824
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.090648

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024], [256, 256], [256, 256]], score=0.006225
    Step 4: arch=[[512, 512, 512, 512], [256, 256], [256, 256]], score=-0.016615
    Step 5: arch=[[512, 512, 512, 512], [256, 256], [256, 256, 256]], score=0.001324
    Step 6: arch=[[512, 512, 512, 512], [512, 512], [256, 256, 256]], score=0.009799
    Step 7: arch=[[512, 512], [256, 256, 256]], score=-0.047702
    Step 8: arch=[[512, 512], [256, 256, 256, 256]], score=-0.041442
    Step 9: arch=[[512, 512], [256, 256, 256]], score=-0.047702
    Step 10: arch=[[512], [256, 256, 256]], score=-0.053124

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024], [512], [256, 256]], score=0.008244
    Step 4: arch=[[1024, 1024, 1024, 1024], [512], [128, 128]], score=0.001771
    Step 5: arch=[[1024, 1024, 1024, 1024], [512], [128, 128, 128]], score=0.019309
    Step 6: arch=[[1024, 1024, 1024, 1024], [512], [64, 64, 64]], score=0.016069
    Step 7: arch=[[1024, 1024, 1024], [512], [64, 64, 64]], score=0.006159
    Step 8: arch=[[512, 512, 512], [512], [64, 64, 64]], score=-0.013315
    Step 9: arch=[[512, 512, 512], [512], [64, 64, 64, 64]], score=0.004127
    Step 10: arch=[[1024, 1024, 1024], [512], [64, 64, 64, 64]], score=0.023600

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.025132
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.025510
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.051108
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.048711
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.087422
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.072793
    Step 7: arch=[[128, 128, 128, 128]], score=-0.064506
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.073472
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.012275

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069639
    Step 3: arch=[[128, 128, 128, 128]], score=-0.064506
    Step 4: arch=[[1024, 1024]], score=-0.052834
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017642
    Step 6: arch=[[512, 512]], score=-0.065235
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093907
    Step 9: arch=[[2048, 2048]], score=-0.018473
    Step 10: arch=[[256, 256]], score=-0.070240

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.008306
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.086466
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.003665
    Step 4: arch=[[256, 256], [512, 512]], score=-0.052467
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.069578
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.003731
    Step 9: arch=[[128, 128]], score=-0.072444
    Step 10: arch=[[2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069639
    Step 3: arch=[[128, 128, 128, 128]], score=-0.064506
    Step 4: arch=[[1024, 1024]], score=-0.052834
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017642
    Step 6: arch=[[512, 512]], score=-0.065235
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093907
    Step 9: arch=[[2048, 2048]], score=-0.018473
    Step 10: arch=[[512, 512, 512], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024, 1024], [128, 128]], score=0.091754

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069639
    Step 3: arch=[[128, 128, 128, 128]], score=-0.064506
    Step 4: arch=[[1024, 1024]], score=-0.052834
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017642
    Step 6: arch=[[512, 512]], score=-0.065235
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093907
    Step 9: arch=[[2048, 2048]], score=-0.018473
    Step 10: arch=[[2048, 2048, 2048], [256, 256, 256, 256, 256], [128, 128, 128], [2048, 2048], [2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [256], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069639
    Step 3: arch=[[128, 128, 128, 128]], score=-0.064506
    Step 4: arch=[[1024, 1024]], score=-0.052834
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017642
    Step 6: arch=[[512, 512]], score=-0.065235
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093907
    Step 9: arch=[[2048, 2048]], score=-0.018473
    Step 10: arch=[[2048]], score=-0.047847


=== Modifiers: modifiers_14 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.000376
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.042090
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.123948
    Step 5: arch=[[512, 512]], score=-0.132331
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.043496
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.145934
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.048170
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.003021

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024], [1024, 1024, 1024, 1024], [64, 64]], score=0.000697
    Step 4: arch=[[512, 512, 512], [1024, 1024, 1024, 1024], [64, 64]], score=-0.021512
    Step 5: arch=[[512, 512, 512], [1024, 1024, 1024, 1024], [64, 64, 64]], score=-0.006443
    Step 6: arch=[[512, 512, 512], [2048, 2048, 2048, 2048], [64, 64, 64]], score=-100.000000
    Step 7: arch=[[1024, 1024, 1024, 1024], [64, 64, 64]], score=-0.040605
    Step 8: arch=[[1024, 1024, 1024, 1024], [64, 64, 64, 64]], score=-0.031901
    Step 9: arch=[[1024, 1024, 1024, 1024], [64, 64, 64]], score=-0.040605
    Step 10: arch=[[1024, 1024, 1024], [64, 64, 64]], score=-0.053250

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024], [1024, 1024], [64, 64]], score=-0.000697
    Step 4: arch=[[1024, 1024, 1024], [2048, 2048], [64, 64]], score=0.002895
    Step 5: arch=[[128, 128, 128], [2048, 2048], [64, 64]], score=-0.025014
    Step 6: arch=[[128, 128, 128], [2048, 2048, 2048], [64, 64]], score=-0.001023
    Step 7: arch=[[128, 128, 128], [1024, 1024, 1024], [64, 64]], score=-0.073404
    Step 8: arch=[[256, 256, 256], [1024, 1024, 1024], [64, 64]], score=-0.060804
    Step 9: arch=[[128, 128, 128], [1024, 1024, 1024], [64, 64]], score=-0.073404
    Step 10: arch=[[128, 128, 128], [512, 512, 512], [64, 64]], score=-0.104300

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.104860
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.038356
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.060765
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.000928
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.000460
    Step 7: arch=[[128, 128, 128, 128]], score=-0.152973
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.172683
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.073273

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.152973
    Step 4: arch=[[1024, 1024]], score=-0.083532
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.067206
    Step 6: arch=[[512, 512]], score=-0.132331
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000072
    Step 10: arch=[[256, 256]], score=-0.155658

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.080312
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.085551
    Step 4: arch=[[256, 256], [512, 512]], score=-0.124433
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.165711
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.036708
    Step 9: arch=[[128, 128]], score=-0.167053
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=0.000332

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.152973
    Step 4: arch=[[1024, 1024]], score=-0.083532
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.067206
    Step 6: arch=[[512, 512]], score=-0.132331
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000072
    Step 10: arch=[[2048], [2048]], score=0.005057

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.152973
    Step 4: arch=[[1024, 1024]], score=-0.083532
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.067206
    Step 6: arch=[[512, 512]], score=-0.132331
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000072
    Step 10: arch=[[256], [512, 512, 512, 512]], score=-0.112030

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.152973
    Step 4: arch=[[1024, 1024]], score=-0.083532
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.067206
    Step 6: arch=[[512, 512]], score=-0.132331
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000072
    Step 10: arch=[[512], [2048]], score=-0.042096


=== Modifiers: modifiers_15 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.061883
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.057165
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.057252
    Step 5: arch=[[512, 512]], score=-0.069812
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.011866
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.059607
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.005857
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.018610
    Step 4: arch=[[256, 256, 256, 256, 256]], score=-0.051456
    Step 5: arch=[[256, 256, 256, 256, 256], [1024]], score=-0.004215
    Step 6: arch=[[256, 256, 256, 256, 256], [1024, 1024]], score=0.010906
    Step 7: arch=[[256, 256, 256, 256, 256], [1024, 1024], [128]], score=0.014098
    Step 8: arch=[[256, 256, 256, 256, 256], [2048, 2048], [128]], score=0.063147
    Step 9: arch=[[2048, 2048], [128]], score=0.045098
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.052231

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024]], score=-0.018610
    Step 4: arch=[[2048, 2048, 2048]], score=0.062800
    Step 5: arch=[[256, 256, 256, 256, 256]], score=-0.051456
    Step 6: arch=[[256, 256, 256, 256]], score=-0.062502
    Step 7: arch=[[256, 256, 256, 256, 256]], score=-0.051456
    Step 8: arch=[[256, 256, 256, 256]], score=-0.062502
    Step 9: arch=[[256, 256, 256, 256, 256]], score=-0.051456
    Step 10: arch=[[128, 128, 128, 128, 128]], score=-0.059607

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.039988
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.004274
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.064690
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.012154
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.040729
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.062846
    Step 7: arch=[[128, 128, 128, 128]], score=-0.070274
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.095022
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.020148

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.066615
    Step 3: arch=[[128, 128, 128, 128]], score=-0.070274
    Step 4: arch=[[1024, 1024]], score=-0.037221
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.032004
    Step 6: arch=[[512, 512]], score=-0.069812
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040054
    Step 10: arch=[[256, 256]], score=-0.084596

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.030815
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.066593
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.025376
    Step 4: arch=[[256, 256], [512, 512]], score=-0.053358
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.084449
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.037929
    Step 9: arch=[[128, 128]], score=-0.091610
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [256]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.066615
    Step 3: arch=[[128, 128, 128, 128]], score=-0.070274
    Step 4: arch=[[1024, 1024]], score=-0.037221
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.032004
    Step 6: arch=[[512, 512]], score=-0.069812
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040054
    Step 10: arch=[[2048], [64], [128, 128, 128, 128], [128, 128], [512]], score=0.046743

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.066615
    Step 3: arch=[[128, 128, 128, 128]], score=-0.070274
    Step 4: arch=[[1024, 1024]], score=-0.037221
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.032004
    Step 6: arch=[[512, 512]], score=-0.069812
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040054
    Step 10: arch=[[2048, 2048, 2048], [128], [128], [512, 512, 512, 512, 512]], score=0.068833

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.066615
    Step 3: arch=[[128, 128, 128, 128]], score=-0.070274
    Step 4: arch=[[1024, 1024]], score=-0.037221
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.032004
    Step 6: arch=[[512, 512]], score=-0.069812
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040054
    Step 10: arch=[[2048, 2048]], score=0.040054


=== Modifiers: modifiers_16 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.034407
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.085833
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.052776
    Step 5: arch=[[512, 512]], score=-0.062270
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.000893
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.045158
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.013911
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [512]], score=-0.026295
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [512, 512]], score=-0.018414
    Step 5: arch=[[64, 64, 64, 64], [128, 128, 128, 128, 128], [512, 512]], score=-0.015934
    Step 6: arch=[[128, 128, 128, 128, 128], [512, 512]], score=-0.028947
    Step 7: arch=[[128, 128, 128, 128, 128], [512, 512, 512]], score=-0.025902
    Step 8: arch=[[128, 128, 128, 128, 128], [512, 512]], score=-0.028947
    Step 9: arch=[[128, 128, 128, 128], [512, 512]], score=-0.037430
    Step 10: arch=[[128, 128, 128, 128, 128], [512, 512]], score=-0.028947

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [1024]], score=-0.001427
    Step 4: arch=[[64, 64, 64, 64], [128, 128, 128, 128], [1024]], score=0.001345
    Step 5: arch=[[128, 128, 128], [128, 128, 128, 128], [1024]], score=-0.005720
    Step 6: arch=[[128, 128, 128], [128, 128, 128, 128], [512]], score=-0.032368
    Step 7: arch=[[128, 128], [128, 128, 128, 128], [512]], score=-0.040854
    Step 8: arch=[[64, 64], [128, 128, 128, 128], [512]], score=-0.042176
    Step 9: arch=[[64, 64], [128, 128, 128, 128], [512, 512]], score=-0.034307
    Step 10: arch=[[128, 128], [128, 128, 128, 128], [512, 512]], score=-0.032984

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.033519
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.002920
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.003801
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.054664
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.083312
    Step 7: arch=[[128, 128, 128, 128]], score=-0.053645
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.071892
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.018334

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.053645
    Step 4: arch=[[1024, 1024]], score=-0.049262
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020975
    Step 6: arch=[[512, 512]], score=-0.062270
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.016806
    Step 10: arch=[[256, 256]], score=-0.067969

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.026820
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.026249
    Step 4: arch=[[256, 256], [512, 512]], score=-0.051200
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.063456
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.001791
    Step 9: arch=[[128, 128]], score=-0.070618
    Step 10: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [64], [64]], score=-0.049346

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.053645
    Step 4: arch=[[1024, 1024]], score=-0.049262
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020975
    Step 6: arch=[[512, 512]], score=-0.062270
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.016806
    Step 10: arch=[[256, 256, 256, 256]], score=-0.050593

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.053645
    Step 4: arch=[[1024, 1024]], score=-0.049262
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020975
    Step 6: arch=[[512, 512]], score=-0.062270
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.016806
    Step 10: arch=[[64, 64, 64, 64], [512, 512, 512, 512], [256, 256, 256, 256, 256]], score=0.004659

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64], [64, 64, 64, 64, 64], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.053645
    Step 4: arch=[[1024, 1024]], score=-0.049262
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020975
    Step 6: arch=[[512, 512]], score=-0.062270
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.016806
    Step 10: arch=[[64, 64, 64, 64, 64]], score=-0.046584


=== Modifiers: modifiers_17 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.062178
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.078301
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.012661
    Step 4: arch=[[512, 512, 512]], score=-0.069203
    Step 5: arch=[[512, 512]], score=-0.071059
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.008000
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.080346
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.049523
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.008120
    Step 4: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.001108
    Step 5: arch=[[512, 512, 512, 512, 512], [256], [256, 256, 256, 256, 256]], score=-0.025063
    Step 6: arch=[[512, 512, 512, 512, 512], [256], [256, 256, 256, 256, 256], [128]], score=-0.023130
    Step 7: arch=[[512, 512, 512, 512, 512], [512], [256, 256, 256, 256, 256], [128]], score=-0.012686
    Step 8: arch=[[512, 512, 512, 512, 512], [512], [256, 256, 256, 256, 256]], score=-0.014616
    Step 9: arch=[[512], [256, 256, 256, 256, 256]], score=-0.013680
    Step 10: arch=[[512], [256, 256, 256, 256]], score=-0.026591

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512, 512], [256], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=0.001612
    Step 4: arch=[[128, 128, 128], [256], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=-0.016311
    Step 5: arch=[[128, 128, 128], [256, 256], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=-0.003387
    Step 6: arch=[[128, 128], [256, 256], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=-0.004597
    Step 7: arch=[[128, 128], [256, 256], [128, 128, 128, 128, 128], [512, 512, 512, 512]], score=0.005859
    Step 8: arch=[[128, 128], [128, 128], [128, 128, 128, 128, 128], [512, 512, 512, 512]], score=0.000817
    Step 9: arch=[[256, 256], [128, 128], [128, 128, 128, 128, 128], [512, 512, 512, 512]], score=0.005127
    Step 10: arch=[[256, 256], [128, 128], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=-0.005329

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.036896
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.008249
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.020371
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.006719
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.047138
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.081556
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.086055
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.020461

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.012661
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.078268
    Step 3: arch=[[128, 128, 128, 128]], score=-0.081556
    Step 4: arch=[[1024, 1024]], score=-0.052632
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020552
    Step 6: arch=[[512, 512]], score=-0.071059
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011659
    Step 10: arch=[[256, 256]], score=-0.079757

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.021672
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.070860
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.020347
    Step 4: arch=[[256, 256], [512, 512]], score=-0.048879
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.073792
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.084877
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.027654
    Step 9: arch=[[128, 128]], score=-0.083977
    Step 10: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [1024], [256], [512, 512, 512, 512]], score=0.086626

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.012661
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.078268
    Step 3: arch=[[128, 128, 128, 128]], score=-0.081556
    Step 4: arch=[[1024, 1024]], score=-0.052632
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020552
    Step 6: arch=[[512, 512]], score=-0.071059
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011659
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.012661
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.078268
    Step 3: arch=[[128, 128, 128, 128]], score=-0.081556
    Step 4: arch=[[1024, 1024]], score=-0.052632
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020552
    Step 6: arch=[[512, 512]], score=-0.071059
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011659
    Step 10: arch=[[2048, 2048, 2048, 2048], [256, 256, 256, 256]], score=0.060469

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [256], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.012661
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.078268
    Step 3: arch=[[128, 128, 128, 128]], score=-0.081556
    Step 4: arch=[[1024, 1024]], score=-0.052632
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020552
    Step 6: arch=[[512, 512]], score=-0.071059
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011659
    Step 10: arch=[[2048], [1024, 1024, 1024], [64, 64, 64, 64], [512, 512, 512, 512], [1024]], score=0.081490


=== Modifiers: modifiers_18 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.004469
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.059896
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.159493
    Step 5: arch=[[512, 512]], score=-0.164041
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.066887
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.008273
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.160751
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.090607
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 2: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 3: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256, 256]], score=0.001264
    Step 4: arch=[[2048], [1024, 1024], [1024, 1024, 1024], [256, 256]], score=0.000936
    Step 5: arch=[[2048], [1024, 1024], [256, 256]], score=-0.039608
    Step 6: arch=[[2048], [1024, 1024], [256, 256], [128]], score=-0.037242
    Step 7: arch=[[2048], [2048, 2048], [256, 256], [128]], score=-100.000000
    Step 8: arch=[[2048], [1024, 1024], [256, 256]], score=-0.039608
    Step 9: arch=[[1024, 1024], [256, 256]], score=-0.129039
    Step 10: arch=[[1024, 1024], [256]], score=-0.139449

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 2: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 3: arch=[[2048], [1024], [1024, 1024, 1024, 1024], [256]], score=-0.013945
    Step 4: arch=[[2048], [1024], [1024, 1024, 1024, 1024], [128]], score=-0.019263
    Step 5: arch=[[2048, 2048], [1024], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 6: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [128]], score=-0.000993
    Step 7: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [128, 128]], score=0.000909
    Step 8: arch=[[2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [128, 128]], score=-100.000000
    Step 9: arch=[[2048], [512, 512], [1024, 1024, 1024, 1024], [128, 128]], score=-0.028150
    Step 10: arch=[[2048], [512, 512], [1024, 1024, 1024, 1024], [128, 128, 128]], score=-0.008539

Method: TPE
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.126968
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.113404
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.117433
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.060514
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.000491
    Step 7: arch=[[128, 128, 128, 128]], score=-0.164849
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.174493
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.124975

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.164849
    Step 4: arch=[[1024, 1024]], score=-0.151198
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118933
    Step 6: arch=[[512, 512]], score=-0.164041
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.122640
    Step 10: arch=[[256, 256]], score=-0.170103

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.129072
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.118742
    Step 4: arch=[[256, 256], [512, 512]], score=-0.134051
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.005790
    Step 7: arch=[[64, 64, 64]], score=-0.170418
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.044368
    Step 9: arch=[[128, 128]], score=-0.173045
    Step 10: arch=[[1024, 1024], [2048, 2048, 2048], [128, 128, 128, 128, 128], [256]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.164849
    Step 4: arch=[[1024, 1024]], score=-0.151198
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118933
    Step 6: arch=[[512, 512]], score=-0.164041
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.122640
    Step 10: arch=[[128], [1024, 1024], [64, 64], [128]], score=-0.102827

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.164849
    Step 4: arch=[[1024, 1024]], score=-0.151198
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118933
    Step 6: arch=[[512, 512]], score=-0.164041
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.122640
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [256, 256]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024], [1024, 1024, 1024, 1024], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.164849
    Step 4: arch=[[1024, 1024]], score=-0.151198
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118933
    Step 6: arch=[[512, 512]], score=-0.164041
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.122640
    Step 10: arch=[[1024]], score=-0.157182


=== Modifiers: modifiers_19 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.108620
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.144229
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.019332
    Step 5: arch=[[512, 512]], score=0.014015
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.053528
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.008733
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.058928
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.004366
    Step 4: arch=[[64, 64, 64, 64]], score=0.001318
    Step 5: arch=[[64, 64, 64, 64], [1024]], score=0.009836
    Step 6: arch=[[64, 64, 64, 64], [1024, 1024]], score=0.017700
    Step 7: arch=[[64, 64, 64, 64], [1024, 1024], [128]], score=0.021945
    Step 8: arch=[[64, 64, 64, 64], [2048, 2048], [128]], score=0.039988
    Step 9: arch=[[2048, 2048], [128]], score=0.100406
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.105462

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128]], score=0.000000
    Step 3: arch=[[128, 128]], score=-0.004366
    Step 4: arch=[[256, 256]], score=0.001634
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.015304
    Step 6: arch=[[256, 256, 256, 256]], score=0.010747
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.015304
    Step 8: arch=[[256, 256, 256, 256]], score=0.010747
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.015304
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.008733

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.044100
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.109854
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.143738
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.127771
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.144658
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.004366
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.007319
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.088029

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.004366
    Step 4: arch=[[1024, 1024]], score=0.040295
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.085040
    Step 6: arch=[[512, 512]], score=0.014015
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.098930
    Step 10: arch=[[256, 256]], score=0.001634

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.083663
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.065886
    Step 4: arch=[[256, 256], [512, 512]], score=0.011872
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.003001
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.053398
    Step 9: arch=[[128, 128]], score=-0.004366
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.004366
    Step 4: arch=[[1024, 1024]], score=0.040295
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.085040
    Step 6: arch=[[512, 512]], score=0.014015
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.098930
    Step 10: arch=[[1024]], score=0.031939

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.004366
    Step 4: arch=[[1024, 1024]], score=0.040295
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.085040
    Step 6: arch=[[512, 512]], score=0.014015
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.098930
    Step 10: arch=[[64], [2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.004366
    Step 4: arch=[[1024, 1024]], score=0.040295
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.085040
    Step 6: arch=[[512, 512]], score=0.014015
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.098930
    Step 10: arch=[[256], [2048, 2048]], score=0.032994


=== Modifiers: modifiers_20 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.051837
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.091956
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.041549
    Step 5: arch=[[512, 512]], score=-0.052521
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.017748
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.031195
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.069660
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.092045

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[128, 128, 128], [64, 64, 64, 64, 64], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[64, 64, 64], [64, 64, 64, 64, 64]], score=-0.001501
    Step 5: arch=[[64, 64, 64], [64, 64, 64, 64]], score=-0.014396
    Step 6: arch=[[64, 64, 64], [64, 64, 64, 64], [128]], score=-0.013755
    Step 7: arch=[[64, 64, 64], [128, 128, 128, 128], [128]], score=-0.011683
    Step 8: arch=[[128, 128, 128, 128], [128]], score=-0.039517
    Step 9: arch=[[128, 128, 128, 128], [128, 128]], score=-0.026565
    Step 10: arch=[[128, 128, 128, 128], [256, 256]], score=-0.022606

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[128, 128, 128], [64, 64, 64, 64]], score=-0.012894
    Step 4: arch=[[128, 128, 128], [64, 64, 64]], score=-0.025789
    Step 5: arch=[[128, 128, 128, 128], [64, 64, 64]], score=-0.015593
    Step 6: arch=[[64, 64, 64, 64], [64, 64, 64]], score=-0.017134
    Step 7: arch=[[64, 64, 64], [64, 64, 64]], score=-0.027290
    Step 8: arch=[[64, 64, 64], [64, 64]], score=-0.040185
    Step 9: arch=[[64, 64, 64], [128, 128]], score=-0.038292
    Step 10: arch=[[64, 64, 64], [64, 64]], score=-0.040185

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.022991
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.019816
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.026973
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.027107
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.056737
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.075789
    Step 7: arch=[[128, 128, 128, 128]], score=-0.041391
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.063236
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.022566

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041391
    Step 4: arch=[[1024, 1024]], score=-0.038725
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.023234
    Step 6: arch=[[512, 512]], score=-0.052521
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093525
    Step 9: arch=[[2048, 2048]], score=-0.006175
    Step 10: arch=[[256, 256]], score=-0.058799

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.012371
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.014195
    Step 4: arch=[[256, 256], [512, 512]], score=-0.031221
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.053079
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.041608
    Step 9: arch=[[128, 128]], score=-0.061783
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=0.090279

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041391
    Step 4: arch=[[1024, 1024]], score=-0.038725
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.023234
    Step 6: arch=[[512, 512]], score=-0.052521
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093525
    Step 9: arch=[[2048, 2048]], score=-0.006175
    Step 10: arch=[[64], [128, 128, 128, 128, 128], [256, 256, 256, 256, 256], [1024, 1024, 1024, 1024]], score=0.056112

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041391
    Step 4: arch=[[1024, 1024]], score=-0.038725
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.023234
    Step 6: arch=[[512, 512]], score=-0.052521
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093525
    Step 9: arch=[[2048, 2048]], score=-0.006175
    Step 10: arch=[[256, 256], [512, 512, 512, 512, 512], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024], [128]], score=0.090471

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041391
    Step 4: arch=[[1024, 1024]], score=-0.038725
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.023234
    Step 6: arch=[[512, 512]], score=-0.052521
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093525
    Step 9: arch=[[2048, 2048]], score=-0.006175
    Step 10: arch=[[64]], score=-0.073393


=== Modifiers: modifiers_21 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.105941
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.114994
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.008222
    Step 5: arch=[[512, 512]], score=-0.020931
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.093627
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.009074
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054279
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.108581

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256]], score=0.008539
    Step 4: arch=[[128, 128, 128], [256, 256]], score=-0.002705
    Step 5: arch=[[256, 256]], score=-0.023615
    Step 6: arch=[[256, 256], [128]], score=-0.022776
    Step 7: arch=[[256, 256], [256]], score=-0.021210
    Step 8: arch=[[256, 256]], score=-0.023615
    Step 9: arch=[[256]], score=-0.035155
    Step 10: arch=[[512]], score=-0.033640

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256], [256]], score=0.001848
    Step 4: arch=[[128, 128, 128], [256]], score=-0.011244
    Step 5: arch=[[128, 128, 128], [256, 256]], score=-0.002705
    Step 6: arch=[[128, 128], [256, 256]], score=-0.013949
    Step 7: arch=[[128, 128], [512, 512]], score=-0.010543
    Step 8: arch=[[128, 128], [256, 256]], score=-0.013949
    Step 9: arch=[[256, 256], [256, 256]], score=-0.012674
    Step 10: arch=[[256, 256], [128, 128]], score=-0.014371

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.004151
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.051834
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.072049
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.069258
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.085327
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.123806
    Step 7: arch=[[128, 128, 128, 128]], score=-0.002173
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.025118
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.057087

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121124
    Step 3: arch=[[128, 128, 128, 128]], score=-0.002173
    Step 4: arch=[[1024, 1024]], score=-0.013225
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005510
    Step 6: arch=[[512, 512]], score=-0.020931
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011533
    Step 10: arch=[[256, 256]], score=-0.023615

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.045841
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.113782
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.041540
    Step 4: arch=[[256, 256], [512, 512]], score=-0.009029
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.013945
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.038364
    Step 9: arch=[[128, 128]], score=-0.024666
    Step 10: arch=[[512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.061985

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121124
    Step 3: arch=[[128, 128, 128, 128]], score=-0.002173
    Step 4: arch=[[1024, 1024]], score=-0.013225
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005510
    Step 6: arch=[[512, 512]], score=-0.020931
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011533
    Step 10: arch=[[2048, 2048, 2048, 2048], [512, 512], [256, 256], [1024, 1024], [64]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121124
    Step 3: arch=[[128, 128, 128, 128]], score=-0.002173
    Step 4: arch=[[1024, 1024]], score=-0.013225
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005510
    Step 6: arch=[[512, 512]], score=-0.020931
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011533
    Step 10: arch=[[256, 256, 256], [64], [64, 64], [2048, 2048]], score=0.089447

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121124
    Step 3: arch=[[128, 128, 128, 128]], score=-0.002173
    Step 4: arch=[[1024, 1024]], score=-0.013225
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005510
    Step 6: arch=[[512, 512]], score=-0.020931
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011533
    Step 10: arch=[[2048, 2048, 2048], [512, 512]], score=0.065950


=== Modifiers: modifiers_22 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.087314
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.093646
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.032920
    Step 4: arch=[[512, 512, 512]], score=-0.016860
    Step 5: arch=[[512, 512]], score=-0.027750
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.079556
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.000444
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.064388
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.116678

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[128, 128], [256, 256, 256, 256, 256]], score=0.008999
    Step 4: arch=[[128], [256, 256, 256, 256, 256]], score=-0.001234
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.001587
    Step 6: arch=[[256, 256, 256, 256, 256], [128]], score=0.002729
    Step 7: arch=[[256, 256, 256, 256, 256], [256]], score=0.004968
    Step 8: arch=[[256, 256, 256, 256, 256]], score=0.001587
    Step 9: arch=[[256, 256, 256, 256]], score=-0.008778
    Step 10: arch=[[512, 512, 512, 512]], score=-0.005969

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[128, 128], [256, 256, 256]], score=-0.008999
    Step 4: arch=[[128, 128], [128, 128, 128]], score=-0.011418
    Step 5: arch=[[128, 128, 128], [128, 128, 128]], score=-0.001185
    Step 6: arch=[[128, 128, 128], [128, 128, 128, 128]], score=0.007688
    Step 7: arch=[[128, 128], [128, 128, 128, 128]], score=-0.002545
    Step 8: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 9: arch=[[128, 128], [128, 128, 128, 128]], score=-0.002545
    Step 10: arch=[[256, 256], [128, 128, 128, 128]], score=-0.001742

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.001539
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.043614
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.015474
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.059656
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.068489
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009790
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.030599
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.053063

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.032920
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099316
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009790
    Step 4: arch=[[1024, 1024]], score=-0.023183
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.011097
    Step 6: arch=[[512, 512]], score=-0.027750
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119462
    Step 9: arch=[[2048, 2048]], score=-0.009852
    Step 10: arch=[[256, 256]], score=-0.029509

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.042829
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.060095
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.038071
    Step 4: arch=[[256, 256], [512, 512]], score=-0.012135
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.020398
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.035201
    Step 9: arch=[[128, 128]], score=-0.030258
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.032920
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099316
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009790
    Step 4: arch=[[1024, 1024]], score=-0.023183
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.011097
    Step 6: arch=[[512, 512]], score=-0.027750
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119462
    Step 9: arch=[[2048, 2048]], score=-0.009852
    Step 10: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [64, 64, 64, 64, 64], [512, 512, 512]], score=0.117178

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.032920
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099316
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009790
    Step 4: arch=[[1024, 1024]], score=-0.023183
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.011097
    Step 6: arch=[[512, 512]], score=-0.027750
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119462
    Step 9: arch=[[2048, 2048]], score=-0.009852
    Step 10: arch=[[64, 64, 64, 64], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [2048, 2048, 2048], [64]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.032920
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099316
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009790
    Step 4: arch=[[1024, 1024]], score=-0.023183
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.011097
    Step 6: arch=[[512, 512]], score=-0.027750
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119462
    Step 9: arch=[[2048, 2048]], score=-0.009852
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024]], score=0.020761


=== Modifiers: modifiers_23 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.079949
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.079327
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.001056
    Step 5: arch=[[512, 512]], score=-0.031566
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.079940
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.034049
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.039974
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.094306

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[64], [512, 512], [256, 256, 256, 256]], score=0.017542
    Step 4: arch=[[64], [512, 512], [1024, 1024, 1024, 1024]], score=0.044663
    Step 5: arch=[[64], [128, 128], [1024, 1024, 1024, 1024]], score=0.028730
    Step 6: arch=[[2048, 2048, 2048, 2048], [128, 128], [1024, 1024, 1024, 1024]], score=-100.000000
    Step 7: arch=[[64], [128, 128], [1024, 1024, 1024, 1024], [512, 512, 512]], score=0.062328
    Step 8: arch=[[64], [128, 128], [1024, 1024, 1024, 1024], [512, 512, 512, 512]], score=0.073160
    Step 9: arch=[[64], [128, 128, 128], [1024, 1024, 1024, 1024], [512, 512, 512, 512]], score=0.079753
    Step 10: arch=[[64], [128, 128, 128], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=0.081334

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[64], [1024], [256, 256, 256, 256]], score=0.013408
    Step 4: arch=[[64], [1024], [128, 128, 128, 128]], score=0.009057
    Step 5: arch=[[64], [1024], [128, 128, 128, 128, 128]], score=0.032158
    Step 6: arch=[[64], [1024], [64, 64, 64, 64, 64]], score=0.030044
    Step 7: arch=[[64], [1024], [64, 64, 64, 64]], score=0.006982
    Step 8: arch=[[64], [1024], [64, 64, 64, 64, 64]], score=0.030044
    Step 9: arch=[[128], [1024], [64, 64, 64, 64, 64]], score=0.034329
    Step 10: arch=[[128], [2048], [64, 64, 64, 64, 64]], score=0.059523

Method: TPE
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.011412
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.082895
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.083477
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.082381
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.083573
    Step 7: arch=[[128, 128, 128, 128]], score=0.005131
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.056045
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.083437

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.005131
    Step 4: arch=[[1024, 1024]], score=-0.000412
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036433
    Step 6: arch=[[512, 512]], score=-0.031566
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093492
    Step 9: arch=[[2048, 2048]], score=0.072065
    Step 10: arch=[[256, 256]], score=-0.045872

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.081680
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.080698
    Step 4: arch=[[256, 256], [512, 512]], score=-0.016524
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.027206
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.080813
    Step 9: arch=[[128, 128]], score=-0.052707
    Step 10: arch=[[256, 256], [512, 512]], score=-0.016524

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.005131
    Step 4: arch=[[1024, 1024]], score=-0.000412
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036433
    Step 6: arch=[[512, 512]], score=-0.031566
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093492
    Step 9: arch=[[2048, 2048]], score=0.072065
    Step 10: arch=[[64], [64, 64, 64, 64], [256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128]], score=0.081422

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.005131
    Step 4: arch=[[1024, 1024]], score=-0.000412
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036433
    Step 6: arch=[[512, 512]], score=-0.031566
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093492
    Step 9: arch=[[2048, 2048]], score=0.072065
    Step 10: arch=[[128], [1024, 1024], [64, 64, 64, 64, 64], [512, 512], [512, 512]], score=0.079892

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64], [512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.005131
    Step 4: arch=[[1024, 1024]], score=-0.000412
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036433
    Step 6: arch=[[512, 512]], score=-0.031566
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.093492
    Step 9: arch=[[2048, 2048]], score=0.072065
    Step 10: arch=[[256]], score=-0.075109


=== Modifiers: modifiers_24 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.034409
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.056468
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.055284
    Step 5: arch=[[512, 512]], score=-0.060759
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.024255
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.049846
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.011563
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-0.011491

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 2: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 3: arch=[[64, 64, 64], [64], [64, 64], [512, 512, 512], [256, 256, 256]], score=0.014448
    Step 4: arch=[[64, 64, 64], [64], [64], [512, 512, 512], [256, 256, 256]], score=0.010663
    Step 5: arch=[[64, 64, 64], [64], [512, 512, 512], [256, 256, 256]], score=-0.011015
    Step 6: arch=[[64, 64, 64], [64], [512, 512, 512], [256, 256, 256], [128]], score=-0.008224
    Step 7: arch=[[64, 64, 64], [128], [512, 512, 512], [256, 256, 256], [128]], score=-0.007712
    Step 8: arch=[[128], [512, 512, 512], [256, 256, 256], [128]], score=-0.048484
    Step 9: arch=[[128], [512, 512, 512], [256, 256, 256], [128, 128]], score=-0.036025
    Step 10: arch=[[128], [512, 512], [256, 256, 256], [128, 128]], score=-0.038439

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 2: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 3: arch=[[64, 64, 64], [64], [64, 64], [256, 256], [256, 256, 256]], score=-0.010780
    Step 4: arch=[[64, 64, 64, 64], [64], [64, 64], [256, 256], [256, 256, 256]], score=-0.005743
    Step 5: arch=[[64, 64, 64, 64], [64], [64, 64], [256, 256, 256], [256, 256, 256]], score=0.007114
    Step 6: arch=[[64, 64, 64, 64], [64], [64, 64], [256, 256, 256, 256], [256, 256, 256]], score=0.019970
    Step 7: arch=[[64, 64, 64, 64], [64], [64, 64], [512, 512, 512, 512], [256, 256, 256]], score=0.033934
    Step 8: arch=[[64, 64, 64, 64], [128], [64, 64], [512, 512, 512, 512], [256, 256, 256]], score=0.034360
    Step 9: arch=[[64, 64, 64, 64], [128], [64, 64], [512, 512, 512, 512], [128, 128, 128]], score=0.027695
    Step 10: arch=[[64, 64, 64, 64], [128], [64, 64], [512, 512, 512, 512], [64, 64, 64]], score=0.024553

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.050529
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.028458
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.010211
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.022936
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.010712
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.054904
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.065683
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.030488

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.054904
    Step 4: arch=[[1024, 1024]], score=-0.054299
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.046991
    Step 6: arch=[[512, 512]], score=-0.060759
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.019157
    Step 9: arch=[[2048, 2048]], score=-0.038716
    Step 10: arch=[[256, 256]], score=-0.063656

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.035546
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.004322
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.037916
    Step 4: arch=[[256, 256], [512, 512]], score=-0.058077
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.073236
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.060645
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.039542
    Step 9: arch=[[128, 128]], score=-0.065021
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.059717

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.054904
    Step 4: arch=[[1024, 1024]], score=-0.054299
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.046991
    Step 6: arch=[[512, 512]], score=-0.060759
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.019157
    Step 9: arch=[[2048, 2048]], score=-0.038716
    Step 10: arch=[[64, 64, 64, 64], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [2048, 2048, 2048], [64]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.054904
    Step 4: arch=[[1024, 1024]], score=-0.054299
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.046991
    Step 6: arch=[[512, 512]], score=-0.060759
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.019157
    Step 9: arch=[[2048, 2048]], score=-0.038716
    Step 10: arch=[[256], [512, 512, 512]], score=-0.060797

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64], [64], [64, 64], [512, 512], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.054904
    Step 4: arch=[[1024, 1024]], score=-0.054299
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.046991
    Step 6: arch=[[512, 512]], score=-0.060759
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.019157
    Step 9: arch=[[2048, 2048]], score=-0.038716
    Step 10: arch=[[256], [2048, 2048]], score=-0.050200


=== Modifiers: modifiers_25 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.141144
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.136059
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.077799
    Step 4: arch=[[512, 512, 512]], score=0.015298
    Step 5: arch=[[512, 512]], score=0.009437
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.130612
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.019911
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.096703
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[128]], score=0.000000
    Step 2: arch=[[128]], score=0.000000
    Step 3: arch=[[128, 128]], score=0.004978
    Step 4: arch=[[64, 64]], score=0.004337
    Step 5: arch=[[64, 64], [1024]], score=0.012822
    Step 6: arch=[[64, 64], [1024, 1024]], score=0.016953
    Step 7: arch=[[64, 64], [1024, 1024], [128]], score=0.018340
    Step 8: arch=[[64, 64], [2048, 2048], [128]], score=0.034588
    Step 9: arch=[[2048, 2048], [128]], score=0.039228
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.041102

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[128]], score=0.000000
    Step 2: arch=[[128]], score=0.000000
    Step 3: arch=[[256]], score=0.001192
    Step 4: arch=[[512]], score=0.003576
    Step 5: arch=[[512, 512]], score=0.009437
    Step 6: arch=[[64, 64, 64, 64]], score=0.014204
    Step 7: arch=[[64, 64, 64]], score=0.009271
    Step 8: arch=[[64, 64, 64, 64]], score=0.014204
    Step 9: arch=[[64, 64, 64]], score=0.009271
    Step 10: arch=[[128, 128, 128]], score=0.009955

Method: TPE
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.031635
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.075402
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.072558
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.089541
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.106625
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.157350
    Step 7: arch=[[128, 128, 128, 128]], score=0.014933
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=0.004337
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.070903

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.077799
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.151003
    Step 3: arch=[[128, 128, 128, 128]], score=0.014933
    Step 4: arch=[[1024, 1024]], score=0.017029
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.069475
    Step 6: arch=[[512, 512]], score=0.009437
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.037854
    Step 10: arch=[[256, 256]], score=0.006347

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.065926
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.098171
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.053353
    Step 4: arch=[[256, 256], [512, 512]], score=0.013188
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=0.009271
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.037905
    Step 9: arch=[[128, 128]], score=0.004978
    Step 10: arch=[[2048, 2048], [64, 64, 64, 64, 64], [2048]], score=0.075599

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.077799
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.151003
    Step 3: arch=[[128, 128, 128, 128]], score=0.014933
    Step 4: arch=[[1024, 1024]], score=0.017029
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.069475
    Step 6: arch=[[512, 512]], score=0.009437
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.037854
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.152838

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.077799
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.151003
    Step 3: arch=[[128, 128, 128, 128]], score=0.014933
    Step 4: arch=[[1024, 1024]], score=0.017029
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.069475
    Step 6: arch=[[512, 512]], score=0.009437
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.037854
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512], [128, 128, 128, 128, 128]], score=0.152528

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.077799
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.151003
    Step 3: arch=[[128, 128, 128, 128]], score=0.014933
    Step 4: arch=[[1024, 1024]], score=0.017029
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.069475
    Step 6: arch=[[512, 512]], score=0.009437
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.037854
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512], [512, 512, 512]], score=0.167344


=== Modifiers: modifiers_26 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.021148
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.018571
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.093267
    Step 5: arch=[[512, 512]], score=-0.116416
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.040305
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.070830
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.056970
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.017035

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024]], score=0.011739
    Step 4: arch=[[256, 256], [128, 128, 128, 128, 128], [1024, 1024, 1024]], score=-0.001590
    Step 5: arch=[[256, 256], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.013556
    Step 6: arch=[[256, 256], [256, 256, 256, 256, 256], [1024, 1024, 1024, 1024]], score=0.015187
    Step 7: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024]], score=-0.004970
    Step 8: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024]], score=0.011065
    Step 9: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024]], score=-0.004970
    Step 10: arch=[[256, 256, 256, 256], [1024, 1024, 1024, 1024]], score=-0.026889

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[512, 512], [128, 128, 128], [1024, 1024, 1024]], score=-0.011739
    Step 4: arch=[[512, 512], [256, 256, 256], [1024, 1024, 1024]], score=-0.008548
    Step 5: arch=[[128, 128, 128], [256, 256, 256], [1024, 1024, 1024]], score=-0.006985
    Step 6: arch=[[128, 128, 128], [256, 256, 256], [512, 512, 512]], score=-0.046048
    Step 7: arch=[[128, 128], [256, 256, 256], [512, 512, 512]], score=-0.067706
    Step 8: arch=[[64, 64], [256, 256, 256], [512, 512, 512]], score=-0.070892
    Step 9: arch=[[64, 64], [256, 256, 256], [512, 512, 512, 512]], score=-0.061743
    Step 10: arch=[[128, 128], [256, 256, 256], [512, 512, 512, 512]], score=-0.058556

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.093124
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.010286
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.019055
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.000864
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.015247
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.015503
    Step 7: arch=[[128, 128, 128, 128]], score=-0.092491
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.138871
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.010504

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.019612
    Step 3: arch=[[128, 128, 128, 128]], score=-0.092491
    Step 4: arch=[[1024, 1024]], score=-0.087781
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.114520
    Step 6: arch=[[512, 512]], score=-0.116416
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.020995
    Step 10: arch=[[256, 256]], score=-0.129545

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.032164
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.022501
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.036617
    Step 4: arch=[[256, 256], [512, 512]], score=-0.111724
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.117285
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.032812
    Step 9: arch=[[128, 128]], score=-0.135812
    Step 10: arch=[[2048], [512, 512, 512, 512, 512], [2048]], score=0.020977

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.019612
    Step 3: arch=[[128, 128, 128, 128]], score=-0.092491
    Step 4: arch=[[1024, 1024]], score=-0.087781
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.114520
    Step 6: arch=[[512, 512]], score=-0.116416
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.020995
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64], [1024, 1024], [1024, 1024, 1024, 1024], [128]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.019612
    Step 3: arch=[[128, 128, 128, 128]], score=-0.092491
    Step 4: arch=[[1024, 1024]], score=-0.087781
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.114520
    Step 6: arch=[[512, 512]], score=-0.116416
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.020995
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [256, 256, 256], [128], [256, 256, 256]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.019612
    Step 3: arch=[[128, 128, 128, 128]], score=-0.092491
    Step 4: arch=[[1024, 1024]], score=-0.087781
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.114520
    Step 6: arch=[[512, 512]], score=-0.116416
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.020995
    Step 10: arch=[[2048, 2048], [64, 64, 64], [256], [512], [512]], score=0.015921


=== Modifiers: modifiers_27 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.108991
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.093412
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.019457
    Step 5: arch=[[512, 512]], score=0.004291
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.097143
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.033781
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.053850
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.135669

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[512], [64, 64, 64, 64, 64]], score=0.003600
    Step 4: arch=[[512, 512], [64, 64, 64, 64, 64]], score=0.018760
    Step 5: arch=[[64, 64, 64, 64, 64]], score=0.031482
    Step 6: arch=[[64, 64, 64, 64, 64], [128]], score=0.034509
    Step 7: arch=[[64, 64, 64, 64, 64], [256]], score=0.040562
    Step 8: arch=[[64, 64, 64, 64, 64]], score=0.031482
    Step 9: arch=[[64, 64, 64, 64]], score=0.017148
    Step 10: arch=[[128, 128, 128, 128]], score=0.019407

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[512], [64, 64, 64]], score=-0.003600
    Step 4: arch=[[512], [64, 64]], score=-0.007201
    Step 5: arch=[[512, 512], [64, 64]], score=0.007960
    Step 6: arch=[[256, 256], [64, 64]], score=-0.001271
    Step 7: arch=[[256], [64, 64]], score=-0.015803
    Step 8: arch=[[256], [64]], score=-0.019403
    Step 9: arch=[[256], [128]], score=-0.016279
    Step 10: arch=[[128], [128]], score=-0.020645

Method: TPE
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.035167
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.086860
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.077542
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.090537
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.133399
    Step 7: arch=[[128, 128, 128, 128]], score=0.019407
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.011521
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.077507

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.019407
    Step 4: arch=[[1024, 1024]], score=0.023943
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.066548
    Step 6: arch=[[512, 512]], score=0.004291
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.068300
    Step 10: arch=[[256, 256]], score=-0.004902

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.063134
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.062584
    Step 4: arch=[[256, 256], [512, 512]], score=0.021860
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=0.002813
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.093905
    Step 9: arch=[[128, 128]], score=-0.009341
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=0.132486

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.019407
    Step 4: arch=[[1024, 1024]], score=0.023943
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.066548
    Step 6: arch=[[512, 512]], score=0.004291
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.068300
    Step 10: arch=[[128, 128], [1024, 1024]], score=0.045410

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.019407
    Step 4: arch=[[1024, 1024]], score=0.023943
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.066548
    Step 6: arch=[[512, 512]], score=0.004291
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.068300
    Step 10: arch=[[2048], [512, 512, 512, 512, 512]], score=0.086811

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.019407
    Step 4: arch=[[1024, 1024]], score=0.023943
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.066548
    Step 6: arch=[[512, 512]], score=0.004291
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.068300
    Step 10: arch=[[128, 128], [2048]], score=0.085446


=== Modifiers: modifiers_28 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.021470
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.067690
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.085677
    Step 5: arch=[[512, 512]], score=-0.089764
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.005266
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.087371
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.013322
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.007649

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64, 64]], score=0.023534
    Step 4: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256, 256], [64, 64, 64, 64, 64]], score=0.039788
    Step 5: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=-0.013109
    Step 6: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64], [128]], score=-0.012615
    Step 7: arch=[[64, 64, 64, 64, 64], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [128]], score=-0.007498
    Step 8: arch=[[64, 64, 64, 64, 64], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=-0.007993
    Step 9: arch=[[1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=-0.051940
    Step 10: arch=[[1024, 1024, 1024, 1024], [64, 64, 64, 64]], score=-0.054838

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64, 64], [512, 512, 512], [256], [64, 64, 64, 64]], score=-0.003199
    Step 4: arch=[[64, 64, 64, 64, 64], [512, 512, 512], [256], [64, 64, 64]], score=-0.026733
    Step 5: arch=[[64, 64, 64, 64, 64], [512, 512, 512], [256, 256], [64, 64, 64]], score=-0.010479
    Step 6: arch=[[64, 64, 64, 64, 64], [512, 512, 512], [128, 128], [64, 64, 64]], score=-0.014904
    Step 7: arch=[[64, 64, 64, 64], [512, 512, 512], [128, 128], [64, 64, 64]], score=-0.017815
    Step 8: arch=[[64, 64, 64, 64], [512, 512], [128, 128], [64, 64, 64]], score=-0.021018
    Step 9: arch=[[64, 64, 64, 64], [512, 512], [128, 128], [128, 128, 128]], score=-0.020333
    Step 10: arch=[[64, 64, 64, 64], [512, 512], [64, 64], [128, 128, 128]], score=-0.022527

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.066040
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.019617
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.000282
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.000060
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.035286
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.090339
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.097232
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.028756

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.090339
    Step 4: arch=[[1024, 1024]], score=-0.078996
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.028332
    Step 6: arch=[[512, 512]], score=-0.089764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.046127
    Step 9: arch=[[2048, 2048]], score=-0.050310
    Step 10: arch=[[256, 256]], score=-0.094255

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.031724
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.031668
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.046507
    Step 4: arch=[[256, 256], [512, 512]], score=-0.088579
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.094319
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.067142
    Step 9: arch=[[128, 128]], score=-0.096277
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.090339
    Step 4: arch=[[1024, 1024]], score=-0.078996
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.028332
    Step 6: arch=[[512, 512]], score=-0.089764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.046127
    Step 9: arch=[[2048, 2048]], score=-0.050310
    Step 10: arch=[[64, 64, 64, 64], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [2048, 2048, 2048], [64]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.090339
    Step 4: arch=[[1024, 1024]], score=-0.078996
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.028332
    Step 6: arch=[[512, 512]], score=-0.089764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.046127
    Step 9: arch=[[2048, 2048]], score=-0.050310
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [64, 64, 64, 64, 64], [256, 256, 256], [1024, 1024]], score=0.068428

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.090339
    Step 4: arch=[[1024, 1024]], score=-0.078996
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.028332
    Step 6: arch=[[512, 512]], score=-0.089764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.046127
    Step 9: arch=[[2048, 2048]], score=-0.050310
    Step 10: arch=[[128], [2048]], score=-0.089782


=== Modifiers: modifiers_29 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.093552
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.080594
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.020528
    Step 5: arch=[[512, 512]], score=-0.034414
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.067765
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.016438
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054771
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.097356

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.011842
    Step 4: arch=[[256], [512, 512, 512, 512, 512]], score=-0.000787
    Step 5: arch=[[512, 512, 512, 512, 512]], score=0.007246
    Step 6: arch=[[512, 512, 512, 512, 512], [128]], score=0.009159
    Step 7: arch=[[512, 512, 512, 512, 512], [256]], score=0.012775
    Step 8: arch=[[512, 512, 512, 512, 512]], score=0.007246
    Step 9: arch=[[512, 512, 512, 512]], score=-0.006641
    Step 10: arch=[[1024, 1024, 1024, 1024]], score=0.031517

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512, 512]], score=-0.011842
    Step 4: arch=[[256, 256], [256, 256, 256]], score=-0.020569
    Step 5: arch=[[256, 256, 256], [256, 256, 256]], score=-0.007929
    Step 6: arch=[[256, 256, 256], [256, 256, 256, 256]], score=0.002899
    Step 7: arch=[[256, 256], [256, 256, 256, 256]], score=-0.009741
    Step 8: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 9: arch=[[256, 256], [256, 256, 256, 256]], score=-0.009741
    Step 10: arch=[[512, 512], [256, 256, 256, 256]], score=0.003702

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.007452
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.059372
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.056545
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.075779
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.028779
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.056457
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.050658

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028779
    Step 4: arch=[[1024, 1024]], score=-0.006137
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005682
    Step 6: arch=[[512, 512]], score=-0.034414
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.060291
    Step 10: arch=[[256, 256]], score=-0.047319

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.038318
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.032783
    Step 4: arch=[[256, 256], [512, 512]], score=-0.023684
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.095496
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.044193
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.054124
    Step 9: arch=[[128, 128]], score=-0.053462
    Step 10: arch=[[64, 64, 64, 64, 64], [64], [64, 64, 64, 64, 64]], score=0.025820

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028779
    Step 4: arch=[[1024, 1024]], score=-0.006137
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005682
    Step 6: arch=[[512, 512]], score=-0.034414
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.060291
    Step 10: arch=[[2048, 2048], [512, 512]], score=0.090685

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028779
    Step 4: arch=[[1024, 1024]], score=-0.006137
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005682
    Step 6: arch=[[512, 512]], score=-0.034414
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.060291
    Step 10: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028779
    Step 4: arch=[[1024, 1024]], score=-0.006137
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005682
    Step 6: arch=[[512, 512]], score=-0.034414
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.060291
    Step 10: arch=[[512, 512, 512]], score=-0.020528


=== Modifiers: modifiers_30 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.072489
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.075172
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.093938
    Step 4: arch=[[512, 512, 512]], score=-0.023629
    Step 5: arch=[[512, 512]], score=-0.037537
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.060086
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.110011
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.010207
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054158
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[128, 128], [1024, 1024, 1024, 1024]], score=0.014931
    Step 4: arch=[[128], [1024, 1024, 1024, 1024]], score=0.002475
    Step 5: arch=[[1024, 1024, 1024, 1024]], score=0.015615
    Step 6: arch=[[1024, 1024, 1024, 1024], [128]], score=0.017463
    Step 7: arch=[[1024, 1024, 1024, 1024], [256]], score=0.020804
    Step 8: arch=[[1024, 1024, 1024, 1024]], score=0.015615
    Step 9: arch=[[1024, 1024, 1024]], score=-0.002906
    Step 10: arch=[[2048, 2048, 2048]], score=0.056977

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[128, 128], [1024, 1024]], score=-0.014931
    Step 4: arch=[[128, 128], [512, 512]], score=-0.029131
    Step 5: arch=[[128, 128, 128], [512, 512]], score=-0.016670
    Step 6: arch=[[128, 128, 128], [512, 512, 512]], score=-0.006494
    Step 7: arch=[[128, 128], [512, 512, 512]], score=-0.018954
    Step 8: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 9: arch=[[128, 128], [512, 512, 512]], score=-0.018954
    Step 10: arch=[[256, 256], [512, 512, 512]], score=-0.015181

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.017155
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.031533
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.066686
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.029430
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.028754
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.101654
    Step 7: arch=[[128, 128, 128, 128]], score=-0.022673
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.049115
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.032844

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.093938
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.102703
    Step 3: arch=[[128, 128, 128, 128]], score=-0.022673
    Step 4: arch=[[1024, 1024]], score=-0.021426
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018870
    Step 6: arch=[[512, 512]], score=-0.037537
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.020015
    Step 10: arch=[[256, 256]], score=-0.044441

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.020379
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.099285
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.019655
    Step 4: arch=[[256, 256], [512, 512]], score=-0.025334
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.036721
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.041819
    Step 9: arch=[[128, 128]], score=-0.047605
    Step 10: arch=[[2048], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.093938
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.102703
    Step 3: arch=[[128, 128, 128, 128]], score=-0.022673
    Step 4: arch=[[1024, 1024]], score=-0.021426
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018870
    Step 6: arch=[[512, 512]], score=-0.037537
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.020015
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128]], score=0.100752

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.093938
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.102703
    Step 3: arch=[[128, 128, 128, 128]], score=-0.022673
    Step 4: arch=[[1024, 1024]], score=-0.021426
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018870
    Step 6: arch=[[512, 512]], score=-0.037537
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.020015
    Step 10: arch=[[2048, 2048], [2048, 2048, 2048, 2048, 2048], [512, 512, 512, 512]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.093938
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.102703
    Step 3: arch=[[128, 128, 128, 128]], score=-0.022673
    Step 4: arch=[[1024, 1024]], score=-0.021426
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018870
    Step 6: arch=[[512, 512]], score=-0.037537
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.020015
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_31 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.033957
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.003980
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.158663
    Step 5: arch=[[512, 512]], score=-0.165079
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.107551
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.000933
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.156999
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.046678
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[512, 512], [128, 128, 128, 128, 128], [512, 512, 512, 512]], score=-0.036527
    Step 4: arch=[[512, 512], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=-0.023391
    Step 5: arch=[[512, 512], [256, 256, 256, 256, 256], [512, 512, 512, 512, 512]], score=-0.016555
    Step 6: arch=[[256, 256, 256, 256, 256], [512, 512, 512, 512, 512]], score=-0.062843
    Step 7: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024]], score=-0.022136
    Step 8: arch=[[256, 256, 256, 256, 256], [512, 512, 512, 512]], score=-0.081840
    Step 9: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512]], score=-0.085477
    Step 10: arch=[[128, 128, 128, 128], [512, 512, 512, 512]], score=-0.090665

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[512, 512], [128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=-0.010654
    Step 4: arch=[[512, 512], [256, 256, 256, 256], [1024, 1024, 1024, 1024]], score=-0.003518
    Step 5: arch=[[128, 128, 128], [256, 256, 256, 256], [1024, 1024, 1024, 1024]], score=-0.006594
    Step 6: arch=[[128, 128, 128], [256, 256, 256, 256], [512, 512, 512, 512]], score=-0.050259
    Step 7: arch=[[128, 128], [256, 256, 256, 256], [512, 512, 512, 512]], score=-0.055449
    Step 8: arch=[[64, 64], [256, 256, 256, 256], [512, 512, 512, 512]], score=-0.056698
    Step 9: arch=[[64, 64], [256, 256, 256, 256], [512, 512, 512, 512, 512]], score=-0.043598
    Step 10: arch=[[128, 128], [256, 256, 256, 256], [512, 512, 512, 512, 512]], score=-0.042348

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.115712
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.068198
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.041981
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.001429
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.056634
    Step 7: arch=[[128, 128, 128, 128]], score=-0.162191
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.173681
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.070864

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.162191
    Step 4: arch=[[1024, 1024]], score=-0.152804
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.099785
    Step 6: arch=[[512, 512]], score=-0.165079
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.120439
    Step 10: arch=[[256, 256]], score=-0.170239

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.076055
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.079014
    Step 4: arch=[[256, 256], [512, 512]], score=-0.136092
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.005024
    Step 7: arch=[[64, 64, 64]], score=-0.168551
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.049732
    Step 9: arch=[[128, 128]], score=-0.172575
    Step 10: arch=[[1024], [256], [2048, 2048]], score=-0.021322

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.162191
    Step 4: arch=[[1024, 1024]], score=-0.152804
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.099785
    Step 6: arch=[[512, 512]], score=-0.165079
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.120439
    Step 10: arch=[[128, 128], [1024], [128, 128], [256]], score=-0.124274

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.162191
    Step 4: arch=[[1024, 1024]], score=-0.152804
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.099785
    Step 6: arch=[[512, 512]], score=-0.165079
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.120439
    Step 10: arch=[[64, 64, 64, 64], [512, 512, 512, 512], [256, 256, 256, 256, 256]], score=-0.038254

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.162191
    Step 4: arch=[[1024, 1024]], score=-0.152804
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.099785
    Step 6: arch=[[512, 512]], score=-0.165079
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.120439
    Step 10: arch=[[64], [128, 128, 128]], score=-0.142479


=== Modifiers: modifiers_32 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.138960
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.140357
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.003276
    Step 5: arch=[[512, 512]], score=0.000057
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.083905
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.151902
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.001113
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.075374
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.143012

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64]], score=-0.002498
    Step 4: arch=[[128, 128, 128, 128]], score=-0.001419
    Step 5: arch=[[128, 128, 128, 128, 128]], score=0.001113
    Step 6: arch=[[1024, 1024]], score=0.010057
    Step 7: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[1024, 1024], [512, 512, 512]], score=0.042386
    Step 9: arch=[[1024, 1024], [512, 512, 512, 512]], score=0.055926
    Step 10: arch=[[1024, 1024], [512, 512, 512, 512, 512]], score=0.069467

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64]], score=-0.002498
    Step 4: arch=[[128, 128, 128, 128]], score=-0.001419
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.003615
    Step 6: arch=[[256, 256, 256, 256]], score=0.000945
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.003615
    Step 8: arch=[[256, 256, 256, 256]], score=0.000945
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.003615
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.001113

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.029877
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.070128
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.082391
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.095542
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.143053
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.143549
    Step 7: arch=[[128, 128, 128, 128]], score=-0.001419
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.007494
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.069047

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121798
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001419
    Step 4: arch=[[1024, 1024]], score=0.010057
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.037456
    Step 6: arch=[[512, 512]], score=0.000057
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.034446
    Step 10: arch=[[256, 256]], score=-0.004395

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.066515
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.138440
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.059221
    Step 4: arch=[[256, 256], [512, 512]], score=0.012269
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.151555
    Step 7: arch=[[64, 64, 64]], score=-0.004996
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.062602
    Step 9: arch=[[128, 128]], score=-0.006483
    Step 10: arch=[[64, 64, 64]], score=-0.004996

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121798
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001419
    Step 4: arch=[[1024, 1024]], score=0.010057
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.037456
    Step 6: arch=[[512, 512]], score=0.000057
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.034446
    Step 10: arch=[[2048, 2048, 2048], [64], [128, 128], [512], [128, 128, 128, 128, 128]], score=0.090928

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121798
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001419
    Step 4: arch=[[1024, 1024]], score=0.010057
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.037456
    Step 6: arch=[[512, 512]], score=0.000057
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.034446
    Step 10: arch=[[64, 64, 64], [256, 256], [64, 64, 64], [256, 256]], score=0.048668

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121798
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001419
    Step 4: arch=[[1024, 1024]], score=0.010057
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.037456
    Step 6: arch=[[512, 512]], score=0.000057
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.034446
    Step 10: arch=[[256, 256, 256, 256]], score=0.000945


=== Modifiers: modifiers_33 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.058369
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.077199
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.076266
    Step 4: arch=[[512, 512, 512]], score=-0.042624
    Step 5: arch=[[512, 512]], score=-0.054455
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.020145
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.040966
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.009619
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128, 128]], score=0.005610
    Step 4: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64, 64], [128, 128, 128]], score=0.027780
    Step 5: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [128, 128, 128]], score=0.039017
    Step 6: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [128, 128, 128], [128]], score=0.040892
    Step 7: arch=[[128, 128, 128, 128, 128], [1024, 1024, 1024, 1024], [128, 128, 128], [128]], score=0.076485
    Step 8: arch=[[128, 128, 128, 128, 128], [1024, 1024, 1024, 1024], [128, 128, 128]], score=0.076379
    Step 9: arch=[[1024, 1024, 1024, 1024], [128, 128, 128]], score=0.011263
    Step 10: arch=[[1024, 1024, 1024, 1024], [128, 128]], score=0.007876

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [512, 512, 512], [64], [128, 128]], score=-0.005995
    Step 4: arch=[[128, 128, 128, 128, 128], [512, 512, 512], [64], [64, 64]], score=-0.007859
    Step 5: arch=[[128, 128, 128, 128], [512, 512, 512], [64], [64, 64]], score=-0.018974
    Step 6: arch=[[128, 128, 128, 128], [512, 512, 512, 512], [64], [64, 64]], score=-0.012979
    Step 7: arch=[[128, 128, 128], [512, 512, 512, 512], [64], [64, 64]], score=-0.024094
    Step 8: arch=[[128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=-0.022230
    Step 9: arch=[[128, 128, 128], [256, 256, 256, 256], [64], [128, 128]], score=-0.037341
    Step 10: arch=[[256, 256, 256], [256, 256, 256, 256], [64], [128, 128]], score=-0.030376

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.017010
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.057512
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.076204
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.061489
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.078362
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.077272
    Step 7: arch=[[128, 128, 128, 128]], score=-0.052084
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.077546
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.037131

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.076266
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.078430
    Step 3: arch=[[128, 128, 128, 128]], score=-0.052084
    Step 4: arch=[[1024, 1024]], score=-0.026640
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.039465
    Step 6: arch=[[512, 512]], score=-0.054455
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.033548
    Step 10: arch=[[256, 256]], score=-0.067793

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.026013
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.078733
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.012559
    Step 4: arch=[[256, 256], [512, 512]], score=-0.045752
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.066465
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.036303
    Step 9: arch=[[128, 128]], score=-0.074319
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64, 64, 64, 64], [2048, 2048, 2048], [2048], [64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.076266
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.078430
    Step 3: arch=[[128, 128, 128, 128]], score=-0.052084
    Step 4: arch=[[1024, 1024]], score=-0.026640
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.039465
    Step 6: arch=[[512, 512]], score=-0.054455
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.033548
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128], [256, 256, 256, 256], [128], [256, 256, 256, 256]], score=0.083068

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.076266
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.078430
    Step 3: arch=[[128, 128, 128, 128]], score=-0.052084
    Step 4: arch=[[1024, 1024]], score=-0.026640
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.039465
    Step 6: arch=[[512, 512]], score=-0.054455
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.033548
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=0.077581

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512], [64], [128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.076266
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.078430
    Step 3: arch=[[128, 128, 128, 128]], score=-0.052084
    Step 4: arch=[[1024, 1024]], score=-0.026640
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.039465
    Step 6: arch=[[512, 512]], score=-0.054455
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.033548
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_34 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.029072
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.019304
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.111525
    Step 5: arch=[[512, 512]], score=-0.129758
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.018855
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.087737
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.033625
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.014685

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128]], score=-0.004223
    Step 4: arch=[[2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-0.035176
    Step 5: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000
    Step 6: arch=[[2048, 2048, 2048], [128, 128, 128, 128, 128], [512, 512, 512]], score=-0.006254
    Step 7: arch=[[2048, 2048, 2048], [128, 128, 128, 128, 128], [512, 512, 512, 512]], score=0.003592
    Step 8: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [512, 512, 512, 512]], score=-100.000000
    Step 9: arch=[[2048, 2048, 2048], [128, 128, 128, 128, 128], [128, 128, 128, 128]], score=-0.010575
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [128, 128, 128, 128]], score=-0.011982

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048], [64, 64, 64, 64], [256, 256, 256, 256, 256]], score=-0.001924
    Step 4: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256, 256]], score=-0.000491
    Step 5: arch=[[128, 128, 128], [128, 128, 128, 128], [256, 256, 256, 256, 256]], score=-0.079134
    Step 6: arch=[[128, 128, 128], [128, 128, 128, 128], [128, 128, 128, 128, 128]], score=-0.083455
    Step 7: arch=[[128, 128], [128, 128, 128, 128], [128, 128, 128, 128, 128]], score=-0.100662
    Step 8: arch=[[64, 64], [128, 128, 128, 128], [128, 128, 128, 128, 128]], score=-0.102192
    Step 9: arch=[[64, 64], [128, 128, 128, 128], [128, 128, 128, 128]], score=-0.109950
    Step 10: arch=[[128, 128], [128, 128, 128, 128], [128, 128, 128, 128]], score=-0.108420

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.116861
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.058285
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.025178
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.052411
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.045282
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.021082
    Step 7: arch=[[128, 128, 128, 128]], score=-0.104945
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.140842
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.057395

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.018643
    Step 3: arch=[[128, 128, 128, 128]], score=-0.104945
    Step 4: arch=[[1024, 1024]], score=-0.115043
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118527
    Step 6: arch=[[512, 512]], score=-0.129758
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.079057
    Step 10: arch=[[256, 256]], score=-0.136297

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.074603
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.000871
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.080145
    Step 4: arch=[[256, 256], [512, 512]], score=-0.130142
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.123686
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.080461
    Step 9: arch=[[128, 128]], score=-0.139361
    Step 10: arch=[[2048], [64, 64, 64, 64, 64], [2048, 2048]], score=-0.022740

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.018643
    Step 3: arch=[[128, 128, 128, 128]], score=-0.104945
    Step 4: arch=[[1024, 1024]], score=-0.115043
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118527
    Step 6: arch=[[512, 512]], score=-0.129758
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.079057
    Step 10: arch=[[64, 64, 64, 64, 64], [512], [64, 64, 64, 64, 64], [64], [64]], score=-0.056716

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.018643
    Step 3: arch=[[128, 128, 128, 128]], score=-0.104945
    Step 4: arch=[[1024, 1024]], score=-0.115043
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118527
    Step 6: arch=[[512, 512]], score=-0.129758
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.079057
    Step 10: arch=[[2048], [256], [1024, 1024, 1024, 1024]], score=-0.038784

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.018643
    Step 3: arch=[[128, 128, 128, 128]], score=-0.104945
    Step 4: arch=[[1024, 1024]], score=-0.115043
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118527
    Step 6: arch=[[512, 512]], score=-0.129758
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.079057
    Step 10: arch=[[2048, 2048, 2048], [128], [128], [512, 512, 512, 512, 512]], score=0.021710


=== Modifiers: modifiers_35 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.002687
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.010710
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.060171
    Step 5: arch=[[512, 512]], score=-0.100266
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.002160
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.025982
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.059061
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=0.000907
    Step 4: arch=[[1024, 1024], [1024, 1024, 1024, 1024]], score=-0.001554
    Step 5: arch=[[1024, 1024, 1024, 1024]], score=-0.001417
    Step 6: arch=[[1024, 1024, 1024, 1024], [128]], score=-0.001264
    Step 7: arch=[[1024, 1024, 1024, 1024], [256]], score=-0.000989
    Step 8: arch=[[1024, 1024, 1024, 1024]], score=-0.001417
    Step 9: arch=[[1024, 1024, 1024]], score=-0.003931
    Step 10: arch=[[2048, 2048, 2048]], score=0.004381

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024], [1024, 1024]], score=-0.000907
    Step 4: arch=[[1024, 1024, 1024], [512, 512]], score=-0.002195
    Step 5: arch=[[1024, 1024, 1024, 1024], [512, 512]], score=0.000292
    Step 6: arch=[[1024, 1024, 1024, 1024], [512, 512, 512]], score=0.001024
    Step 7: arch=[[1024, 1024, 1024], [512, 512, 512]], score=-0.001462
    Step 8: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 9: arch=[[1024, 1024, 1024], [512, 512, 512]], score=-0.001462
    Step 10: arch=[[2048, 2048, 2048], [512, 512, 512]], score=0.006982

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.089973
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.002827
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.005582
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.009541
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.031203
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.063789
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.145658
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.003083

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.063789
    Step 4: arch=[[1024, 1024]], score=-0.043821
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.135991
    Step 6: arch=[[512, 512]], score=-0.100266
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000316
    Step 10: arch=[[256, 256]], score=-0.126661

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.018233
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.008143
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.012962
    Step 4: arch=[[256, 256], [512, 512]], score=-0.097412
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-0.000820
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.107966
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.002674
    Step 9: arch=[[128, 128]], score=-0.139402
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64], [64, 64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.063789
    Step 4: arch=[[1024, 1024]], score=-0.043821
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.135991
    Step 6: arch=[[512, 512]], score=-0.100266
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000316
    Step 10: arch=[[256, 256], [2048, 2048]], score=-0.027564

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.063789
    Step 4: arch=[[1024, 1024]], score=-0.043821
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.135991
    Step 6: arch=[[512, 512]], score=-0.100266
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000316
    Step 10: arch=[[512, 512, 512, 512, 512], [256, 256, 256]], score=-0.001303

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.063789
    Step 4: arch=[[1024, 1024]], score=-0.043821
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.135991
    Step 6: arch=[[512, 512]], score=-0.100266
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000316
    Step 10: arch=[[64, 64, 64]], score=-0.107966


=== Modifiers: modifiers_36 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.052854
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.021654
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.101214
    Step 5: arch=[[512, 512]], score=-0.123880
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.044406
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-0.006546
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.069490
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.045578
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128, 128]], score=0.000977
    Step 4: arch=[[1024, 1024, 1024, 1024], [64], [128, 128], [128, 128, 128, 128, 128]], score=-0.023722
    Step 5: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128, 128, 128]], score=0.020571
    Step 6: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128, 128, 128], [128]], score=0.020635
    Step 7: arch=[[1024, 1024, 1024, 1024], [128], [128, 128, 128, 128, 128], [128]], score=0.020896
    Step 8: arch=[[1024, 1024, 1024, 1024], [128], [128, 128, 128, 128, 128]], score=0.020833
    Step 9: arch=[[128], [128, 128, 128, 128, 128]], score=-0.142057
    Step 10: arch=[[128], [128, 128, 128, 128]], score=-0.144494

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024], [64], [256, 256, 256], [128, 128, 128, 128]], score=0.003810
    Step 4: arch=[[128, 128, 128], [64], [256, 256, 256], [128, 128, 128, 128]], score=-0.053697
    Step 5: arch=[[128, 128, 128], [64, 64], [256, 256, 256], [128, 128, 128, 128]], score=-0.051315
    Step 6: arch=[[128, 128], [64, 64], [256, 256, 256], [128, 128, 128, 128]], score=-0.072675
    Step 7: arch=[[128, 128], [64, 64], [256, 256, 256], [256, 256, 256, 256]], score=-0.070598
    Step 8: arch=[[128, 128], [64, 64], [256, 256, 256], [512, 512, 512, 512]], score=-0.065909
    Step 9: arch=[[128, 128], [64, 64], [256, 256, 256], [256, 256, 256, 256]], score=-0.070598
    Step 10: arch=[[128, 128], [1024], [256, 256, 256], [256, 256, 256, 256]], score=-0.024351

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.074106
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.016782
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.003200
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.019498
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.020217
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.002185
    Step 7: arch=[[128, 128, 128, 128]], score=-0.090850
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.135033
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.013268

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.090850
    Step 4: arch=[[1024, 1024]], score=-0.108525
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.007172
    Step 6: arch=[[512, 512]], score=-0.123880
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.069473
    Step 10: arch=[[256, 256]], score=-0.130514

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.008091
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.022483
    Step 4: arch=[[256, 256], [512, 512]], score=-0.104694
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.023415
    Step 7: arch=[[64, 64, 64]], score=-0.113739
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.031125
    Step 9: arch=[[128, 128]], score=-0.133570
    Step 10: arch=[[1024], [256], [2048, 2048]], score=-0.020123

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.090850
    Step 4: arch=[[1024, 1024]], score=-0.108525
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.007172
    Step 6: arch=[[512, 512]], score=-0.123880
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.069473
    Step 10: arch=[[128, 128, 128, 128], [1024], [64, 64]], score=-0.019413

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.090850
    Step 4: arch=[[1024, 1024]], score=-0.108525
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.007172
    Step 6: arch=[[512, 512]], score=-0.123880
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.069473
    Step 10: arch=[[512, 512], [512], [256, 256, 256, 256]], score=-0.019958

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024], [64], [128, 128, 128], [128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.090850
    Step 4: arch=[[1024, 1024]], score=-0.108525
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.007172
    Step 6: arch=[[512, 512]], score=-0.123880
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.069473
    Step 10: arch=[[128, 128, 128, 128, 128], [128]], score=-0.066368


=== Modifiers: modifiers_37 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.004870
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.039130
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.060900
    Step 4: arch=[[512, 512, 512]], score=-0.122066
    Step 5: arch=[[512, 512]], score=-0.127515
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.050509
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.117852
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.040591
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.036486

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 2: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.014165
    Step 4: arch=[[256, 256, 256], [512], [256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=-0.008532
    Step 5: arch=[[256, 256, 256], [512], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.039224
    Step 6: arch=[[256, 256, 256], [512], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [128]], score=0.039371
    Step 7: arch=[[256, 256, 256], [1024], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [128]], score=0.039828
    Step 8: arch=[[1024], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [128]], score=0.025323
    Step 9: arch=[[1024], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [128, 128]], score=0.032899
    Step 10: arch=[[1024], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [128, 128]], score=0.020233

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 2: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512], [256, 256], [512, 512, 512, 512], [128, 128, 128, 128, 128]], score=-0.022544
    Step 4: arch=[[256, 256, 256, 256], [512], [256, 256], [512, 512, 512, 512], [128, 128, 128, 128, 128]], score=-0.017834
    Step 5: arch=[[128, 128, 128, 128], [512], [256, 256], [512, 512, 512, 512], [128, 128, 128, 128, 128]], score=-0.019745
    Step 6: arch=[[128, 128, 128], [512], [256, 256], [512, 512, 512, 512], [128, 128, 128, 128, 128]], score=-0.024283
    Step 7: arch=[[128, 128, 128], [512], [256, 256], [256, 256, 256, 256], [128, 128, 128, 128, 128]], score=-0.031809
    Step 8: arch=[[128, 128, 128], [512], [256, 256], [256, 256, 256, 256], [256, 256, 256, 256, 256]], score=-0.028250
    Step 9: arch=[[128, 128, 128], [512], [256, 256], [256, 256, 256, 256], [128, 128, 128, 128, 128]], score=-0.031809
    Step 10: arch=[[64, 64, 64], [512], [256, 256], [256, 256, 256, 256], [128, 128, 128, 128, 128]], score=-0.032594

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.083741
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.016618
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.028259
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.025736
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.038533
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.122393
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.132029
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.017725

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.060900
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.019007
    Step 3: arch=[[128, 128, 128, 128]], score=-0.122393
    Step 4: arch=[[1024, 1024]], score=-0.120543
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.038457
    Step 6: arch=[[512, 512]], score=-0.127515
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.100802
    Step 10: arch=[[256, 256]], score=-0.130276

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.022266
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.030082
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.043351
    Step 4: arch=[[256, 256], [512, 512]], score=-0.117729
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.047019
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.127534
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.077822
    Step 9: arch=[[128, 128]], score=-0.131475
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64, 64, 64, 64], [2048, 2048], [128]], score=0.040050

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.060900
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.019007
    Step 3: arch=[[128, 128, 128, 128]], score=-0.122393
    Step 4: arch=[[1024, 1024]], score=-0.120543
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.038457
    Step 6: arch=[[512, 512]], score=-0.127515
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.100802
    Step 10: arch=[[2048, 2048, 2048], [1024], [256, 256, 256, 256], [512]], score=0.016410

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.060900
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.019007
    Step 3: arch=[[128, 128, 128, 128]], score=-0.122393
    Step 4: arch=[[1024, 1024]], score=-0.120543
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.038457
    Step 6: arch=[[512, 512]], score=-0.127515
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.100802
    Step 10: arch=[[128, 128, 128, 128], [256], [256, 256], [1024, 1024, 1024, 1024, 1024]], score=-0.017768

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256], [512], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.060900
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.019007
    Step 3: arch=[[128, 128, 128, 128]], score=-0.122393
    Step 4: arch=[[1024, 1024]], score=-0.120543
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.038457
    Step 6: arch=[[512, 512]], score=-0.127515
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.100802
    Step 10: arch=[[256, 256, 256, 256], [1024], [2048], [2048, 2048, 2048, 2048, 2048], [256, 256, 256, 256]], score=-100.000000


=== Modifiers: modifiers_38 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.052978
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.053770
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.022370
    Step 5: arch=[[512, 512]], score=-0.045601
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.086374
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.016121
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.003684
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.089119

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.003355
    Step 4: arch=[[1024, 1024], [64, 64, 64, 64, 64]], score=-0.024274
    Step 5: arch=[[64, 64, 64, 64, 64]], score=0.015438
    Step 6: arch=[[64, 64, 64, 64, 64], [128]], score=0.016485
    Step 7: arch=[[64, 64, 64, 64, 64], [256]], score=0.018579
    Step 8: arch=[[64, 64, 64, 64, 64]], score=0.015438
    Step 9: arch=[[64, 64, 64, 64]], score=-0.006337
    Step 10: arch=[[128, 128, 128, 128]], score=-0.005724

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024], [64, 64, 64]], score=-0.003355
    Step 4: arch=[[1024, 1024, 1024], [64, 64]], score=-0.006711
    Step 5: arch=[[1024, 1024, 1024, 1024], [64, 64]], score=0.020918
    Step 6: arch=[[512, 512, 512, 512], [64, 64]], score=0.004319
    Step 7: arch=[[512, 512, 512], [64, 64]], score=-0.018904
    Step 8: arch=[[512, 512, 512], [64]], score=-0.022260
    Step 9: arch=[[512, 512, 512], [128]], score=-0.021020
    Step 10: arch=[[256, 256, 256], [128]], score=-0.025020

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.027161
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.031668
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.047708
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.035829
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.003664
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.005724
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.049889
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.043476

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.005724
    Step 4: arch=[[1024, 1024]], score=-0.037933
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.032003
    Step 6: arch=[[512, 512]], score=-0.045601
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.013737
    Step 10: arch=[[256, 256]], score=-0.048328

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.021632
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.068386
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.019971
    Step 4: arch=[[256, 256], [512, 512]], score=-0.036376
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.092062
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.028113
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.013306
    Step 9: arch=[[128, 128]], score=-0.049415
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.056972

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.005724
    Step 4: arch=[[1024, 1024]], score=-0.037933
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.032003
    Step 6: arch=[[512, 512]], score=-0.045601
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.013737
    Step 10: arch=[[256, 256, 256, 256], [2048, 2048]], score=0.043837

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.005724
    Step 4: arch=[[1024, 1024]], score=-0.037933
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.032003
    Step 6: arch=[[512, 512]], score=-0.045601
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.013737
    Step 10: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.040312

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.005724
    Step 4: arch=[[1024, 1024]], score=-0.037933
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.032003
    Step 6: arch=[[512, 512]], score=-0.045601
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.013737
    Step 10: arch=[[128, 128], [64, 64]], score=-0.046041


=== Modifiers: modifiers_39 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.068621
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.111370
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.015101
    Step 5: arch=[[512, 512]], score=-0.026409
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.037083
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.009008
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.079672
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.112144

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64, 64], [512, 512]], score=0.007455
    Step 4: arch=[[64, 64, 64, 64], [512, 512]], score=-0.002856
    Step 5: arch=[[512, 512]], score=-0.026409
    Step 6: arch=[[512, 512], [128]], score=-0.024484
    Step 7: arch=[[512, 512], [256]], score=-0.020800
    Step 8: arch=[[512, 512]], score=-0.026409
    Step 9: arch=[[512]], score=-0.037718
    Step 10: arch=[[1024]], score=-0.020743

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 2: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [512]], score=0.002550
    Step 4: arch=[[128, 128, 128], [512]], score=-0.018164
    Step 5: arch=[[128, 128, 128], [512, 512]], score=-0.010718
    Step 6: arch=[[128, 128], [512, 512]], score=-0.021074
    Step 7: arch=[[128, 128], [1024, 1024]], score=-0.004079
    Step 8: arch=[[128, 128], [512, 512]], score=-0.021074
    Step 9: arch=[[256, 256], [512, 512]], score=-0.016181
    Step 10: arch=[[256, 256], [256, 256]], score=-0.023977

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.009207
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.075853
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.098504
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.087798
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.107681
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.085109
    Step 7: arch=[[128, 128, 128, 128]], score=-0.019368
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.042257
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.065492

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.019368
    Step 4: arch=[[1024, 1024]], score=-0.006404
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048868
    Step 6: arch=[[512, 512]], score=-0.026409
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.112414
    Step 9: arch=[[2048, 2048]], score=0.039663
    Step 10: arch=[[256, 256]], score=-0.035655

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055133
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.109217
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.043201
    Step 4: arch=[[256, 256], [512, 512]], score=-0.016181
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.031945
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.045495
    Step 9: arch=[[128, 128]], score=-0.040088
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048]], score=0.110328

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.019368
    Step 4: arch=[[1024, 1024]], score=-0.006404
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048868
    Step 6: arch=[[512, 512]], score=-0.026409
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.112414
    Step 9: arch=[[2048, 2048]], score=0.039663
    Step 10: arch=[[64, 64], [2048, 2048, 2048], [128, 128, 128], [256, 256, 256, 256, 256], [1024]], score=0.109914

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.019368
    Step 4: arch=[[1024, 1024]], score=-0.006404
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048868
    Step 6: arch=[[512, 512]], score=-0.026409
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.112414
    Step 9: arch=[[2048, 2048]], score=0.039663
    Step 10: arch=[[128, 128], [1024, 1024], [64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512]], score=0.108167

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64, 64, 64], [512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.019368
    Step 4: arch=[[1024, 1024]], score=-0.006404
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048868
    Step 6: arch=[[512, 512]], score=-0.026409
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.112414
    Step 9: arch=[[2048, 2048]], score=0.039663
    Step 10: arch=[[256]], score=-0.046205


=== Modifiers: modifiers_40 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.128710
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.113626
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.026133
    Step 5: arch=[[512, 512]], score=0.013067
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.114451
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.037582
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054291
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.145271

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[512]], score=0.000000
    Step 2: arch=[[512]], score=0.000000
    Step 3: arch=[[512, 512]], score=0.013067
    Step 4: arch=[[128, 128]], score=0.001817
    Step 5: arch=[[128, 128], [1024]], score=0.006560
    Step 6: arch=[[128, 128], [1024, 1024]], score=0.020197
    Step 7: arch=[[128, 128], [1024, 1024], [128]], score=0.022272
    Step 8: arch=[[128, 128], [2048, 2048], [128]], score=0.053084
    Step 9: arch=[[2048, 2048], [128]], score=0.073626
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.079063

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[512]], score=0.000000
    Step 2: arch=[[512]], score=0.000000
    Step 3: arch=[[1024]], score=0.013473
    Step 4: arch=[[2048]], score=0.040418
    Step 5: arch=[[2048, 2048]], score=0.071785
    Step 6: arch=[[64, 64, 64, 64]], score=0.023804
    Step 7: arch=[[64, 64, 64]], score=0.011940
    Step 8: arch=[[64, 64, 64, 64]], score=0.023804
    Step 9: arch=[[64, 64, 64]], score=0.011940
    Step 10: arch=[[128, 128, 128]], score=0.013739

Method: TPE
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.034553
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.100005
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.110443
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.129180
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.025661
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=0.000076
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.097607

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.025661
    Step 4: arch=[[1024, 1024]], score=0.030200
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.054087
    Step 6: arch=[[512, 512]], score=0.013067
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.071785
    Step 10: arch=[[256, 256]], score=0.005415

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.085685
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.074000
    Step 4: arch=[[256, 256], [512, 512]], score=0.015714
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.145595
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=0.011940
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.074763
    Step 9: arch=[[128, 128]], score=0.001817
    Step 10: arch=[[64, 64, 64, 64, 64], [64, 64, 64, 64], [64, 64, 64, 64, 64]], score=0.108724

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.025661
    Step 4: arch=[[1024, 1024]], score=0.030200
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.054087
    Step 6: arch=[[512, 512]], score=0.013067
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.071785
    Step 10: arch=[[2048], [2048]], score=0.088394

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.025661
    Step 4: arch=[[1024, 1024]], score=0.030200
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.054087
    Step 6: arch=[[512, 512]], score=0.013067
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.071785
    Step 10: arch=[[64], [2048, 2048, 2048, 2048]], score=0.112879

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.025661
    Step 4: arch=[[1024, 1024]], score=0.030200
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.054087
    Step 6: arch=[[512, 512]], score=0.013067
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.071785
    Step 10: arch=[[256]], score=-0.006736


=== Modifiers: modifiers_41 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.001533
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.012653
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.101601
    Step 5: arch=[[512, 512]], score=-0.126208
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.009032
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.014459
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.082848
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.071056
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.001835
    Step 4: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.001253
    Step 5: arch=[[128, 128, 128], [256, 256, 256], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000611
    Step 6: arch=[[128, 128, 128], [256, 256, 256], [512, 512, 512, 512], [64, 64, 64, 64, 64], [128]], score=0.000980
    Step 7: arch=[[128, 128, 128], [512, 512, 512], [512, 512, 512, 512], [64, 64, 64, 64, 64], [128]], score=0.001340
    Step 8: arch=[[512, 512, 512], [512, 512, 512, 512], [64, 64, 64, 64, 64], [128]], score=-0.008037
    Step 9: arch=[[512, 512, 512], [512, 512, 512, 512], [64, 64, 64, 64, 64], [128, 128]], score=0.001206
    Step 10: arch=[[512, 512, 512], [512, 512, 512], [64, 64, 64, 64, 64], [128, 128]], score=-0.010957

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [256, 256, 256], [64, 64, 64, 64, 64]], score=-0.012494
    Step 4: arch=[[128, 128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [256, 256, 256], [64, 64, 64, 64, 64]], score=0.001556
    Step 5: arch=[[64, 64, 64, 64], [256, 256, 256], [128, 128, 128, 128, 128], [256, 256, 256], [64, 64, 64, 64, 64]], score=0.001287
    Step 6: arch=[[64, 64, 64], [256, 256, 256], [128, 128, 128, 128, 128], [256, 256, 256], [64, 64, 64, 64, 64]], score=-0.016591
    Step 7: arch=[[64, 64, 64], [256, 256, 256], [128, 128, 128, 128, 128], [128, 128, 128], [64, 64, 64, 64, 64]], score=-0.022138
    Step 8: arch=[[64, 64, 64], [256, 256], [128, 128, 128, 128, 128], [128, 128, 128], [64, 64, 64, 64, 64]], score=-0.037186
    Step 9: arch=[[64, 64, 64], [256, 256], [128, 128, 128, 128, 128], [256, 256, 256], [64, 64, 64, 64, 64]], score=-0.031639
    Step 10: arch=[[64, 64, 64], [256, 256], [64, 64, 64, 64, 64], [256, 256, 256], [64, 64, 64, 64, 64]], score=-0.034118

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.103916
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.009119
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.010155
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.009139
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.006354
    Step 7: arch=[[128, 128, 128, 128]], score=-0.105468
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.154560
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.009016

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.105468
    Step 4: arch=[[1024, 1024]], score=-0.089837
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.120543
    Step 6: arch=[[512, 512]], score=-0.126208
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004394
    Step 10: arch=[[256, 256]], score=-0.142806

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.031635
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.037228
    Step 4: arch=[[256, 256], [512, 512]], score=-0.120014
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.012067
    Step 7: arch=[[64, 64, 64]], score=-0.132040
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.030291
    Step 9: arch=[[128, 128]], score=-0.150709
    Step 10: arch=[[256, 256], [512, 512]], score=-0.120014

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.105468
    Step 4: arch=[[1024, 1024]], score=-0.089837
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.120543
    Step 6: arch=[[512, 512]], score=-0.126208
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004394
    Step 10: arch=[[64], [64, 64]], score=-0.162226

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.105468
    Step 4: arch=[[1024, 1024]], score=-0.089837
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.120543
    Step 6: arch=[[512, 512]], score=-0.126208
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004394
    Step 10: arch=[[1024, 1024]], score=-0.089837

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128, 128, 128], [512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.105468
    Step 4: arch=[[1024, 1024]], score=-0.089837
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.120543
    Step 6: arch=[[512, 512]], score=-0.126208
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004394
    Step 10: arch=[[64], [64, 64]], score=-0.162226


=== Modifiers: modifiers_42 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.073973
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.131426
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.005679
    Step 5: arch=[[512, 512]], score=-0.014507
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.065941
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.134979
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.008345
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.089624
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048]], score=0.000000
    Step 2: arch=[[2048, 2048]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048]], score=0.017334
    Step 4: arch=[[512, 512, 512]], score=-0.005679
    Step 5: arch=[[512, 512, 512], [1024]], score=-0.000748
    Step 6: arch=[[512, 512, 512], [1024, 1024]], score=0.009377
    Step 7: arch=[[512, 512, 512], [1024, 1024], [128]], score=0.011051
    Step 8: arch=[[512, 512, 512], [2048, 2048], [128]], score=0.026243
    Step 9: arch=[[2048, 2048], [128]], score=0.000878
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.007804

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048]], score=0.000000
    Step 2: arch=[[2048, 2048]], score=0.000000
    Step 3: arch=[[2048]], score=-0.017334
    Step 4: arch=[[1024]], score=-0.021334
    Step 5: arch=[[1024, 1024]], score=-0.010805
    Step 6: arch=[[1024]], score=-0.021334
    Step 7: arch=[[1024, 1024]], score=-0.010805
    Step 8: arch=[[512, 512]], score=-0.014507
    Step 9: arch=[[256, 256]], score=-0.015932
    Step 10: arch=[[512, 512]], score=-0.014507

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.006285
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.047631
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.035453
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.065491
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.069377
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.119343
    Step 7: arch=[[128, 128, 128, 128]], score=0.000051
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.016815
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055189

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.000051
    Step 4: arch=[[1024, 1024]], score=-0.010805
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013368
    Step 6: arch=[[512, 512]], score=-0.014507
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000000
    Step 10: arch=[[256, 256]], score=-0.015932

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.046894
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.039917
    Step 4: arch=[[256, 256], [512, 512]], score=-0.006412
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.137011
    Step 7: arch=[[64, 64, 64]], score=-0.008547
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.029627
    Step 9: arch=[[128, 128]], score=-0.016539
    Step 10: arch=[[1024], [256], [2048, 2048]], score=0.042083

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.000051
    Step 4: arch=[[1024, 1024]], score=-0.010805
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013368
    Step 6: arch=[[512, 512]], score=-0.014507
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000000
    Step 10: arch=[[1024, 1024], [512], [64, 64, 64]], score=0.009211

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.000051
    Step 4: arch=[[1024, 1024]], score=-0.010805
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013368
    Step 6: arch=[[512, 512]], score=-0.014507
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000000
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [2048]], score=0.033858

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.000051
    Step 4: arch=[[1024, 1024]], score=-0.010805
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013368
    Step 6: arch=[[512, 512]], score=-0.014507
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000000
    Step 10: arch=[[256, 256, 256], [512, 512, 512], [512], [256, 256, 256, 256]], score=0.055540


=== Modifiers: modifiers_43 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.066591
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.000672
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.106476
    Step 5: arch=[[512, 512]], score=-0.139368
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.030862
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.051939
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.073823
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128]], score=0.000726
    Step 4: arch=[[1024, 1024, 1024, 1024], [128, 128, 128, 128]], score=-0.022044
    Step 5: arch=[[128, 128, 128, 128]], score=-0.083413
    Step 6: arch=[[128, 128, 128, 128], [128]], score=-0.082678
    Step 7: arch=[[128, 128, 128, 128], [256]], score=-0.081244
    Step 8: arch=[[128, 128, 128, 128]], score=-0.083413
    Step 9: arch=[[128, 128, 128]], score=-0.114887
    Step 10: arch=[[256, 256, 256]], score=-0.112461

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128]], score=-0.003997
    Step 4: arch=[[1024, 1024, 1024, 1024, 1024], [64, 64]], score=-0.005443
    Step 5: arch=[[1024, 1024, 1024, 1024], [64, 64]], score=-0.042833
    Step 6: arch=[[1024, 1024, 1024, 1024], [64, 64, 64]], score=-0.033289
    Step 7: arch=[[1024, 1024, 1024], [64, 64, 64]], score=-0.070679
    Step 8: arch=[[1024, 1024, 1024], [128, 128, 128]], score=-0.069043
    Step 9: arch=[[1024, 1024, 1024], [64, 64, 64]], score=-0.070679
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64]], score=-0.019478

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.109617
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.013567
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.013326
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.000316
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.037394
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.083413
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.147361
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.000223

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.001311
    Step 3: arch=[[128, 128, 128, 128]], score=-0.083413
    Step 4: arch=[[1024, 1024]], score=-0.127402
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.123776
    Step 6: arch=[[512, 512]], score=-0.139368
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.094406
    Step 10: arch=[[256, 256]], score=-0.144219

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.022851
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.002119
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.028776
    Step 4: arch=[[256, 256], [512, 512]], score=-0.126372
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.115958
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.033728
    Step 9: arch=[[128, 128]], score=-0.146361
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.001311
    Step 3: arch=[[128, 128, 128, 128]], score=-0.083413
    Step 4: arch=[[1024, 1024]], score=-0.127402
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.123776
    Step 6: arch=[[512, 512]], score=-0.139368
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.094406
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64], [256, 256, 256], [512, 512, 512, 512, 512]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.001311
    Step 3: arch=[[128, 128, 128, 128]], score=-0.083413
    Step 4: arch=[[1024, 1024]], score=-0.127402
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.123776
    Step 6: arch=[[512, 512]], score=-0.139368
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.094406
    Step 10: arch=[[64, 64, 64, 64], [64, 64, 64], [64], [256]], score=-0.062626

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.001311
    Step 3: arch=[[128, 128, 128, 128]], score=-0.083413
    Step 4: arch=[[1024, 1024]], score=-0.127402
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.123776
    Step 6: arch=[[512, 512]], score=-0.139368
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.094406
    Step 10: arch=[[128, 128, 128], [64], [64], [2048, 2048, 2048, 2048], [64]], score=-100.000000


=== Modifiers: modifiers_44 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.098195
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.094505
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.010144
    Step 5: arch=[[512, 512]], score=-0.020828
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.044612
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.066613
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.128604

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009074
    Step 4: arch=[[64, 64, 64, 64]], score=-0.010114
    Step 5: arch=[[128, 128, 128, 128]], score=-0.009074
    Step 6: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 7: arch=[[1024, 1024]], score=-0.009303
    Step 8: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[1024, 1024], [512, 512, 512]], score=0.053746
    Step 10: arch=[[1024, 1024], [512, 512, 512, 512]], score=0.077661

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009074
    Step 4: arch=[[256, 256, 256, 256]], score=-0.006512
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.002884
    Step 6: arch=[[256, 256, 256, 256]], score=-0.006512
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.002884
    Step 8: arch=[[256, 256, 256, 256]], score=-0.006512
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.002884
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.000000

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.029483
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.099717
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.078520
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.120418
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.122274
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009074
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.028100
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.111833

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009074
    Step 4: arch=[[1024, 1024]], score=-0.009303
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.046484
    Step 6: arch=[[512, 512]], score=-0.020828
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.024033
    Step 10: arch=[[256, 256]], score=-0.025305

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.102760
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.123327
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.094247
    Step 4: arch=[[256, 256], [512, 512]], score=0.010148
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.019107
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.102997
    Step 9: arch=[[128, 128]], score=-0.027222
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009074
    Step 4: arch=[[1024, 1024]], score=-0.009303
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.046484
    Step 6: arch=[[512, 512]], score=-0.020828
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.024033
    Step 10: arch=[[64, 64], [1024], [64, 64, 64, 64]], score=0.037469

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009074
    Step 4: arch=[[1024, 1024]], score=-0.009303
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.046484
    Step 6: arch=[[512, 512]], score=-0.020828
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.024033
    Step 10: arch=[[128, 128, 128, 128], [256]], score=-0.004482

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009074
    Step 4: arch=[[1024, 1024]], score=-0.009303
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.046484
    Step 6: arch=[[512, 512]], score=-0.020828
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.024033
    Step 10: arch=[[128, 128, 128, 128, 128], [256, 256]], score=0.027419


=== Modifiers: modifiers_45 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.123794
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.148744
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.012225
    Step 5: arch=[[512, 512]], score=0.009555
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.091599
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.005274
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.119270
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.148928

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[128], [256]], score=0.000000
    Step 2: arch=[[128], [256]], score=0.000000
    Step 3: arch=[[128], [256, 256]], score=0.005556
    Step 4: arch=[[128, 128], [256, 256]], score=0.007423
    Step 5: arch=[[256, 256]], score=0.002857
    Step 6: arch=[[256, 256], [128]], score=0.003654
    Step 7: arch=[[256, 256], [256]], score=0.005186
    Step 8: arch=[[256, 256]], score=0.002857
    Step 9: arch=[[256]], score=0.000828
    Step 10: arch=[[512]], score=0.006884

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[128], [256]], score=0.000000
    Step 2: arch=[[128], [256]], score=0.000000
    Step 3: arch=[[256], [256]], score=0.003163
    Step 4: arch=[[128, 128, 128], [256]], score=0.003734
    Step 5: arch=[[128, 128, 128], [256, 256]], score=0.009290
    Step 6: arch=[[128, 128], [256, 256]], score=0.007423
    Step 7: arch=[[128, 128], [512, 512]], score=0.010674
    Step 8: arch=[[128, 128], [256, 256]], score=0.007423
    Step 9: arch=[[256, 256], [256, 256]], score=0.010740
    Step 10: arch=[[256, 256], [128, 128]], score=0.009126

Method: TPE
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.039800
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.101844
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.078395
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.122029
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.149255
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.149176
    Step 7: arch=[[128, 128, 128, 128]], score=0.003406
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.001886
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.093041

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003406
    Step 4: arch=[[1024, 1024]], score=0.024231
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.104397
    Step 6: arch=[[512, 512]], score=0.009555
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.058708
    Step 10: arch=[[256, 256]], score=0.002857

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.091173
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.070077
    Step 4: arch=[[256, 256], [512, 512]], score=0.014129
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.000057
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.046121
    Step 9: arch=[[128, 128]], score=-0.000331
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=0.065894

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003406
    Step 4: arch=[[1024, 1024]], score=0.024231
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.104397
    Step 6: arch=[[512, 512]], score=0.009555
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.058708
    Step 10: arch=[[512, 512], [1024, 1024], [128, 128]], score=0.053747

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003406
    Step 4: arch=[[1024, 1024]], score=0.024231
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.104397
    Step 6: arch=[[512, 512]], score=0.009555
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.058708
    Step 10: arch=[[256], [1024, 1024, 1024]], score=0.026740

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128], [256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003406
    Step 4: arch=[[1024, 1024]], score=0.024231
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.104397
    Step 6: arch=[[512, 512]], score=0.009555
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.058708
    Step 10: arch=[[1024, 1024, 1024, 1024]], score=0.034700


=== Modifiers: modifiers_46 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.021550
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.086597
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.013219
    Step 4: arch=[[512, 512, 512]], score=-0.068371
    Step 5: arch=[[512, 512]], score=-0.074440
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.029582
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.061680
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.057111
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024, 1024]], score=0.009635
    Step 4: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024], [1024, 1024, 1024]], score=0.001046
    Step 5: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024, 1024]], score=-0.015846
    Step 6: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024, 1024], [128]], score=-0.014764
    Step 7: arch=[[256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [1024, 1024, 1024], [128]], score=0.000283
    Step 8: arch=[[256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [1024, 1024, 1024]], score=-0.000778
    Step 9: arch=[[1024, 1024, 1024, 1024, 1024], [1024, 1024, 1024]], score=-0.023733
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [1024, 1024]], score=-0.027179

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256], [512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=-0.001360
    Step 4: arch=[[256, 256, 256, 256], [512, 512, 512, 512], [1024, 1024], [512, 512]], score=-0.011882
    Step 5: arch=[[256, 256, 256, 256, 256], [512, 512, 512, 512], [1024, 1024], [512, 512]], score=-0.006509
    Step 6: arch=[[256, 256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [512, 512]], score=-0.005149
    Step 7: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [512, 512]], score=-0.010522
    Step 8: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 9: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [1024, 1024], [1024, 1024]], score=-0.005541
    Step 10: arch=[[512, 512, 512, 512], [256, 256, 256, 256, 256], [1024, 1024], [1024, 1024]], score=-0.001904

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.059779
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.035090
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.012616
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.028292
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.013657
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.066894
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.077703
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.039532

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.013219
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.049969
    Step 3: arch=[[128, 128, 128, 128]], score=-0.066894
    Step 4: arch=[[1024, 1024]], score=-0.069003
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.047254
    Step 6: arch=[[512, 512]], score=-0.074440
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.052670
    Step 10: arch=[[256, 256]], score=-0.076475

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.044746
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.000144
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.048645
    Step 4: arch=[[256, 256], [512, 512]], score=-0.070682
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.072532
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.047034
    Step 9: arch=[[128, 128]], score=-0.077322
    Step 10: arch=[[2048], [64, 64, 64, 64, 64], [2048]], score=-0.027613

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.013219
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.049969
    Step 3: arch=[[128, 128, 128, 128]], score=-0.066894
    Step 4: arch=[[1024, 1024]], score=-0.069003
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.047254
    Step 6: arch=[[512, 512]], score=-0.074440
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.052670
    Step 10: arch=[[512, 512, 512, 512], [64, 64], [64, 64], [1024], [128, 128, 128]], score=0.017292

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.013219
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.049969
    Step 3: arch=[[128, 128, 128, 128]], score=-0.066894
    Step 4: arch=[[1024, 1024]], score=-0.069003
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.047254
    Step 6: arch=[[512, 512]], score=-0.074440
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.052670
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64], [1024, 1024]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [1024, 1024], [1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.013219
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.049969
    Step 3: arch=[[128, 128, 128, 128]], score=-0.066894
    Step 4: arch=[[1024, 1024]], score=-0.069003
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.047254
    Step 6: arch=[[512, 512]], score=-0.074440
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.052670
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_47 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.081197
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.111160
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.012310
    Step 5: arch=[[512, 512]], score=-0.019310
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.049971
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.003139
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.063081
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.129010

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048]], score=0.000000
    Step 2: arch=[[2048, 2048]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512]], score=-0.019310
    Step 5: arch=[[512, 512], [1024]], score=0.016186
    Step 6: arch=[[512, 512], [1024, 1024]], score=0.029025
    Step 7: arch=[[512, 512], [1024, 1024], [128]], score=0.031234
    Step 8: arch=[[512, 512], [2048, 2048], [128]], score=0.088169
    Step 9: arch=[[2048, 2048], [128]], score=0.003042
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.009736

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048]], score=0.000000
    Step 2: arch=[[2048, 2048]], score=0.000000
    Step 3: arch=[[2048]], score=-0.012836
    Step 4: arch=[[1024]], score=-0.021819
    Step 5: arch=[[1024, 1024]], score=-0.013651
    Step 6: arch=[[1024]], score=-0.021819
    Step 7: arch=[[1024, 1024]], score=-0.013651
    Step 8: arch=[[512, 512]], score=-0.019310
    Step 9: arch=[[256, 256]], score=-0.021848
    Step 10: arch=[[512, 512]], score=-0.019310

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.010352
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.029109
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.033208
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.059988
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.097583
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009774
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.023624
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.026359

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009774
    Step 4: arch=[[1024, 1024]], score=-0.013651
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.016269
    Step 6: arch=[[512, 512]], score=-0.019310
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.132816
    Step 9: arch=[[2048, 2048]], score=0.000000
    Step 10: arch=[[256, 256]], score=-0.021848

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.019724
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.024913
    Step 4: arch=[[256, 256], [512, 512]], score=0.002147
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.017007
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.061663
    Step 9: arch=[[128, 128]], score=-0.023044
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=0.127673

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009774
    Step 4: arch=[[1024, 1024]], score=-0.013651
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.016269
    Step 6: arch=[[512, 512]], score=-0.019310
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.132816
    Step 9: arch=[[2048, 2048]], score=0.000000
    Step 10: arch=[[256, 256], [2048, 2048, 2048], [64, 64], [512, 512, 512, 512]], score=0.128966

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009774
    Step 4: arch=[[1024, 1024]], score=-0.013651
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.016269
    Step 6: arch=[[512, 512]], score=-0.019310
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.132816
    Step 9: arch=[[2048, 2048]], score=0.000000
    Step 10: arch=[[128], [1024, 1024, 1024], [128, 128], [128], [64]], score=0.035045

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009774
    Step 4: arch=[[1024, 1024]], score=-0.013651
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.016269
    Step 6: arch=[[512, 512]], score=-0.019310
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.132816
    Step 9: arch=[[2048, 2048]], score=0.000000
    Step 10: arch=[[256, 256]], score=-0.021848


=== Modifiers: modifiers_48 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.039414
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.004430
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.135919
    Step 5: arch=[[512, 512]], score=-0.143606
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.123137
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.158186
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.035987
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-0.001219

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 2: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 3: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512, 512], [64, 64]], score=0.000149
    Step 4: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024], [512, 512], [64, 64]], score=-0.001230
    Step 5: arch=[[512, 512], [2048, 2048, 2048], [512, 512], [64, 64]], score=-0.003999
    Step 6: arch=[[512, 512], [2048, 2048, 2048], [512, 512], [64, 64], [128]], score=-0.003831
    Step 7: arch=[[1024, 1024], [2048, 2048, 2048], [512, 512], [64, 64], [128]], score=-0.000943
    Step 8: arch=[[1024, 1024], [2048, 2048, 2048], [512, 512], [64, 64, 64], [128]], score=-0.000818
    Step 9: arch=[[1024, 1024], [2048, 2048, 2048, 2048], [512, 512], [64, 64, 64], [128]], score=0.001722
    Step 10: arch=[[1024, 1024], [2048, 2048, 2048, 2048], [512, 512], [128, 128, 128], [128]], score=0.001747

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 2: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 3: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [256], [64, 64]], score=-0.000117
    Step 4: arch=[[512, 512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [256], [64, 64]], score=0.000268
    Step 5: arch=[[256, 256, 256], [2048, 2048, 2048], [1024, 1024, 1024], [256], [64, 64]], score=-0.001174
    Step 6: arch=[[256, 256], [2048, 2048, 2048], [1024, 1024, 1024], [256], [64, 64]], score=-0.001494
    Step 7: arch=[[256, 256], [2048, 2048, 2048], [1024, 1024, 1024], [128], [64, 64]], score=-0.001554
    Step 8: arch=[[256, 256], [2048, 2048], [1024, 1024, 1024], [128], [64, 64]], score=-0.004140
    Step 9: arch=[[256, 256], [2048, 2048], [1024, 1024, 1024], [256], [64, 64]], score=-0.004081
    Step 10: arch=[[256, 256], [2048, 2048], [512, 512, 512], [256], [64, 64]], score=-0.006144

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.113947
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.029935
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.002838
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.029212
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.003830
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.094442
    Step 7: arch=[[128, 128, 128, 128]], score=-0.163991
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.180714
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.056475

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.000698
    Step 3: arch=[[128, 128, 128, 128]], score=-0.163991
    Step 4: arch=[[1024, 1024]], score=-0.097439
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.086463
    Step 6: arch=[[512, 512]], score=-0.143606
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.000388
    Step 9: arch=[[2048, 2048]], score=-0.006231
    Step 10: arch=[[256, 256]], score=-0.165186

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.062280
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.001083
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.076252
    Step 4: arch=[[256, 256], [512, 512]], score=-0.140395
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.175003
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.044100
    Step 9: arch=[[128, 128]], score=-0.175601
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.000698
    Step 3: arch=[[128, 128, 128, 128]], score=-0.163991
    Step 4: arch=[[1024, 1024]], score=-0.097439
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.086463
    Step 6: arch=[[512, 512]], score=-0.143606
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.000388
    Step 9: arch=[[2048, 2048]], score=-0.006231
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [256, 256, 256, 256, 256], [64], [128, 128, 128, 128], [1024, 1024]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.000698
    Step 3: arch=[[128, 128, 128, 128]], score=-0.163991
    Step 4: arch=[[1024, 1024]], score=-0.097439
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.086463
    Step 6: arch=[[512, 512]], score=-0.143606
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.000388
    Step 9: arch=[[2048, 2048]], score=-0.006231
    Step 10: arch=[[1024, 1024], [128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128, 128], [2048, 2048]], score=0.001666

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512], [2048, 2048, 2048], [1024, 1024, 1024], [512], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.000698
    Step 3: arch=[[128, 128, 128, 128]], score=-0.163991
    Step 4: arch=[[1024, 1024]], score=-0.097439
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.086463
    Step 6: arch=[[512, 512]], score=-0.143606
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.000388
    Step 9: arch=[[2048, 2048]], score=-0.006231
    Step 10: arch=[[1024], [2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024, 1024]], score=-100.000000


=== Modifiers: modifiers_49 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.035622
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.036551
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.011585
    Step 4: arch=[[512, 512, 512]], score=-0.095249
    Step 5: arch=[[512, 512]], score=-0.114800
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.021289
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.066362
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.027934
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128, 128], [256, 256, 256, 256, 256]], score=0.015304
    Step 4: arch=[[512], [1024, 1024], [128, 128, 128], [128, 128, 128], [256, 256, 256, 256, 256]], score=-0.002112
    Step 5: arch=[[512], [1024, 1024], [128, 128, 128], [256, 256, 256, 256, 256]], score=-0.017335
    Step 6: arch=[[512], [1024, 1024], [128, 128, 128], [256, 256, 256, 256, 256], [128]], score=-0.014847
    Step 7: arch=[[512], [2048, 2048], [128, 128, 128], [256, 256, 256, 256, 256], [128]], score=0.003783
    Step 8: arch=[[2048, 2048], [128, 128, 128], [256, 256, 256, 256, 256], [128]], score=0.011846
    Step 9: arch=[[2048, 2048], [128, 128, 128], [256, 256, 256, 256, 256], [128, 128]], score=0.027151
    Step 10: arch=[[2048, 2048], [128, 128], [256, 256, 256, 256, 256], [128, 128]], score=0.024007

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512], [1024, 1024], [128, 128, 128, 128], [64, 64], [256, 256, 256, 256, 256]], score=-0.000413
    Step 4: arch=[[512, 512], [1024, 1024], [128, 128, 128, 128], [64, 64], [256, 256, 256, 256, 256]], score=0.018980
    Step 5: arch=[[256, 256], [1024, 1024], [128, 128, 128, 128], [64, 64], [256, 256, 256, 256, 256]], score=0.013281
    Step 6: arch=[[256], [1024, 1024], [128, 128, 128, 128], [64, 64], [256, 256, 256, 256, 256]], score=-0.005069
    Step 7: arch=[[256], [512, 512], [128, 128, 128, 128], [64, 64], [256, 256, 256, 256, 256]], score=-0.012101
    Step 8: arch=[[256], [512, 512], [128, 128, 128, 128], [64, 64], [512, 512, 512, 512, 512]], score=0.001146
    Step 9: arch=[[256], [512, 512], [128, 128, 128, 128], [64, 64], [256, 256, 256, 256, 256]], score=-0.012101
    Step 10: arch=[[128], [512, 512], [128, 128, 128, 128], [64, 64], [256, 256, 256, 256, 256]], score=-0.014017

Method: TPE
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.085943
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.007074
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.000217
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.015239
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.014960
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.031912
    Step 7: arch=[[128, 128, 128, 128]], score=-0.084459
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.121461
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.002639

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.011585
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.028909
    Step 3: arch=[[128, 128, 128, 128]], score=-0.084459
    Step 4: arch=[[1024, 1024]], score=-0.104284
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.057739
    Step 6: arch=[[512, 512]], score=-0.114800
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.073968
    Step 10: arch=[[256, 256]], score=-0.118896

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.020736
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.033148
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.035909
    Step 4: arch=[[256, 256], [512, 512]], score=-0.110717
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.042293
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.103436
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.068250
    Step 9: arch=[[128, 128]], score=-0.120654
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.124730

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.011585
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.028909
    Step 3: arch=[[128, 128, 128, 128]], score=-0.084459
    Step 4: arch=[[1024, 1024]], score=-0.104284
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.057739
    Step 6: arch=[[512, 512]], score=-0.114800
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.073968
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [64, 64, 64, 64]], score=0.034669

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.011585
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.028909
    Step 3: arch=[[128, 128, 128, 128]], score=-0.084459
    Step 4: arch=[[1024, 1024]], score=-0.104284
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.057739
    Step 6: arch=[[512, 512]], score=-0.114800
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.073968
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [512, 512], [256, 256, 256]], score=0.020983

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512], [1024, 1024], [128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.011585
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.028909
    Step 3: arch=[[128, 128, 128, 128]], score=-0.084459
    Step 4: arch=[[1024, 1024]], score=-0.104284
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.057739
    Step 6: arch=[[512, 512]], score=-0.114800
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.073968
    Step 10: arch=[[2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048], [128, 128], [2048, 2048]], score=-100.000000


=== Modifiers: modifiers_50 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.051622
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.117852
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.007039
    Step 4: arch=[[512, 512, 512]], score=-0.036341
    Step 5: arch=[[512, 512]], score=-0.039587
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.011067
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.032973
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.079154
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048, 2048], [64, 64, 64]], score=0.006996
    Step 4: arch=[[2048, 2048, 2048], [64, 64, 64]], score=-0.002989
    Step 5: arch=[[64, 64, 64]], score=-0.038898
    Step 6: arch=[[64, 64, 64], [128]], score=-0.036538
    Step 7: arch=[[64, 64, 64], [256]], score=-0.031817
    Step 8: arch=[[64, 64, 64]], score=-0.038898
    Step 9: arch=[[64, 64]], score=-0.041698
    Step 10: arch=[[128, 128]], score=-0.041439

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048, 2048], [64]], score=-0.006996
    Step 4: arch=[[1024, 1024, 1024, 1024], [64]], score=-0.027070
    Step 5: arch=[[1024, 1024, 1024], [64]], score=-0.031662
    Step 6: arch=[[2048, 2048, 2048], [64]], score=-0.016981
    Step 7: arch=[[2048, 2048, 2048], [64, 64]], score=-0.009985
    Step 8: arch=[[2048, 2048, 2048], [128, 128]], score=-0.007116
    Step 9: arch=[[1024, 1024, 1024], [128, 128]], score=-0.021993
    Step 10: arch=[[512, 512, 512], [128, 128]], score=-0.026769

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.007974
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.002745
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.002418
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.012054
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.059003
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.035795
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.041698
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.001973

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.007039
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064237
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035795
    Step 4: arch=[[1024, 1024]], score=-0.036327
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005073
    Step 6: arch=[[512, 512]], score=-0.039587
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.027095
    Step 10: arch=[[256, 256]], score=-0.040878

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.004795
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.036539
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.000255
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015996
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.038898
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.032912
    Step 9: arch=[[128, 128]], score=-0.041439
    Step 10: arch=[[512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.046715

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.007039
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064237
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035795
    Step 4: arch=[[1024, 1024]], score=-0.036327
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005073
    Step 6: arch=[[512, 512]], score=-0.039587
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.027095
    Step 10: arch=[[256, 256, 256], [64], [64, 64], [2048, 2048]], score=0.027969

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.007039
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064237
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035795
    Step 4: arch=[[1024, 1024]], score=-0.036327
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005073
    Step 6: arch=[[512, 512]], score=-0.039587
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.027095
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64], [256, 256, 256, 256]], score=0.020557

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.007039
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064237
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035795
    Step 4: arch=[[1024, 1024]], score=-0.036327
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005073
    Step 6: arch=[[512, 512]], score=-0.039587
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.027095
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_51 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.043724
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.105796
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.007975
    Step 5: arch=[[512, 512]], score=-0.018670
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.048120
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.005361
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.068080
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.124153

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[64, 64, 64], [512, 512, 512, 512, 512], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[256, 256, 256], [512, 512, 512, 512, 512]], score=0.003001
    Step 5: arch=[[256, 256, 256], [128, 128, 128, 128, 128]], score=-0.007024
    Step 6: arch=[[256, 256, 256], [512]], score=-0.004541
    Step 7: arch=[[512, 512, 512], [512]], score=0.000484
    Step 8: arch=[[512, 512, 512], [512, 512]], score=0.002343
    Step 9: arch=[[512, 512, 512], [512, 512, 512]], score=0.004202
    Step 10: arch=[[512, 512, 512], [1024, 1024, 1024]], score=0.019109

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[64, 64, 64], [512, 512, 512, 512]], score=-0.001906
    Step 4: arch=[[64, 64, 64], [256, 256, 256, 256]], score=-0.008060
    Step 5: arch=[[64, 64, 64, 64], [256, 256, 256, 256]], score=0.001524
    Step 6: arch=[[64, 64, 64, 64], [256, 256, 256, 256, 256]], score=0.002718
    Step 7: arch=[[64, 64, 64], [256, 256, 256, 256, 256]], score=-0.006866
    Step 8: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 9: arch=[[64, 64, 64], [256, 256, 256, 256, 256]], score=-0.006866
    Step 10: arch=[[128, 128, 128], [256, 256, 256, 256, 256]], score=-0.006026

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.006126
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.060633
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.046565
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.071046
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.075943
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.089149
    Step 7: arch=[[128, 128, 128, 128]], score=-0.004276
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.024242
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.058593

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004276
    Step 4: arch=[[1024, 1024]], score=-0.010190
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.049893
    Step 6: arch=[[512, 512]], score=-0.018670
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.123922
    Step 9: arch=[[2048, 2048]], score=0.013522
    Step 10: arch=[[256, 256]], score=-0.022065

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.048955
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.036186
    Step 4: arch=[[256, 256], [512, 512]], score=-0.012490
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.014658
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.023672
    Step 9: arch=[[128, 128]], score=-0.023552
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=0.068841

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004276
    Step 4: arch=[[1024, 1024]], score=-0.010190
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.049893
    Step 6: arch=[[512, 512]], score=-0.018670
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.123922
    Step 9: arch=[[2048, 2048]], score=0.013522
    Step 10: arch=[[256, 256, 256], [512, 512, 512, 512, 512], [64, 64, 64], [512, 512, 512, 512]], score=0.073268

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004276
    Step 4: arch=[[1024, 1024]], score=-0.010190
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.049893
    Step 6: arch=[[512, 512]], score=-0.018670
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.123922
    Step 9: arch=[[2048, 2048]], score=0.013522
    Step 10: arch=[[128], [1024, 1024, 1024], [128, 128, 128, 128], [128, 128, 128, 128], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004276
    Step 4: arch=[[1024, 1024]], score=-0.010190
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.049893
    Step 6: arch=[[512, 512]], score=-0.018670
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.123922
    Step 9: arch=[[2048, 2048]], score=0.013522
    Step 10: arch=[[64]], score=-0.033827


=== Modifiers: modifiers_52 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.000963
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.112017
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.157197
    Step 5: arch=[[512, 512]], score=-0.160838
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.068907
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.171894
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.074499
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 2: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 3: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512, 512]], score=0.000827
    Step 4: arch=[[512, 512], [1024, 1024, 1024], [2048, 2048], [512, 512, 512, 512]], score=-100.000000
    Step 5: arch=[[512, 512], [1024, 1024, 1024], [512, 512, 512, 512]], score=-0.006588
    Step 6: arch=[[512, 512], [1024, 1024, 1024], [512, 512, 512, 512], [128]], score=-0.003915
    Step 7: arch=[[512, 512], [2048, 2048, 2048], [512, 512, 512, 512], [128]], score=-100.000000
    Step 8: arch=[[512, 512], [1024, 1024, 1024], [512, 512, 512, 512]], score=-0.006588
    Step 9: arch=[[1024, 1024, 1024], [512, 512, 512, 512]], score=-0.012375
    Step 10: arch=[[1024, 1024, 1024], [512, 512, 512]], score=-0.038936

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 2: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 3: arch=[[512, 512], [1024, 1024], [2048], [512, 512, 512]], score=-0.001819
    Step 4: arch=[[512, 512], [1024, 1024], [2048], [256, 256, 256]], score=-0.002623
    Step 5: arch=[[512, 512, 512], [1024, 1024], [2048], [256, 256, 256]], score=-0.002431
    Step 6: arch=[[512, 512, 512], [1024, 1024, 1024], [2048], [256, 256, 256]], score=-0.000612
    Step 7: arch=[[512, 512], [1024, 1024, 1024], [2048], [256, 256, 256]], score=-0.000804
    Step 8: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 9: arch=[[512, 512], [512, 512, 512], [2048], [512, 512, 512]], score=-0.007393
    Step 10: arch=[[1024, 1024], [512, 512, 512], [2048], [512, 512, 512]], score=-0.001647

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.110304
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.077574
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.035835
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.084605
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.021625
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.173732
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.179961
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.087624

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.000750
    Step 3: arch=[[128, 128, 128, 128]], score=-0.173732
    Step 4: arch=[[1024, 1024]], score=-0.135384
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.102120
    Step 6: arch=[[512, 512]], score=-0.160838
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.072955
    Step 10: arch=[[256, 256]], score=-0.172125

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.089461
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.000089
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.079185
    Step 4: arch=[[256, 256], [512, 512]], score=-0.116345
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.178213
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.002101
    Step 9: arch=[[128, 128]], score=-0.177409
    Step 10: arch=[[512, 512, 512, 512]], score=-0.153556

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.000750
    Step 3: arch=[[128, 128, 128, 128]], score=-0.173732
    Step 4: arch=[[1024, 1024]], score=-0.135384
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.102120
    Step 6: arch=[[512, 512]], score=-0.160838
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.072955
    Step 10: arch=[[1024, 1024, 1024], [256], [64, 64], [1024, 1024, 1024, 1024], [128]], score=-0.009863

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.000750
    Step 3: arch=[[128, 128, 128, 128]], score=-0.173732
    Step 4: arch=[[1024, 1024]], score=-0.135384
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.102120
    Step 6: arch=[[512, 512]], score=-0.160838
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.072955
    Step 10: arch=[[512], [2048, 2048, 2048, 2048, 2048], [512, 512], [64, 64]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512], [1024, 1024, 1024], [2048], [512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.000750
    Step 3: arch=[[128, 128, 128, 128]], score=-0.173732
    Step 4: arch=[[1024, 1024]], score=-0.135384
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.102120
    Step 6: arch=[[512, 512]], score=-0.160838
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.072955
    Step 10: arch=[[256, 256, 256, 256]], score=-0.167727


=== Modifiers: modifiers_53 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.119941
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.058838
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.028830
    Step 4: arch=[[512, 512, 512]], score=-0.026347
    Step 5: arch=[[512, 512]], score=-0.029728
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.098019
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.028037
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.063552
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.120625

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 2: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 3: arch=[[512, 512], [64, 64, 64], [64, 64]], score=0.014839
    Step 4: arch=[[256, 256], [64, 64, 64], [64, 64]], score=0.010230
    Step 5: arch=[[256, 256], [64, 64, 64], [64, 64, 64]], score=0.025071
    Step 6: arch=[[256, 256], [128, 128, 128], [64, 64, 64]], score=0.026659
    Step 7: arch=[[128, 128, 128], [64, 64, 64]], score=-0.003986
    Step 8: arch=[[128, 128, 128], [64, 64, 64, 64]], score=0.010853
    Step 9: arch=[[128, 128, 128], [64, 64, 64]], score=-0.003986
    Step 10: arch=[[128, 128], [64, 64, 64]], score=-0.006804

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 2: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 3: arch=[[512, 512], [64], [64, 64]], score=-0.014839
    Step 4: arch=[[512, 512], [128], [64, 64]], score=-0.013246
    Step 5: arch=[[128, 128, 128], [128], [64, 64]], score=-0.017346
    Step 6: arch=[[128, 128, 128], [128, 128], [64, 64]], score=-0.002471
    Step 7: arch=[[128, 128, 128], [64, 64], [64, 64]], score=-0.003985
    Step 8: arch=[[256, 256, 256], [64, 64], [64, 64]], score=-0.001680
    Step 9: arch=[[128, 128, 128], [64, 64], [64, 64]], score=-0.003985
    Step 10: arch=[[128, 128, 128], [64], [64, 64]], score=-0.018825

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.009393
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.059108
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.026361
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.079800
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.108772
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.122781
    Step 7: arch=[[128, 128, 128, 128]], score=-0.030855
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.037552
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.061784

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028830
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.117242
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030855
    Step 4: arch=[[1024, 1024]], score=-0.019662
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.043376
    Step 6: arch=[[512, 512]], score=-0.029728
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.004068
    Step 10: arch=[[256, 256]], score=-0.034312

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.058966
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.091311
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.049119
    Step 4: arch=[[256, 256], [512, 512]], score=-0.008159
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.034763
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.050542
    Step 9: arch=[[128, 128]], score=-0.036491
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028830
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.117242
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030855
    Step 4: arch=[[1024, 1024]], score=-0.019662
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.043376
    Step 6: arch=[[512, 512]], score=-0.029728
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.004068
    Step 10: arch=[[2048, 2048, 2048], [64], [128, 128], [512], [128, 128, 128, 128, 128]], score=0.088412

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028830
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.117242
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030855
    Step 4: arch=[[1024, 1024]], score=-0.019662
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.043376
    Step 6: arch=[[512, 512]], score=-0.029728
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.004068
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512, 512, 512], [256, 256, 256, 256]], score=0.121377

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512], [64, 64], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028830
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.117242
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030855
    Step 4: arch=[[1024, 1024]], score=-0.019662
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.043376
    Step 6: arch=[[512, 512]], score=-0.029728
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.004068
    Step 10: arch=[[64, 64, 64, 64, 64], [1024, 1024, 1024, 1024, 1024], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [2048]], score=-100.000000


=== Modifiers: modifiers_54 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.109042
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.064090
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.036835
    Step 5: arch=[[512, 512]], score=-0.042274
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.067572
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.029974
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.029473
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.113056

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [256], [64], [256, 256], [512, 512, 512, 512]], score=0.006608
    Step 4: arch=[[128, 128, 128, 128, 128], [256], [64, 64], [256, 256], [512, 512, 512, 512]], score=0.015645
    Step 5: arch=[[128, 128, 128, 128, 128], [256], [256, 256], [512, 512, 512, 512]], score=0.032057
    Step 6: arch=[[128, 128, 128, 128, 128], [256], [256, 256], [512, 512, 512, 512], [128]], score=0.032806
    Step 7: arch=[[128, 128, 128, 128, 128], [512], [256, 256], [512, 512, 512, 512], [128]], score=0.038322
    Step 8: arch=[[512], [256, 256], [512, 512, 512, 512], [128]], score=0.019925
    Step 9: arch=[[512], [256, 256], [512, 512, 512, 512], [128, 128]], score=0.026074
    Step 10: arch=[[512], [256], [512, 512, 512, 512], [128, 128]], score=0.006857

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [256], [64], [128], [512, 512, 512, 512]], score=-0.006144
    Step 4: arch=[[128, 128, 128, 128], [256], [64], [128], [512, 512, 512, 512]], score=-0.011299
    Step 5: arch=[[64, 64, 64, 64], [256], [64], [128], [512, 512, 512, 512]], score=-0.011915
    Step 6: arch=[[64, 64, 64], [256], [64], [128], [512, 512, 512, 512]], score=-0.017056
    Step 7: arch=[[64, 64, 64], [256], [64], [64], [512, 512, 512, 512]], score=-0.020128
    Step 8: arch=[[64, 64, 64], [256], [64], [64], [1024, 1024, 1024, 1024]], score=-0.015294
    Step 9: arch=[[64, 64, 64], [256], [64], [64], [512, 512, 512, 512]], score=-0.020128
    Step 10: arch=[[64, 64, 64], [128], [64], [64], [512, 512, 512, 512]], score=-0.022443

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.002575
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.042402
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.009511
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.072633
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.108854
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.035129
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.045935
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.054618

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035129
    Step 4: arch=[[1024, 1024]], score=-0.037523
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005373
    Step 6: arch=[[512, 512]], score=-0.042274
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.117485
    Step 9: arch=[[2048, 2048]], score=-0.026209
    Step 10: arch=[[256, 256]], score=-0.044423

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.049462
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.071592
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.045219
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015342
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.040794
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.059065
    Step 9: arch=[[128, 128]], score=-0.045440
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [2048, 2048, 2048, 2048], [2048], [64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035129
    Step 4: arch=[[1024, 1024]], score=-0.037523
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005373
    Step 6: arch=[[512, 512]], score=-0.042274
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.117485
    Step 9: arch=[[2048, 2048]], score=-0.026209
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048, 2048], [64, 64], [1024, 1024, 1024, 1024, 1024]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035129
    Step 4: arch=[[1024, 1024]], score=-0.037523
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005373
    Step 6: arch=[[512, 512]], score=-0.042274
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.117485
    Step 9: arch=[[2048, 2048]], score=-0.026209
    Step 10: arch=[[256]], score=-0.049635

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [256], [64], [256], [512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035129
    Step 4: arch=[[1024, 1024]], score=-0.037523
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005373
    Step 6: arch=[[512, 512]], score=-0.042274
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.117485
    Step 9: arch=[[2048, 2048]], score=-0.026209
    Step 10: arch=[[128], [2048]], score=-0.014466


=== Modifiers: modifiers_55 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.058516
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.001171
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.140015
    Step 5: arch=[[512, 512]], score=-0.158325
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.057493
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.115344
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.046078
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 2: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 3: arch=[[64, 64, 64], [256, 256, 256, 256, 256], [2048, 2048, 2048]], score=0.000475
    Step 4: arch=[[64, 64, 64], [512, 512, 512, 512, 512], [2048, 2048, 2048]], score=0.001468
    Step 5: arch=[[512, 512, 512, 512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 6: arch=[[256, 256, 256], [512, 512, 512, 512, 512], [2048, 2048, 2048]], score=0.001856
    Step 7: arch=[[256, 256, 256], [512, 512, 512, 512, 512], [2048, 2048]], score=-0.004817
    Step 8: arch=[[256, 256, 256, 256], [512, 512, 512, 512, 512], [2048, 2048]], score=-0.003409
    Step 9: arch=[[256, 256, 256, 256], [1024], [2048, 2048]], score=-0.003583
    Step 10: arch=[[256, 256, 256, 256], [1024]], score=-0.105832

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 2: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 3: arch=[[64, 64, 64], [256, 256, 256], [2048, 2048, 2048]], score=-0.000475
    Step 4: arch=[[64, 64, 64], [512, 512, 512], [2048, 2048, 2048]], score=0.000436
    Step 5: arch=[[128, 128, 128], [512, 512, 512], [2048, 2048, 2048]], score=0.000560
    Step 6: arch=[[128, 128, 128], [512, 512, 512], [1024, 1024, 1024]], score=-0.019447
    Step 7: arch=[[128, 128], [512, 512, 512], [1024, 1024, 1024]], score=-0.036649
    Step 8: arch=[[64, 64], [512, 512, 512], [1024, 1024, 1024]], score=-0.038146
    Step 9: arch=[[64, 64], [512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.005128
    Step 10: arch=[[128, 128], [512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.005007

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.110603
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.006033
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.062395
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.003362
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.001605
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.005266
    Step 7: arch=[[128, 128, 128, 128]], score=-0.132550
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.168272
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.005819

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.010067
    Step 3: arch=[[128, 128, 128, 128]], score=-0.132550
    Step 4: arch=[[1024, 1024]], score=-0.144751
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.033163
    Step 6: arch=[[512, 512]], score=-0.158325
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.110550
    Step 10: arch=[[256, 256]], score=-0.164229

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.019710
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.005408
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.045997
    Step 4: arch=[[256, 256], [512, 512]], score=-0.146656
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.151122
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.088375
    Step 9: arch=[[128, 128]], score=-0.166961
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.010067
    Step 3: arch=[[128, 128, 128, 128]], score=-0.132550
    Step 4: arch=[[1024, 1024]], score=-0.144751
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.033163
    Step 6: arch=[[512, 512]], score=-0.158325
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.110550
    Step 10: arch=[[2048], [512, 512], [64, 64, 64], [128, 128], [128, 128]], score=-0.033742

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.010067
    Step 3: arch=[[128, 128, 128, 128]], score=-0.132550
    Step 4: arch=[[1024, 1024]], score=-0.144751
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.033163
    Step 6: arch=[[512, 512]], score=-0.158325
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.110550
    Step 10: arch=[[128, 128, 128], [1024], [2048, 2048], [256]], score=-0.004604

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.010067
    Step 3: arch=[[128, 128, 128, 128]], score=-0.132550
    Step 4: arch=[[1024, 1024]], score=-0.144751
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.033163
    Step 6: arch=[[512, 512]], score=-0.158325
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.110550
    Step 10: arch=[[512, 512], [64], [256]], score=-0.155835


=== Modifiers: modifiers_56 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.001884
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.030995
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.161164
    Step 5: arch=[[512, 512]], score=-0.169365
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.033826
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.011672
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.148668
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.096514
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048, 2048]], score=0.004052
    Step 4: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256], [2048, 2048, 2048]], score=0.003478
    Step 5: arch=[[128, 128, 128, 128], [128, 128], [2048, 2048, 2048]], score=-0.013234
    Step 6: arch=[[128, 128, 128, 128], [128, 128], [2048, 2048, 2048], [128]], score=-0.009342
    Step 7: arch=[[128, 128, 128, 128], [256, 256], [2048, 2048, 2048], [128]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128], [128, 128], [2048, 2048, 2048]], score=-0.013234
    Step 9: arch=[[128, 128], [2048, 2048, 2048]], score=-0.045077
    Step 10: arch=[[128, 128], [2048, 2048]], score=-0.087822

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128], [128], [256, 256, 256, 256, 256], [2048, 2048]], score=-0.000695
    Step 4: arch=[[128, 128, 128, 128], [128], [256, 256, 256, 256, 256], [1024, 1024]], score=-0.045403
    Step 5: arch=[[128, 128, 128, 128, 128], [128], [256, 256, 256, 256, 256], [1024, 1024]], score=-0.037507
    Step 6: arch=[[128, 128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [1024, 1024]], score=-0.029498
    Step 7: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [1024, 1024]], score=-0.037394
    Step 8: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 9: arch=[[128, 128, 128, 128], [64, 64], [256, 256, 256, 256, 256], [2048, 2048]], score=-0.000140
    Step 10: arch=[[256, 256, 256, 256], [64, 64], [256, 256, 256, 256, 256], [2048, 2048]], score=-0.000046

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.136608
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.104083
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.106653
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.086025
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.048919
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.002824
    Step 7: arch=[[128, 128, 128, 128]], score=-0.156564
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.172820
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.103473

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.156564
    Step 4: arch=[[1024, 1024]], score=-0.164808
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.130962
    Step 6: arch=[[512, 512]], score=-0.169365
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.153748
    Step 10: arch=[[256, 256]], score=-0.171400

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.111370
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.111958
    Step 4: arch=[[256, 256], [512, 512]], score=-0.151400
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.008800
    Step 7: arch=[[64, 64, 64]], score=-0.164939
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.089033
    Step 9: arch=[[128, 128]], score=-0.172357
    Step 10: arch=[[1024], [256], [2048, 2048]], score=-0.063124

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.156564
    Step 4: arch=[[1024, 1024]], score=-0.164808
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.130962
    Step 6: arch=[[512, 512]], score=-0.169365
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.153748
    Step 10: arch=[[64, 64], [256, 256], [256, 256, 256, 256, 256], [256, 256, 256]], score=-0.060403

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.156564
    Step 4: arch=[[1024, 1024]], score=-0.164808
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.130962
    Step 6: arch=[[512, 512]], score=-0.169365
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.153748
    Step 10: arch=[[128, 128, 128, 128, 128]], score=-0.148668

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256, 256], [2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.156564
    Step 4: arch=[[1024, 1024]], score=-0.164808
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.130962
    Step 6: arch=[[512, 512]], score=-0.169365
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.153748
    Step 10: arch=[[64, 64], [256, 256]], score=-0.160462


=== Modifiers: modifiers_57 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.120162
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.134260
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.008269
    Step 5: arch=[[512, 512]], score=-0.013047
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.072054
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.004696
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.048213
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.143357

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256], [64, 64, 64, 64, 64]], score=0.002399
    Step 4: arch=[[256, 256, 256], [64, 64, 64, 64, 64]], score=-0.001627
    Step 5: arch=[[64, 64, 64, 64, 64]], score=-0.005256
    Step 6: arch=[[64, 64, 64, 64, 64], [128]], score=-0.002470
    Step 7: arch=[[64, 64, 64, 64, 64], [256]], score=0.003102
    Step 8: arch=[[64, 64, 64, 64, 64]], score=-0.005256
    Step 9: arch=[[64, 64, 64, 64]], score=-0.009048
    Step 10: arch=[[128, 128, 128, 128]], score=-0.008535

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256], [64, 64, 64]], score=-0.002399
    Step 4: arch=[[256, 256, 256, 256], [64, 64]], score=-0.004797
    Step 5: arch=[[256, 256, 256, 256, 256], [64, 64]], score=-0.000772
    Step 6: arch=[[128, 128, 128, 128, 128], [64, 64]], score=-0.002286
    Step 7: arch=[[128, 128, 128, 128], [64, 64]], score=-0.006125
    Step 8: arch=[[128, 128, 128, 128], [64]], score=-0.008524
    Step 9: arch=[[128, 128, 128, 128], [128]], score=-0.005686
    Step 10: arch=[[64, 64, 64, 64], [128]], score=-0.006262

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.036435
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.072120
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.067864
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.090425
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.135366
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.008535
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.016632
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.056291

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.008535
    Step 4: arch=[[1024, 1024]], score=-0.007076
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.094764
    Step 6: arch=[[512, 512]], score=-0.013047
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.147415
    Step 9: arch=[[2048, 2048]], score=0.010866
    Step 10: arch=[[256, 256]], score=-0.015283

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.052452
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.104003
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.045858
    Step 4: arch=[[256, 256], [512, 512]], score=0.010121
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.012840
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.074062
    Step 9: arch=[[128, 128]], score=-0.016214
    Step 10: arch=[[2048], [2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.008535
    Step 4: arch=[[1024, 1024]], score=-0.007076
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.094764
    Step 6: arch=[[512, 512]], score=-0.013047
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.147415
    Step 9: arch=[[2048, 2048]], score=0.010866
    Step 10: arch=[[64, 64, 64, 64, 64], [1024, 1024, 1024, 1024], [128, 128, 128, 128], [64, 64, 64], [64]], score=0.136315

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.008535
    Step 4: arch=[[1024, 1024]], score=-0.007076
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.094764
    Step 6: arch=[[512, 512]], score=-0.013047
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.147415
    Step 9: arch=[[2048, 2048]], score=0.010866
    Step 10: arch=[[64], [2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256]], score=0.142441

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.008535
    Step 4: arch=[[1024, 1024]], score=-0.007076
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.094764
    Step 6: arch=[[512, 512]], score=-0.013047
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.147415
    Step 9: arch=[[2048, 2048]], score=0.010866
    Step 10: arch=[[64]], score=-0.020424


=== Modifiers: modifiers_58 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.007972
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.041677
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.094745
    Step 5: arch=[[512, 512]], score=-0.104399
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.048749
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.093626
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.053925
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[128, 128], [64, 64], [512, 512, 512, 512, 512]], score=0.004493
    Step 4: arch=[[64, 64], [64, 64], [512, 512, 512, 512, 512]], score=0.001859
    Step 5: arch=[[64, 64], [512, 512, 512, 512, 512]], score=-0.093390
    Step 6: arch=[[64, 64, 64], [512, 512, 512, 512, 512]], score=-0.084429
    Step 7: arch=[[64, 64, 64], [512, 512, 512, 512, 512], [512, 512, 512]], score=-0.011536
    Step 8: arch=[[64, 64, 64], [512, 512, 512, 512, 512], [512, 512, 512, 512]], score=0.013346
    Step 9: arch=[[64, 64, 64, 64], [512, 512, 512, 512, 512], [512, 512, 512, 512]], score=0.022307
    Step 10: arch=[[64, 64, 64, 64], [512, 512, 512, 512, 512], [128, 128, 128, 128]], score=-0.004494

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[128, 128], [128], [512, 512, 512, 512, 512]], score=0.001398
    Step 4: arch=[[128, 128], [128], [256, 256, 256, 256, 256]], score=-0.018420
    Step 5: arch=[[128, 128], [128], [256, 256, 256, 256]], score=-0.041452
    Step 6: arch=[[128, 128], [128], [128, 128, 128, 128]], score=-0.048912
    Step 7: arch=[[128], [128], [128, 128, 128, 128]], score=-0.057906
    Step 8: arch=[[64], [128], [128, 128, 128, 128]], score=-0.060534
    Step 9: arch=[[64], [128], [128, 128, 128, 128, 128]], score=-0.037994
    Step 10: arch=[[128], [128], [128, 128, 128, 128, 128]], score=-0.035365

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.068708
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.006495
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.032696
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.028768
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.042648
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.014835
    Step 7: arch=[[128, 128, 128, 128]], score=-0.102620
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.123234
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.009578

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.038415
    Step 3: arch=[[128, 128, 128, 128]], score=-0.102620
    Step 4: arch=[[1024, 1024]], score=-0.081556
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.019630
    Step 6: arch=[[512, 512]], score=-0.104399
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.031658
    Step 10: arch=[[256, 256]], score=-0.115294

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.018572
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.042036
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.036912
    Step 4: arch=[[256, 256], [512, 512]], score=-0.101844
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.114273
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.049691
    Step 9: arch=[[128, 128]], score=-0.120609
    Step 10: arch=[[2048], [64, 64, 64, 64, 64], [2048]], score=0.040344

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.038415
    Step 3: arch=[[128, 128, 128, 128]], score=-0.102620
    Step 4: arch=[[1024, 1024]], score=-0.081556
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.019630
    Step 6: arch=[[512, 512]], score=-0.104399
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.031658
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [1024], [128, 128, 128, 128], [64, 64], [128, 128]], score=0.040001

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.038415
    Step 3: arch=[[128, 128, 128, 128]], score=-0.102620
    Step 4: arch=[[1024, 1024]], score=-0.081556
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.019630
    Step 6: arch=[[512, 512]], score=-0.104399
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.031658
    Step 10: arch=[[64, 64, 64, 64], [256, 256], [256, 256, 256, 256, 256], [64]], score=0.004085

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128], [64], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.038415
    Step 3: arch=[[128, 128, 128, 128]], score=-0.102620
    Step 4: arch=[[1024, 1024]], score=-0.081556
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.019630
    Step 6: arch=[[512, 512]], score=-0.104399
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.031658
    Step 10: arch=[[128, 128], [128, 128], [512]], score=-0.094032


=== Modifiers: modifiers_59 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.039894
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.048614
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.083868
    Step 4: arch=[[512, 512, 512]], score=-0.111456
    Step 5: arch=[[512, 512]], score=-0.117073
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.039663
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.102874
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.009035
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.063262

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048, 2048], [64, 64], [64, 64, 64, 64, 64]], score=0.022590
    Step 4: arch=[[1024, 1024, 1024, 1024], [64, 64], [64, 64, 64, 64, 64]], score=0.005676
    Step 5: arch=[[1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=-0.010375
    Step 6: arch=[[1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=-0.003629
    Step 7: arch=[[1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512]], score=0.047019
    Step 8: arch=[[1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [512, 512, 512, 512]], score=0.048865
    Step 9: arch=[[1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [128, 128, 128, 128]], score=0.047291
    Step 10: arch=[[1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [128, 128, 128, 128]], score=0.046718

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048, 2048], [128], [64, 64, 64, 64, 64]], score=0.003617
    Step 4: arch=[[2048, 2048, 2048, 2048], [128], [128, 128, 128, 128, 128]], score=0.006522
    Step 5: arch=[[2048, 2048, 2048, 2048], [128, 128], [128, 128, 128, 128, 128]], score=0.029209
    Step 6: arch=[[2048, 2048, 2048], [128, 128], [128, 128, 128, 128, 128]], score=0.017982
    Step 7: arch=[[2048, 2048, 2048], [128, 128, 128], [128, 128, 128, 128, 128]], score=0.040670
    Step 8: arch=[[2048, 2048, 2048], [64, 64, 64], [128, 128, 128, 128, 128]], score=0.036777
    Step 9: arch=[[2048, 2048, 2048], [64, 64, 64], [256, 256, 256, 256, 256]], score=0.042811
    Step 10: arch=[[1024], [64, 64, 64], [256, 256, 256, 256, 256]], score=0.016934

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.043840
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.021111
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.054343
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.047572
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.051625
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.108134
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.118877
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.030623

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.083868
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.033810
    Step 3: arch=[[128, 128, 128, 128]], score=-0.108134
    Step 4: arch=[[1024, 1024]], score=-0.114300
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002821
    Step 6: arch=[[512, 512]], score=-0.117073
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.066881
    Step 9: arch=[[2048, 2048]], score=-0.106479
    Step 10: arch=[[256, 256]], score=-0.118175

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.025363
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.042010
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.014170
    Step 4: arch=[[256, 256], [512, 512]], score=-0.074337
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.113635
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.028435
    Step 9: arch=[[128, 128]], score=-0.118655
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64, 64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.083868
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.033810
    Step 3: arch=[[128, 128, 128, 128]], score=-0.108134
    Step 4: arch=[[1024, 1024]], score=-0.114300
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002821
    Step 6: arch=[[512, 512]], score=-0.117073
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.066881
    Step 9: arch=[[2048, 2048]], score=-0.106479
    Step 10: arch=[[512, 512, 512], [1024, 1024, 1024], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024], [1024, 1024, 1024]], score=0.056265

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.083868
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.033810
    Step 3: arch=[[128, 128, 128, 128]], score=-0.108134
    Step 4: arch=[[1024, 1024]], score=-0.114300
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002821
    Step 6: arch=[[512, 512]], score=-0.117073
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.066881
    Step 9: arch=[[2048, 2048]], score=-0.106479
    Step 10: arch=[[256, 256, 256], [512, 512, 512, 512], [64, 64, 64, 64, 64], [1024, 1024], [64]], score=0.048634

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.083868
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.033810
    Step 3: arch=[[128, 128, 128, 128]], score=-0.108134
    Step 4: arch=[[1024, 1024]], score=-0.114300
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002821
    Step 6: arch=[[512, 512]], score=-0.117073
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.066881
    Step 9: arch=[[2048, 2048]], score=-0.106479
    Step 10: arch=[[1024, 1024], [1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=0.053947


=== Modifiers: modifiers_60 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.080555
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.112953
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.013854
    Step 5: arch=[[512, 512]], score=-0.005764
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.074130
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.028444
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.071437
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.094519

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512], [256, 256, 256, 256, 256]], score=0.008041
    Step 4: arch=[[512, 512], [256, 256, 256, 256, 256]], score=0.027624
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.036029
    Step 6: arch=[[256, 256, 256, 256, 256], [128]], score=0.036330
    Step 7: arch=[[256, 256, 256, 256, 256], [256]], score=0.036851
    Step 8: arch=[[256, 256, 256, 256, 256]], score=0.036029
    Step 9: arch=[[256, 256, 256, 256]], score=0.017358
    Step 10: arch=[[512, 512, 512, 512]], score=0.033471

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512], [256, 256, 256]], score=-0.008041
    Step 4: arch=[[512], [128, 128, 128]], score=-0.009067
    Step 5: arch=[[512, 512], [128, 128, 128]], score=0.010534
    Step 6: arch=[[512, 512], [128, 128, 128, 128]], score=0.018445
    Step 7: arch=[[512], [128, 128, 128, 128]], score=-0.001156
    Step 8: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 9: arch=[[512], [128, 128, 128, 128]], score=-0.001156
    Step 10: arch=[[1024], [128, 128, 128, 128]], score=0.025734

Method: TPE
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.002183
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.073067
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.113409
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.068678
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.072210
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.010010
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.030237
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.069876

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.010010
    Step 4: arch=[[1024, 1024]], score=0.024568
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018497
    Step 6: arch=[[512, 512]], score=-0.005764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.092791
    Step 10: arch=[[256, 256]], score=-0.019985

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.051442
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.115830
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.047369
    Step 4: arch=[[256, 256], [512, 512]], score=-0.009496
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.011862
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.051250
    Step 9: arch=[[128, 128]], score=-0.026859
    Step 10: arch=[[2048], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.010010
    Step 4: arch=[[1024, 1024]], score=0.024568
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018497
    Step 6: arch=[[512, 512]], score=-0.005764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.092791
    Step 10: arch=[[256, 256, 256, 256], [64, 64]], score=0.025277

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.010010
    Step 4: arch=[[1024, 1024]], score=0.024568
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018497
    Step 6: arch=[[512, 512]], score=-0.005764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.092791
    Step 10: arch=[[1024], [1024, 1024, 1024]], score=0.031147

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.010010
    Step 4: arch=[[1024, 1024]], score=0.024568
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018497
    Step 6: arch=[[512, 512]], score=-0.005764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.092791
    Step 10: arch=[[128, 128, 128], [512, 512]], score=0.001654


=== Modifiers: modifiers_61 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.019470
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.060707
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.189398
    Step 5: arch=[[512, 512]], score=-0.190622
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.075584
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.190809
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.083375
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048, 2048], [64, 64, 64, 64, 64]], score=-100.000000
    Step 4: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=-0.002347
    Step 5: arch=[[2048, 2048], [256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=-0.079135
    Step 6: arch=[[2048, 2048], [256, 256, 256, 256], [2048], [64, 64, 64, 64, 64], [128]], score=-0.078236
    Step 7: arch=[[2048, 2048], [512, 512, 512, 512], [2048], [64, 64, 64, 64, 64], [128]], score=-0.066874
    Step 8: arch=[[512, 512, 512, 512], [2048], [64, 64, 64, 64, 64], [128]], score=-0.054992
    Step 9: arch=[[512, 512, 512, 512], [2048], [64, 64, 64, 64, 64], [128, 128]], score=-0.051463
    Step 10: arch=[[512, 512, 512, 512], [2048, 2048], [64, 64, 64, 64, 64], [128, 128]], score=-0.016201

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [1024], [64, 64, 64, 64, 64]], score=-0.004808
    Step 4: arch=[[2048, 2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [1024], [64, 64, 64, 64, 64]], score=-0.003810
    Step 5: arch=[[1024, 1024, 1024], [256, 256, 256, 256], [256, 256, 256, 256, 256], [1024], [64, 64, 64, 64, 64]], score=-0.005670
    Step 6: arch=[[1024, 1024], [256, 256, 256, 256], [256, 256, 256, 256, 256], [1024], [64, 64, 64, 64, 64]], score=-0.005958
    Step 7: arch=[[1024, 1024], [256, 256, 256, 256], [256, 256, 256, 256, 256], [512], [64, 64, 64, 64, 64]], score=-0.008367
    Step 8: arch=[[1024, 1024], [256, 256, 256], [256, 256, 256, 256, 256], [512], [64, 64, 64, 64, 64]], score=-0.009939
    Step 9: arch=[[1024, 1024], [256, 256, 256], [256, 256, 256, 256, 256], [1024], [64, 64, 64, 64, 64]], score=-0.007530
    Step 10: arch=[[1024, 1024], [256, 256, 256], [128, 128, 128, 128, 128], [1024], [64, 64, 64, 64, 64]], score=-0.007928

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.139382
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.071579
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.152671
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.029161
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.011201
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.191412
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.192880
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.063324

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.191412
    Step 4: arch=[[1024, 1024]], score=-0.186802
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.078606
    Step 6: arch=[[512, 512]], score=-0.190622
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.175197
    Step 10: arch=[[256, 256]], score=-0.192036

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.063927
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.069256
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.085971
    Step 4: arch=[[256, 256], [512, 512]], score=-0.168163
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.192307
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.111014
    Step 9: arch=[[128, 128]], score=-0.192619
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048, 2048], [2048], [64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.191412
    Step 4: arch=[[1024, 1024]], score=-0.186802
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.078606
    Step 6: arch=[[512, 512]], score=-0.190622
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.175197
    Step 10: arch=[[128, 128], [2048]], score=-0.168630

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.191412
    Step 4: arch=[[1024, 1024]], score=-0.186802
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.078606
    Step 6: arch=[[512, 512]], score=-0.190622
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.175197
    Step 10: arch=[[2048], [64, 64]], score=-0.169218

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256, 256], [256, 256, 256, 256, 256], [2048], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.191412
    Step 4: arch=[[1024, 1024]], score=-0.186802
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.078606
    Step 6: arch=[[512, 512]], score=-0.190622
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.175197
    Step 10: arch=[[1024, 1024, 1024, 1024], [256], [1024, 1024]], score=-0.133457


=== Modifiers: modifiers_62 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.025200
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.023758
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.003142
    Step 4: arch=[[512, 512, 512]], score=-0.106407
    Step 5: arch=[[512, 512]], score=-0.133764
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.013382
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.091317
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.080969
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-0.010069

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256, 256]], score=0.000487
    Step 4: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128, 128], [256, 256, 256, 256, 256]], score=0.001851
    Step 5: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [256, 256, 256, 256, 256]], score=0.003648
    Step 6: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [256, 256, 256, 256, 256], [128]], score=0.003823
    Step 7: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [128]], score=0.004750
    Step 8: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.004575
    Step 9: arch=[[1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=-0.012516
    Step 10: arch=[[1024, 1024, 1024, 1024], [256, 256, 256, 256]], score=-0.012696

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048, 2048], [512, 512, 512], [128], [256, 256, 256, 256]], score=-0.000208
    Step 4: arch=[[2048, 2048, 2048, 2048], [512, 512, 512], [128], [128, 128, 128, 128]], score=-0.000619
    Step 5: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512], [128], [128, 128, 128, 128]], score=0.003311
    Step 6: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [128, 128, 128, 128]], score=0.003519
    Step 7: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [128, 128, 128, 128]], score=-0.000412
    Step 8: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 9: arch=[[2048, 2048, 2048, 2048], [256, 256, 256, 256], [128], [256, 256, 256, 256]], score=-0.000374
    Step 10: arch=[[2048, 2048, 2048, 2048], [256, 256, 256, 256], [128], [256, 256, 256, 256, 256]], score=0.000113

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.118229
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.012295
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.006719
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.012871
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.013030
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.115820
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.169671
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.013132

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003142
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.002428
    Step 3: arch=[[128, 128, 128, 128]], score=-0.115820
    Step 4: arch=[[1024, 1024]], score=-0.087028
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.080524
    Step 6: arch=[[512, 512]], score=-0.133764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011290
    Step 10: arch=[[256, 256]], score=-0.154852

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.032808
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.004336
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.054532
    Step 4: arch=[[256, 256], [512, 512]], score=-0.145532
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.145311
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.073423
    Step 9: arch=[[128, 128]], score=-0.164826
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048, 2048], [1024], [64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003142
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.002428
    Step 3: arch=[[128, 128, 128, 128]], score=-0.115820
    Step 4: arch=[[1024, 1024]], score=-0.087028
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.080524
    Step 6: arch=[[512, 512]], score=-0.133764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011290
    Step 10: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [256, 256], [256, 256, 256, 256]], score=0.001489

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003142
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.002428
    Step 3: arch=[[128, 128, 128, 128]], score=-0.115820
    Step 4: arch=[[1024, 1024]], score=-0.087028
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.080524
    Step 6: arch=[[512, 512]], score=-0.133764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011290
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [64, 64, 64], [128, 128, 128, 128, 128]], score=0.006169

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512], [128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003142
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.002428
    Step 3: arch=[[128, 128, 128, 128]], score=-0.115820
    Step 4: arch=[[1024, 1024]], score=-0.087028
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.080524
    Step 6: arch=[[512, 512]], score=-0.133764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011290
    Step 10: arch=[[2048, 2048, 2048], [2048, 2048], [128, 128], [512, 512, 512], [256, 256, 256, 256, 256]], score=-100.000000


=== Modifiers: modifiers_63 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.045460
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.001155
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.007813
    Step 4: arch=[[512, 512, 512]], score=-0.086537
    Step 5: arch=[[512, 512]], score=-0.115181
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.035576
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.001533
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.073415
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.011758
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256, 256], [256, 256, 256, 256, 256]], score=0.000594
    Step 4: arch=[[512, 512, 512], [512, 512, 512], [256], [256, 256, 256], [256, 256, 256, 256, 256]], score=-0.000080
    Step 5: arch=[[512, 512, 512], [512, 512, 512], [256, 256, 256], [256, 256, 256, 256, 256]], score=-0.003514
    Step 6: arch=[[512, 512, 512], [512, 512, 512], [256, 256, 256], [256, 256, 256, 256, 256], [128]], score=-0.003393
    Step 7: arch=[[512, 512, 512], [1024, 1024, 1024], [256, 256, 256], [256, 256, 256, 256, 256], [128]], score=-0.002759
    Step 8: arch=[[1024, 1024, 1024], [256, 256, 256], [256, 256, 256, 256, 256], [128]], score=-0.001435
    Step 9: arch=[[1024, 1024, 1024], [256, 256, 256], [256, 256, 256, 256, 256], [128, 128]], score=-0.000852
    Step 10: arch=[[1024, 1024, 1024], [256, 256], [256, 256, 256, 256, 256], [128, 128]], score=-0.001174

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [128, 128], [256, 256, 256, 256, 256]], score=-0.000216
    Step 4: arch=[[512, 512, 512, 512], [512, 512, 512], [256, 256], [128, 128], [256, 256, 256, 256, 256]], score=0.001413
    Step 5: arch=[[256, 256, 256, 256], [512, 512, 512], [256, 256], [128, 128], [256, 256, 256, 256, 256]], score=-0.000290
    Step 6: arch=[[256, 256, 256], [512, 512, 512], [256, 256], [128, 128], [256, 256, 256, 256, 256]], score=-0.001805
    Step 7: arch=[[256, 256, 256], [512, 512, 512], [256, 256], [64, 64], [256, 256, 256, 256, 256]], score=-0.001910
    Step 8: arch=[[256, 256, 256], [512, 512], [256, 256], [64, 64], [256, 256, 256, 256, 256]], score=-0.002253
    Step 9: arch=[[256, 256, 256], [512, 512], [256, 256], [128, 128], [256, 256, 256, 256, 256]], score=-0.002148
    Step 10: arch=[[256, 256, 256], [512, 512], [128, 128], [128, 128], [256, 256, 256, 256, 256]], score=-0.002253

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.113358
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.005928
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.004314
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.033797
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.043260
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.002396
    Step 7: arch=[[128, 128, 128, 128]], score=-0.099410
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.157127
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.021357

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007813
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.008866
    Step 3: arch=[[128, 128, 128, 128]], score=-0.099410
    Step 4: arch=[[1024, 1024]], score=-0.061953
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118433
    Step 6: arch=[[512, 512]], score=-0.115181
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000303
    Step 10: arch=[[256, 256]], score=-0.139679

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.047351
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.006292
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.056224
    Step 4: arch=[[256, 256], [512, 512]], score=-0.127570
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.131265
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.049248
    Step 9: arch=[[128, 128]], score=-0.151399
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [128], [128, 128]], score=0.015890

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007813
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.008866
    Step 3: arch=[[128, 128, 128, 128]], score=-0.099410
    Step 4: arch=[[1024, 1024]], score=-0.061953
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118433
    Step 6: arch=[[512, 512]], score=-0.115181
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000303
    Step 10: arch=[[2048, 2048, 2048], [128, 128, 128], [1024, 1024, 1024, 1024]], score=0.007812

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007813
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.008866
    Step 3: arch=[[128, 128, 128, 128]], score=-0.099410
    Step 4: arch=[[1024, 1024]], score=-0.061953
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118433
    Step 6: arch=[[512, 512]], score=-0.115181
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000303
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [256, 256, 256, 256], [128, 128], [512]], score=0.014335

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512, 512], [512, 512, 512], [256, 256], [256, 256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007813
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.008866
    Step 3: arch=[[128, 128, 128, 128]], score=-0.099410
    Step 4: arch=[[1024, 1024]], score=-0.061953
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.118433
    Step 6: arch=[[512, 512]], score=-0.115181
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000303
    Step 10: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [256], [1024, 1024, 1024, 1024]], score=0.000620


=== Modifiers: modifiers_64 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.146569
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.092013
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.146109
    Step 4: arch=[[512, 512, 512]], score=0.040192
    Step 5: arch=[[512, 512]], score=0.028415
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.134127
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.035385
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.116372
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[64, 64]], score=0.000000
    Step 2: arch=[[64, 64]], score=0.000000
    Step 3: arch=[[64, 64, 64]], score=0.010420
    Step 4: arch=[[128, 128, 128]], score=0.014415
    Step 5: arch=[[128, 128, 128, 128]], score=0.024900
    Step 6: arch=[[1024, 1024]], score=0.063471
    Step 7: arch=[[2048, 2048, 2048, 2048]], score=0.146109
    Step 8: arch=[[2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 9: arch=[[2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 10: arch=[[128]], score=-0.006555

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[64, 64]], score=0.000000
    Step 2: arch=[[64, 64]], score=0.000000
    Step 3: arch=[[64]], score=-0.010420
    Step 4: arch=[[128]], score=-0.006555
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.044151
    Step 6: arch=[[256, 256, 256, 256]], score=0.033407
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.044151
    Step 8: arch=[[256, 256, 256, 256]], score=0.033407
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.044151
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.035385

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.065495
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.142922
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.145142
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.143478
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.145353
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.024900
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=0.000000
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.143140

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.146109
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.149081
    Step 3: arch=[[128, 128, 128, 128]], score=0.024900
    Step 4: arch=[[1024, 1024]], score=0.063471
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.054967
    Step 6: arch=[[512, 512]], score=0.028415
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.141840
    Step 10: arch=[[256, 256]], score=0.011920

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.142538
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.150994
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.137880
    Step 4: arch=[[256, 256], [512, 512]], score=0.049828
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=0.010420
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.144057
    Step 9: arch=[[128, 128]], score=0.003930
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64, 64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.146109
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.149081
    Step 3: arch=[[128, 128, 128, 128]], score=0.024900
    Step 4: arch=[[1024, 1024]], score=0.063471
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.054967
    Step 6: arch=[[512, 512]], score=0.028415
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.141840
    Step 10: arch=[[2048, 2048], [64, 64, 64, 64, 64], [2048, 2048, 2048, 2048, 2048], [256], [1024, 1024, 1024, 1024, 1024]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.146109
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.149081
    Step 3: arch=[[128, 128, 128, 128]], score=0.024900
    Step 4: arch=[[1024, 1024]], score=0.063471
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.054967
    Step 6: arch=[[512, 512]], score=0.028415
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.141840
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512], [128, 128, 128, 128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.146109
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.149081
    Step 3: arch=[[128, 128, 128, 128]], score=0.024900
    Step 4: arch=[[1024, 1024]], score=0.063471
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.054967
    Step 6: arch=[[512, 512]], score=0.028415
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.141840
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_65 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.005824
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.006771
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.003834
    Step 4: arch=[[512, 512, 512]], score=-0.127014
    Step 5: arch=[[512, 512]], score=-0.149692
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.021097
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.101472
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.021842
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 2: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 3: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128, 128], [256, 256]], score=0.001725
    Step 4: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128], [128, 128], [256, 256]], score=0.000484
    Step 5: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128], [256, 256]], score=-0.000537
    Step 6: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128], [256, 256], [128]], score=-0.000462
    Step 7: arch=[[2048], [2048, 2048, 2048, 2048, 2048], [128, 128], [256, 256], [128]], score=-100.000000
    Step 8: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128], [256, 256], [128]], score=-0.006055
    Step 9: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128], [256, 256], [128, 128]], score=-0.004329
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [128], [256, 256], [128, 128]], score=-0.006277

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 2: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 3: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [64], [256, 256]], score=-0.000051
    Step 4: arch=[[2048, 2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [64], [256, 256]], score=0.003776
    Step 5: arch=[[1024, 1024], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [64], [256, 256]], score=-0.001096
    Step 6: arch=[[1024], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [64], [256, 256]], score=-0.003243
    Step 7: arch=[[1024], [512, 512, 512, 512, 512], [128, 128, 128], [64], [256, 256]], score=-0.005694
    Step 8: arch=[[1024], [512, 512, 512, 512, 512], [128, 128, 128], [64], [512, 512]], score=-0.005331
    Step 9: arch=[[1024], [512, 512, 512, 512, 512], [128, 128, 128], [64], [256, 256]], score=-0.005694
    Step 10: arch=[[512], [512, 512, 512, 512, 512], [128, 128, 128], [64], [256, 256]], score=-0.007487

Method: TPE
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.103697
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.006255
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.006488
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.004296
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.004612
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.006018
    Step 7: arch=[[128, 128, 128, 128]], score=-0.122248
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.165932
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.004729

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003834
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.001367
    Step 3: arch=[[128, 128, 128, 128]], score=-0.122248
    Step 4: arch=[[1024, 1024]], score=-0.127335
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.103191
    Step 6: arch=[[512, 512]], score=-0.149692
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.070474
    Step 10: arch=[[256, 256]], score=-0.159351

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.006326
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.001222
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.008628
    Step 4: arch=[[256, 256], [512, 512]], score=-0.124828
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.145251
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.012863
    Step 9: arch=[[128, 128]], score=-0.163802
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64]], score=0.000246

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003834
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.001367
    Step 3: arch=[[128, 128, 128, 128]], score=-0.122248
    Step 4: arch=[[1024, 1024]], score=-0.127335
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.103191
    Step 6: arch=[[512, 512]], score=-0.149692
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.070474
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024, 1024]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003834
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.001367
    Step 3: arch=[[128, 128, 128, 128]], score=-0.122248
    Step 4: arch=[[1024, 1024]], score=-0.127335
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.103191
    Step 6: arch=[[512, 512]], score=-0.149692
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.070474
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048, 2048, 2048], [128, 128, 128, 128], [64]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [128], [256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003834
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.001367
    Step 3: arch=[[128, 128, 128, 128]], score=-0.122248
    Step 4: arch=[[1024, 1024]], score=-0.127335
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.103191
    Step 6: arch=[[512, 512]], score=-0.149692
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.070474
    Step 10: arch=[[2048], [2048, 2048, 2048, 2048], [512, 512, 512, 512]], score=-100.000000


=== Modifiers: modifiers_66 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.043530
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.002911
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.139186
    Step 5: arch=[[512, 512]], score=-0.160169
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.071925
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.107469
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.074460
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024]], score=0.001621
    Step 4: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [1024, 1024, 1024]], score=0.000972
    Step 5: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=0.002614
    Step 6: arch=[[256, 256, 256, 256, 256], [2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024]], score=-100.000000
    Step 7: arch=[[1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=-0.004969
    Step 8: arch=[[1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-0.003308
    Step 9: arch=[[1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=-0.004969
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=-0.006611

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512, 512], [1024, 1024], [1024, 1024, 1024]], score=-0.001621
    Step 4: arch=[[512, 512, 512, 512, 512], [2048, 2048], [1024, 1024, 1024]], score=-100.000000
    Step 5: arch=[[128, 128, 128], [1024, 1024], [1024, 1024, 1024]], score=-0.005161
    Step 6: arch=[[128, 128, 128], [1024, 1024], [512, 512, 512]], score=-0.026713
    Step 7: arch=[[128, 128], [1024, 1024], [512, 512, 512]], score=-0.046252
    Step 8: arch=[[64, 64], [1024, 1024], [512, 512, 512]], score=-0.048001
    Step 9: arch=[[64, 64], [1024, 1024], [512, 512, 512, 512]], score=-0.031629
    Step 10: arch=[[128, 128], [1024, 1024], [512, 512, 512, 512]], score=-0.029880

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.107282
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.031365
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.037554
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.006806
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.004211
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.030968
    Step 7: arch=[[128, 128, 128, 128]], score=-0.127018
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.166942
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.024760

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.127018
    Step 4: arch=[[1024, 1024]], score=-0.149566
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.092906
    Step 6: arch=[[512, 512]], score=-0.160169
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.119206
    Step 10: arch=[[256, 256]], score=-0.164325

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.044308
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.048562
    Step 4: arch=[[256, 256], [512, 512]], score=-0.131366
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.147464
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.021814
    Step 9: arch=[[128, 128]], score=-0.166117
    Step 10: arch=[[256, 256, 256, 256, 256], [512, 512, 512], [2048, 2048, 2048]], score=0.004264

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.127018
    Step 4: arch=[[1024, 1024]], score=-0.149566
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.092906
    Step 6: arch=[[512, 512]], score=-0.160169
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.119206
    Step 10: arch=[[256, 256, 256, 256]], score=-0.124652

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.127018
    Step 4: arch=[[1024, 1024]], score=-0.149566
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.092906
    Step 6: arch=[[512, 512]], score=-0.160169
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.119206
    Step 10: arch=[[128, 128, 128, 128], [512, 512, 512], [512, 512]], score=-0.040049

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512, 512, 512, 512], [1024, 1024, 1024], [1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.127018
    Step 4: arch=[[1024, 1024]], score=-0.149566
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.092906
    Step 6: arch=[[512, 512]], score=-0.160169
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.119206
    Step 10: arch=[[128, 128, 128, 128, 128]], score=-0.107469


=== Modifiers: modifiers_67 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.045584
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.003773
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.095782
    Step 4: arch=[[512, 512, 512]], score=-0.153361
    Step 5: arch=[[512, 512]], score=-0.163335
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.084400
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.139875
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.061179
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.004858

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128], [2048, 2048, 2048, 2048], [256, 256, 256]], score=0.004232
    Step 4: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [256, 256, 256]], score=0.004136
    Step 5: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [256, 256, 256, 256]], score=0.004799
    Step 6: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [256, 256, 256, 256], [512, 512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.005461
    Step 8: arch=[[64, 64, 64, 64, 64], [2048, 2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.006169
    Step 9: arch=[[64, 64, 64, 64, 64], [2048, 2048, 2048, 2048], [64, 64, 64, 64, 64]], score=0.005289
    Step 10: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=-0.059176

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128], [2048, 2048], [256, 256, 256]], score=-0.049674
    Step 4: arch=[[128, 128, 128, 128, 128], [2048, 2048], [256, 256, 256]], score=-0.040389
    Step 5: arch=[[128, 128, 128, 128, 128], [2048, 2048], [128, 128, 128]], score=-0.048701
    Step 6: arch=[[128, 128, 128, 128], [2048, 2048], [128, 128, 128]], score=-0.057986
    Step 7: arch=[[64, 64, 64, 64], [2048, 2048], [128, 128, 128]], score=-0.059810
    Step 8: arch=[[64, 64, 64, 64], [2048, 2048], [128, 128, 128, 128]], score=-0.051480
    Step 9: arch=[[128, 128, 128, 128], [2048, 2048], [128, 128, 128, 128]], score=-0.049656
    Step 10: arch=[[128, 128, 128, 128], [2048, 2048], [256, 256, 256, 256]], score=-0.041014

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.129822
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.081504
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.084089
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.056122
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.018877
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.149168
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.168411
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.075537

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.095782
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.033973
    Step 3: arch=[[128, 128, 128, 128]], score=-0.149168
    Step 4: arch=[[1024, 1024]], score=-0.156174
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.130731
    Step 6: arch=[[512, 512]], score=-0.163335
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.137500
    Step 10: arch=[[256, 256]], score=-0.166371

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.084829
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.027412
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.089359
    Step 4: arch=[[256, 256], [512, 512]], score=-0.146653
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.159152
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.075510
    Step 9: arch=[[128, 128]], score=-0.167753
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.095782
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.033973
    Step 3: arch=[[128, 128, 128, 128]], score=-0.149168
    Step 4: arch=[[1024, 1024]], score=-0.156174
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.130731
    Step 6: arch=[[512, 512]], score=-0.163335
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.137500
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048, 2048], [128, 128, 128], [1024], [256, 256]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.095782
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.033973
    Step 3: arch=[[128, 128, 128, 128]], score=-0.149168
    Step 4: arch=[[1024, 1024]], score=-0.156174
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.130731
    Step 6: arch=[[512, 512]], score=-0.163335
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.137500
    Step 10: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64, 64]], score=-0.085333

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [2048, 2048, 2048], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.095782
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.033973
    Step 3: arch=[[128, 128, 128, 128]], score=-0.149168
    Step 4: arch=[[1024, 1024]], score=-0.156174
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.130731
    Step 6: arch=[[512, 512]], score=-0.163335
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.137500
    Step 10: arch=[[2048, 2048, 2048, 2048], [512, 512, 512], [128, 128, 128, 128, 128], [1024, 1024, 1024], [128, 128, 128, 128, 128]], score=-100.000000


=== Modifiers: modifiers_68 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.109689
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.134010
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.089296
    Step 4: arch=[[512, 512, 512]], score=0.007159
    Step 5: arch=[[512, 512]], score=-0.004298
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.070013
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.021446
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.080691
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.140976

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64, 64, 64]], score=0.010268
    Step 4: arch=[[128, 128, 128, 128]], score=0.011122
    Step 5: arch=[[128, 128, 128, 128, 128]], score=0.021446
    Step 6: arch=[[1024, 1024]], score=0.004786
    Step 7: arch=[[2048, 2048, 2048, 2048]], score=0.089296
    Step 8: arch=[[2048, 2048, 2048, 2048], [512, 512, 512]], score=0.134389
    Step 9: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512]], score=0.135295
    Step 10: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512, 512]], score=0.136200

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64]], score=-0.010268
    Step 4: arch=[[128, 128]], score=-0.009528
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.023719
    Step 6: arch=[[256, 256, 256, 256]], score=0.013168
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.023719
    Step 8: arch=[[256, 256, 256, 256]], score=0.013168
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.023719
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.021446

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.033836
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.064490
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.082108
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.069341
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.099207
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.129905
    Step 7: arch=[[128, 128, 128, 128]], score=0.011122
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.010268
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.065270

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.089296
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.126196
    Step 3: arch=[[128, 128, 128, 128]], score=0.011122
    Step 4: arch=[[1024, 1024]], score=0.004786
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.032194
    Step 6: arch=[[512, 512]], score=-0.004298
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.030189
    Step 10: arch=[[256, 256]], score=-0.007936

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.054946
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.129217
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.062705
    Step 4: arch=[[256, 256], [512, 512]], score=0.025932
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=0.000000
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.112219
    Step 9: arch=[[128, 128]], score=-0.009528
    Step 10: arch=[[2048], [2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.089296
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.126196
    Step 3: arch=[[128, 128, 128, 128]], score=0.011122
    Step 4: arch=[[1024, 1024]], score=0.004786
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.032194
    Step 6: arch=[[512, 512]], score=-0.004298
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.030189
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.135841

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.089296
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.126196
    Step 3: arch=[[128, 128, 128, 128]], score=0.011122
    Step 4: arch=[[1024, 1024]], score=0.004786
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.032194
    Step 6: arch=[[512, 512]], score=-0.004298
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.030189
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512], [128, 128, 128, 128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.089296
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.126196
    Step 3: arch=[[128, 128, 128, 128]], score=0.011122
    Step 4: arch=[[1024, 1024]], score=0.004786
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.032194
    Step 6: arch=[[512, 512]], score=-0.004298
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.030189
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_69 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.048701
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.051111
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.007111
    Step 4: arch=[[512, 512, 512]], score=-0.067810
    Step 5: arch=[[512, 512]], score=-0.074613
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.022929
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.065465
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.020117
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[64], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=-0.001526
    Step 5: arch=[[64], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64]], score=-0.013627
    Step 6: arch=[[64], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64], [128]], score=-0.012692
    Step 7: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64], [128]], score=-0.011166
    Step 8: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [128]], score=0.000934
    Step 9: arch=[[128], [256, 256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [128]], score=0.003501
    Step 10: arch=[[128], [256, 256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [128]], score=0.007337

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[128], [256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=-0.002566
    Step 4: arch=[[128], [256], [1024, 1024, 1024, 1024], [64, 64, 64, 64]], score=-0.014667
    Step 5: arch=[[128], [256], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64]], score=-0.005950
    Step 6: arch=[[128], [256], [512, 512, 512, 512, 512], [64, 64, 64, 64]], score=-0.015673
    Step 7: arch=[[128], [128], [512, 512, 512, 512, 512], [64, 64, 64, 64]], score=-0.020662
    Step 8: arch=[[256], [128], [512, 512, 512, 512, 512], [64, 64, 64, 64]], score=-0.017762
    Step 9: arch=[[256], [128], [512, 512, 512, 512, 512], [64, 64, 64, 64, 64]], score=-0.005659
    Step 10: arch=[[256], [256], [512, 512, 512, 512, 512], [64, 64, 64, 64, 64]], score=-0.000493

Method: TPE
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.051867
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.027161
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.007039
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.036627
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.008704
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.077787
    Step 7: arch=[[128, 128, 128, 128]], score=-0.071546
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.085141
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.039323

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007111
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.074940
    Step 3: arch=[[128, 128, 128, 128]], score=-0.071546
    Step 4: arch=[[1024, 1024]], score=-0.061139
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.029538
    Step 6: arch=[[512, 512]], score=-0.074613
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.029577
    Step 10: arch=[[256, 256]], score=-0.080774

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.045405
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.011865
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.043515
    Step 4: arch=[[256, 256], [512, 512]], score=-0.060437
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.079096
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.003290
    Step 9: arch=[[128, 128]], score=-0.083710
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=0.055805

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007111
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.074940
    Step 3: arch=[[128, 128, 128, 128]], score=-0.071546
    Step 4: arch=[[1024, 1024]], score=-0.061139
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.029538
    Step 6: arch=[[512, 512]], score=-0.074613
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.029577
    Step 10: arch=[[2048, 2048, 2048, 2048], [1024], [512, 512, 512, 512, 512], [256], [256, 256, 256, 256, 256]], score=0.081366

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007111
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.074940
    Step 3: arch=[[128, 128, 128, 128]], score=-0.071546
    Step 4: arch=[[1024, 1024]], score=-0.061139
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.029538
    Step 6: arch=[[512, 512]], score=-0.074613
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.029577
    Step 10: arch=[[2048, 2048, 2048], [128, 128, 128]], score=-0.003545

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007111
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.074940
    Step 3: arch=[[128, 128, 128, 128]], score=-0.071546
    Step 4: arch=[[1024, 1024]], score=-0.061139
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.029538
    Step 6: arch=[[512, 512]], score=-0.074613
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.029577
    Step 10: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024], [2048, 2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_70 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.021601
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.104156
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.070070
    Step 4: arch=[[512, 512, 512]], score=-0.011518
    Step 5: arch=[[512, 512]], score=-0.025902
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.029258
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.008520
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.059688
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512, 512, 512, 512], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[128, 128], [512, 512, 512, 512, 512]], score=-0.002096
    Step 5: arch=[[128, 128], [512, 512, 512, 512]], score=-0.007449
    Step 6: arch=[[128, 128], [512, 512, 512, 512], [128]], score=-0.006575
    Step 7: arch=[[128, 128], [1024, 1024, 1024, 1024], [128]], score=0.009046
    Step 8: arch=[[1024, 1024, 1024, 1024], [128]], score=0.020349
    Step 9: arch=[[1024, 1024, 1024, 1024], [128, 128]], score=0.025045
    Step 10: arch=[[1024, 1024, 1024, 1024], [256, 256]], score=0.027993

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512, 512, 512]], score=-0.005343
    Step 4: arch=[[256, 256], [256, 256, 256, 256]], score=-0.011697
    Step 5: arch=[[256, 256, 256], [256, 256, 256, 256]], score=0.001872
    Step 6: arch=[[256, 256, 256], [256, 256, 256, 256, 256]], score=0.006701
    Step 7: arch=[[256, 256], [256, 256, 256, 256, 256]], score=-0.006868
    Step 8: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 9: arch=[[256, 256], [256, 256, 256, 256, 256]], score=-0.006868
    Step 10: arch=[[512, 512], [256, 256, 256, 256, 256]], score=-0.002618

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.004000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.071108
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.050222
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.084936
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.076406
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.046622
    Step 7: arch=[[128, 128, 128, 128]], score=-0.004854
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.032432
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.075249

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.070070
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099055
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004854
    Step 4: arch=[[1024, 1024]], score=-0.016421
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.042810
    Step 6: arch=[[512, 512]], score=-0.025902
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.008999
    Step 10: arch=[[256, 256]], score=-0.029835

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.061876
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.086105
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.048568
    Step 4: arch=[[256, 256], [512, 512]], score=-0.016029
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.019110
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.029818
    Step 9: arch=[[128, 128]], score=-0.031600
    Step 10: arch=[[2048, 2048, 2048, 2048], [256, 256, 256, 256, 256], [2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.070070
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099055
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004854
    Step 4: arch=[[1024, 1024]], score=-0.016421
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.042810
    Step 6: arch=[[512, 512]], score=-0.025902
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.008999
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048, 2048, 2048], [128, 128, 128, 128], [64]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.070070
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099055
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004854
    Step 4: arch=[[1024, 1024]], score=-0.016421
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.042810
    Step 6: arch=[[512, 512]], score=-0.025902
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.008999
    Step 10: arch=[[2048, 2048, 2048, 2048], [256, 256, 256, 256], [64, 64, 64, 64]], score=0.115037

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.070070
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099055
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004854
    Step 4: arch=[[1024, 1024]], score=-0.016421
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.042810
    Step 6: arch=[[512, 512]], score=-0.025902
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.008999
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [512, 512, 512, 512], [1024, 1024, 1024, 1024]], score=-100.000000


=== Modifiers: modifiers_71 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.021399
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.104551
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.007536
    Step 4: arch=[[512, 512, 512]], score=-0.042091
    Step 5: arch=[[512, 512]], score=-0.050578
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.000658
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.030240
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.029115
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.078590

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 2: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 3: arch=[[256, 256, 256], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.003281
    Step 4: arch=[[128, 128, 128], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.002129
    Step 5: arch=[[128, 128, 128], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=0.014097
    Step 6: arch=[[128, 128, 128], [256, 256, 256, 256, 256], [256, 256, 256, 256]], score=0.016688
    Step 7: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256]], score=-0.015529
    Step 8: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256, 256]], score=-0.012151
    Step 9: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256]], score=-0.015529
    Step 10: arch=[[256, 256, 256, 256], [256, 256, 256, 256]], score=-0.023495

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 2: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 3: arch=[[256, 256, 256], [128, 128, 128], [256, 256, 256]], score=-0.003281
    Step 4: arch=[[256, 256, 256], [256, 256, 256], [256, 256, 256]], score=-0.000813
    Step 5: arch=[[128, 128, 128], [256, 256, 256], [256, 256, 256]], score=-0.002028
    Step 6: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128]], score=-0.009149
    Step 7: arch=[[128, 128], [256, 256, 256], [128, 128, 128]], score=-0.016989
    Step 8: arch=[[64, 64], [256, 256, 256], [128, 128, 128]], score=-0.017503
    Step 9: arch=[[64, 64], [256, 256, 256], [128, 128, 128, 128]], score=-0.005739
    Step 10: arch=[[128, 128], [256, 256, 256], [128, 128, 128, 128]], score=-0.005225

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.019145
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.022550
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.038205
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.045344
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.075119
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.055226
    Step 7: arch=[[128, 128, 128, 128]], score=-0.038081
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.054220
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.018127

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007536
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.043355
    Step 3: arch=[[128, 128, 128, 128]], score=-0.038081
    Step 4: arch=[[1024, 1024]], score=-0.045126
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004666
    Step 6: arch=[[512, 512]], score=-0.050578
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030093
    Step 10: arch=[[256, 256]], score=-0.052788

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.010286
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.065742
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.002070
    Step 4: arch=[[256, 256], [512, 512]], score=-0.041533
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.046411
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.009458
    Step 9: arch=[[128, 128]], score=-0.053764
    Step 10: arch=[[2048], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.099116

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007536
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.043355
    Step 3: arch=[[128, 128, 128, 128]], score=-0.038081
    Step 4: arch=[[1024, 1024]], score=-0.045126
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004666
    Step 6: arch=[[512, 512]], score=-0.050578
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030093
    Step 10: arch=[[256, 256, 256], [64, 64], [128, 128], [2048, 2048], [256, 256, 256, 256, 256]], score=0.072196

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007536
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.043355
    Step 3: arch=[[128, 128, 128, 128]], score=-0.038081
    Step 4: arch=[[1024, 1024]], score=-0.045126
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004666
    Step 6: arch=[[512, 512]], score=-0.050578
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030093
    Step 10: arch=[[128, 128, 128, 128, 128], [256, 256, 256], [128, 128, 128, 128]], score=0.018296

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.007536
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.043355
    Step 3: arch=[[128, 128, 128, 128]], score=-0.038081
    Step 4: arch=[[1024, 1024]], score=-0.045126
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004666
    Step 6: arch=[[512, 512]], score=-0.050578
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030093
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_72 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.004540
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.055228
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.001536
    Step 4: arch=[[512, 512, 512]], score=-0.072438
    Step 5: arch=[[512, 512]], score=-0.092404
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.028512
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.038347
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.009464
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.003200
    Step 4: arch=[[512, 512, 512, 512, 512], [128, 128, 128, 128, 128], [256, 256, 256]], score=-0.011868
    Step 5: arch=[[512, 512, 512, 512, 512], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=-0.009409
    Step 6: arch=[[512, 512, 512, 512, 512], [256, 256, 256, 256, 256], [256, 256, 256, 256]], score=-0.007197
    Step 7: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256]], score=-0.024740
    Step 8: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256, 256]], score=-0.021390
    Step 9: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256]], score=-0.024740
    Step 10: arch=[[256, 256, 256, 256], [256, 256, 256, 256]], score=-0.043932

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128], [256, 256, 256]], score=-0.003200
    Step 4: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256, 256], [256, 256, 256]], score=-0.001052
    Step 5: arch=[[128, 128, 128], [256, 256, 256], [256, 256, 256]], score=-0.060598
    Step 6: arch=[[128, 128, 128], [256, 256, 256], [128, 128, 128]], score=-0.062167
    Step 7: arch=[[128, 128], [256, 256, 256], [128, 128, 128]], score=-0.081172
    Step 8: arch=[[64, 64], [256, 256, 256], [128, 128, 128]], score=-0.081641
    Step 9: arch=[[64, 64], [256, 256, 256], [128, 128, 128, 128]], score=-0.079251
    Step 10: arch=[[128, 128], [256, 256, 256], [128, 128, 128, 128]], score=-0.078781

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.080768
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.033813
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.023534
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.032705
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.068434
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.061341
    Step 7: arch=[[128, 128, 128, 128]], score=-0.057354
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.095751
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.020987

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.001536
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.056186
    Step 3: arch=[[128, 128, 128, 128]], score=-0.057354
    Step 4: arch=[[1024, 1024]], score=-0.086665
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.093975
    Step 6: arch=[[512, 512]], score=-0.092404
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.069056
    Step 10: arch=[[256, 256]], score=-0.094508

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.039994
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.008770
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.039812
    Step 4: arch=[[256, 256], [512, 512]], score=-0.085637
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.076792
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.042163
    Step 9: arch=[[128, 128]], score=-0.095368
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024, 1024], [2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.001536
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.056186
    Step 3: arch=[[128, 128, 128, 128]], score=-0.057354
    Step 4: arch=[[1024, 1024]], score=-0.086665
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.093975
    Step 6: arch=[[512, 512]], score=-0.092404
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.069056
    Step 10: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256], [1024, 1024], [256, 256], [256, 256]], score=0.037497

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.001536
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.056186
    Step 3: arch=[[128, 128, 128, 128]], score=-0.057354
    Step 4: arch=[[1024, 1024]], score=-0.086665
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.093975
    Step 6: arch=[[512, 512]], score=-0.092404
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.069056
    Step 10: arch=[[2048, 2048, 2048, 2048], [256, 256, 256, 256, 256], [64, 64, 64, 64]], score=0.025165

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.001536
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.056186
    Step 3: arch=[[128, 128, 128, 128]], score=-0.057354
    Step 4: arch=[[1024, 1024]], score=-0.086665
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.093975
    Step 6: arch=[[512, 512]], score=-0.092404
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.069056
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_73 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.104993
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.136216
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.000000
    Step 5: arch=[[512, 512]], score=-0.006634
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.041020
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.135467
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.004200
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.091487
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512, 512, 512]], score=0.000000
    Step 2: arch=[[512, 512, 512]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512]], score=0.006634
    Step 4: arch=[[128, 128, 128, 128]], score=-0.001635
    Step 5: arch=[[128, 128, 128, 128], [1024]], score=0.024399
    Step 6: arch=[[128, 128, 128, 128], [1024, 1024]], score=0.049969
    Step 7: arch=[[128, 128, 128, 128], [1024, 1024], [128]], score=0.053153
    Step 8: arch=[[128, 128, 128, 128], [2048, 2048], [128]], score=0.105387
    Step 9: arch=[[2048, 2048], [128]], score=0.032620
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.050388

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512, 512, 512]], score=0.000000
    Step 2: arch=[[512, 512, 512]], score=0.000000
    Step 3: arch=[[512, 512]], score=-0.006634
    Step 4: arch=[[1024, 1024]], score=0.003751
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.006797
    Step 6: arch=[[256, 256, 256, 256]], score=0.000802
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.006797
    Step 8: arch=[[256, 256, 256, 256]], score=0.000802
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.006797
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.004200

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.035655
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.076151
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.096730
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.134786
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.070828
    Step 7: arch=[[128, 128, 128, 128]], score=-0.001635
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.014325
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.079008

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001635
    Step 4: arch=[[1024, 1024]], score=0.003751
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036202
    Step 6: arch=[[512, 512]], score=-0.006634
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.029622
    Step 10: arch=[[256, 256]], score=-0.011188

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.073173
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.073468
    Step 4: arch=[[256, 256], [512, 512]], score=0.021187
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.137636
    Step 7: arch=[[64, 64, 64]], score=-0.008530
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.105259
    Step 9: arch=[[128, 128]], score=-0.013306
    Step 10: arch=[[1024], [256], [2048, 2048]], score=0.100634

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001635
    Step 4: arch=[[1024, 1024]], score=0.003751
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036202
    Step 6: arch=[[512, 512]], score=-0.006634
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.029622
    Step 10: arch=[[64, 64], [1024], [64, 64, 64, 64]], score=0.030805

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001635
    Step 4: arch=[[1024, 1024]], score=0.003751
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036202
    Step 6: arch=[[512, 512]], score=-0.006634
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.029622
    Step 10: arch=[[1024, 1024, 1024, 1024], [1024, 1024]], score=0.080228

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001635
    Step 4: arch=[[1024, 1024]], score=0.003751
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036202
    Step 6: arch=[[512, 512]], score=-0.006634
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.029622
    Step 10: arch=[[512, 512, 512]], score=0.000000


=== Modifiers: modifiers_74 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.079963
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.119218
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.060304
    Step 4: arch=[[512, 512, 512]], score=-0.008648
    Step 5: arch=[[512, 512]], score=-0.019455
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.078180
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.002544
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.061216
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 2: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 3: arch=[[512, 512, 512], [1024, 1024]], score=0.002470
    Step 4: arch=[[512, 512], [1024, 1024]], score=-0.008281
    Step 5: arch=[[1024, 1024]], score=-0.006660
    Step 6: arch=[[1024, 1024], [128]], score=-0.005894
    Step 7: arch=[[1024, 1024], [256]], score=-0.004546
    Step 8: arch=[[1024, 1024]], score=-0.006660
    Step 9: arch=[[1024]], score=-0.019114
    Step 10: arch=[[2048]], score=0.003184

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 2: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024], [1024]], score=0.015670
    Step 4: arch=[[128, 128, 128], [1024]], score=-0.010508
    Step 5: arch=[[128, 128, 128], [1024, 1024]], score=-0.007970
    Step 6: arch=[[128, 128], [1024, 1024]], score=-0.018258
    Step 7: arch=[[128, 128], [2048, 2048]], score=-0.005432
    Step 8: arch=[[128, 128], [1024, 1024]], score=-0.018258
    Step 9: arch=[[256, 256], [1024, 1024]], score=-0.014990
    Step 10: arch=[[256, 256], [512, 512]], score=-0.020391

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.028872
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.119889
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.056442
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.123915
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.125962
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.120436
    Step 7: arch=[[128, 128, 128, 128]], score=-0.007748
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.029752
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.119496

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.060304
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.089978
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007748
    Step 4: arch=[[1024, 1024]], score=-0.006660
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.120332
    Step 6: arch=[[512, 512]], score=-0.019455
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022224
    Step 10: arch=[[256, 256]], score=-0.025442

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.118546
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.114597
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.087809
    Step 4: arch=[[256, 256], [512, 512]], score=-0.020391
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.019485
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.007410
    Step 9: arch=[[128, 128]], score=-0.028332
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64, 64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.060304
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.089978
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007748
    Step 4: arch=[[1024, 1024]], score=-0.006660
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.120332
    Step 6: arch=[[512, 512]], score=-0.019455
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022224
    Step 10: arch=[[2048, 2048, 2048, 2048]], score=0.060304

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.060304
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.089978
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007748
    Step 4: arch=[[1024, 1024]], score=-0.006660
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.120332
    Step 6: arch=[[512, 512]], score=-0.019455
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022224
    Step 10: arch=[[128, 128, 128, 128], [2048, 2048]], score=0.015139

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512, 512], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.060304
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.089978
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007748
    Step 4: arch=[[1024, 1024]], score=-0.006660
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.120332
    Step 6: arch=[[512, 512]], score=-0.019455
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022224
    Step 10: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [256, 256, 256], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_75 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.106739
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.141710
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.018650
    Step 5: arch=[[512, 512]], score=0.013552
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.071339
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.151149
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.011172
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.110132
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[256]], score=0.000000
    Step 2: arch=[[256]], score=0.000000
    Step 3: arch=[[256, 256]], score=0.004100
    Step 4: arch=[[64, 64]], score=-0.002553
    Step 5: arch=[[64, 64], [1024]], score=0.010893
    Step 6: arch=[[64, 64], [1024, 1024]], score=0.020298
    Step 7: arch=[[64, 64], [1024, 1024], [128]], score=0.021147
    Step 8: arch=[[64, 64], [2048, 2048], [128]], score=0.039446
    Step 9: arch=[[2048, 2048], [128]], score=0.086071
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.094246

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[256]], score=0.000000
    Step 2: arch=[[256]], score=0.000000
    Step 3: arch=[[512]], score=0.008454
    Step 4: arch=[[1024]], score=0.025362
    Step 5: arch=[[1024, 1024]], score=0.034451
    Step 6: arch=[[64, 64, 64, 64]], score=0.005021
    Step 7: arch=[[64, 64, 64]], score=0.001234
    Step 8: arch=[[64, 64, 64, 64]], score=0.005021
    Step 9: arch=[[64, 64, 64]], score=0.001234
    Step 10: arch=[[128, 128, 128]], score=0.003473

Method: TPE
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.027917
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.064669
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.118233
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.061644
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.087874
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.143151
    Step 7: arch=[[128, 128, 128, 128]], score=0.007322
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.002553
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055231

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.149954
    Step 3: arch=[[128, 128, 128, 128]], score=0.007322
    Step 4: arch=[[1024, 1024]], score=0.034451
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.035710
    Step 6: arch=[[512, 512]], score=0.013552
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.084225
    Step 10: arch=[[256, 256]], score=0.004100

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.051381
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.146441
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.048086
    Step 4: arch=[[256, 256], [512, 512]], score=0.019357
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=0.001234
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.062287
    Step 9: arch=[[128, 128]], score=-0.000377
    Step 10: arch=[[2048], [2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.149954
    Step 3: arch=[[128, 128, 128, 128]], score=0.007322
    Step 4: arch=[[1024, 1024]], score=0.034451
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.035710
    Step 6: arch=[[512, 512]], score=0.013552
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.084225
    Step 10: arch=[[2048], [64], [128, 128, 128, 128], [128, 128], [512]], score=0.100859

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.149954
    Step 3: arch=[[128, 128, 128, 128]], score=0.007322
    Step 4: arch=[[1024, 1024]], score=0.034451
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.035710
    Step 6: arch=[[512, 512]], score=0.013552
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.084225
    Step 10: arch=[[1024, 1024], [2048, 2048], [1024], [2048, 2048, 2048, 2048, 2048], [128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.149954
    Step 3: arch=[[128, 128, 128, 128]], score=0.007322
    Step 4: arch=[[1024, 1024]], score=0.034451
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.035710
    Step 6: arch=[[512, 512]], score=0.013552
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.084225
    Step 10: arch=[[2048, 2048, 2048], [256], [512]], score=0.117829


=== Modifiers: modifiers_76 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.027999
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.077514
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.000000
    Step 5: arch=[[512, 512]], score=-0.035019
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.080859
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.093602
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.051219
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.033476
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.056573

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512, 512, 512]], score=0.000000
    Step 2: arch=[[512, 512, 512]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512]], score=0.035019
    Step 4: arch=[[128, 128, 128, 128]], score=0.017882
    Step 5: arch=[[128, 128, 128, 128], [1024]], score=0.026362
    Step 6: arch=[[128, 128, 128, 128], [1024, 1024]], score=0.030387
    Step 7: arch=[[128, 128, 128, 128], [1024, 1024], [128]], score=0.031436
    Step 8: arch=[[128, 128, 128, 128], [2048, 2048], [128]], score=0.042952
    Step 9: arch=[[2048, 2048], [128]], score=0.041961
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.045202

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512, 512, 512]], score=0.000000
    Step 2: arch=[[512, 512, 512]], score=0.000000
    Step 3: arch=[[512, 512]], score=-0.035019
    Step 4: arch=[[1024, 1024]], score=-0.013520
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.056596
    Step 6: arch=[[256, 256, 256, 256]], score=0.022922
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.056596
    Step 8: arch=[[256, 256, 256, 256]], score=0.022922
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.056596
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.051219

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.032699
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.049684
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.037439
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.027360
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.085287
    Step 7: arch=[[128, 128, 128, 128]], score=0.017882
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.050891
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.064670

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.017882
    Step 4: arch=[[1024, 1024]], score=-0.013520
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.068721
    Step 6: arch=[[512, 512]], score=-0.035019
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.023002
    Step 9: arch=[[2048, 2048]], score=0.040228
    Step 10: arch=[[256, 256]], score=-0.044425

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.031334
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.032251
    Step 4: arch=[[256, 256], [512, 512]], score=-0.036595
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.017639
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.022638
    Step 9: arch=[[128, 128]], score=-0.048792
    Step 10: arch=[[1024, 1024, 1024, 1024], [512, 512, 512, 512]], score=0.080136

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.017882
    Step 4: arch=[[1024, 1024]], score=-0.013520
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.068721
    Step 6: arch=[[512, 512]], score=-0.035019
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.023002
    Step 9: arch=[[2048, 2048]], score=0.040228
    Step 10: arch=[[64, 64, 64]], score=-0.017639

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.017882
    Step 4: arch=[[1024, 1024]], score=-0.013520
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.068721
    Step 6: arch=[[512, 512]], score=-0.035019
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.023002
    Step 9: arch=[[2048, 2048]], score=0.040228
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64, 64, 64], [256, 256, 256, 256]], score=0.080319

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.017882
    Step 4: arch=[[1024, 1024]], score=-0.013520
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.068721
    Step 6: arch=[[512, 512]], score=-0.035019
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.023002
    Step 9: arch=[[2048, 2048]], score=0.040228
    Step 10: arch=[[256], [512, 512], [256]], score=-0.067443


=== Modifiers: modifiers_77 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.046918
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.017388
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.102179
    Step 4: arch=[[512, 512, 512]], score=-0.151423
    Step 5: arch=[[512, 512]], score=-0.155355
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.092305
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.148186
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.073555
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[64, 64], [128, 128], [256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=-0.002655
    Step 4: arch=[[64, 64], [128, 128], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=-0.006678
    Step 5: arch=[[64, 64], [128, 128], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [128]], score=-0.004200
    Step 6: arch=[[64, 64], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [128]], score=-0.000774
    Step 7: arch=[[256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [128]], score=-0.074076
    Step 8: arch=[[256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [128, 128]], score=-0.060723
    Step 9: arch=[[256, 256], [1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [128, 128]], score=-0.070715
    Step 10: arch=[[256], [1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [128, 128]], score=-0.073954

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[64, 64], [128, 128], [256, 256], [512, 512, 512, 512, 512], [256, 256, 256, 256, 256]], score=-0.021707
    Step 4: arch=[[64, 64, 64], [128, 128], [256, 256], [512, 512, 512, 512, 512], [256, 256, 256, 256, 256]], score=-0.018656
    Step 5: arch=[[64, 64, 64], [128, 128], [256, 256], [512, 512, 512, 512], [256, 256, 256, 256, 256]], score=-0.032952
    Step 6: arch=[[64, 64, 64], [128, 128], [256, 256], [512, 512, 512, 512, 512], [256, 256, 256, 256, 256]], score=-0.018656
    Step 7: arch=[[64, 64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.003051
    Step 8: arch=[[64, 64, 64], [128, 128], [128, 128], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=-0.004794
    Step 9: arch=[[64, 64, 64], [64, 64], [128, 128], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=-0.006095
    Step 10: arch=[[64, 64, 64], [64], [128, 128], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=-0.011807

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.127597
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.113085
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.070384
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.095737
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.041415
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.151279
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.157721
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.120620

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.102179
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.046050
    Step 3: arch=[[128, 128, 128, 128]], score=-0.151279
    Step 4: arch=[[1024, 1024]], score=-0.150977
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.128584
    Step 6: arch=[[512, 512]], score=-0.155355
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.136858
    Step 10: arch=[[256, 256]], score=-0.156874

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.123714
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.041744
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.121477
    Step 4: arch=[[256, 256], [512, 512]], score=-0.141059
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.154669
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.100641
    Step 9: arch=[[128, 128]], score=-0.157466
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.014914

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.102179
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.046050
    Step 3: arch=[[128, 128, 128, 128]], score=-0.151279
    Step 4: arch=[[1024, 1024]], score=-0.150977
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.128584
    Step 6: arch=[[512, 512]], score=-0.155355
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.136858
    Step 10: arch=[[512, 512], [64, 64], [128, 128, 128, 128, 128], [2048, 2048], [128, 128]], score=-0.060463

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.102179
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.046050
    Step 3: arch=[[128, 128, 128, 128]], score=-0.151279
    Step 4: arch=[[1024, 1024]], score=-0.150977
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.128584
    Step 6: arch=[[512, 512]], score=-0.155355
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.136858
    Step 10: arch=[[128, 128, 128, 128, 128], [256, 256], [64, 64], [2048, 2048, 2048]], score=-0.044765

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64], [128, 128], [256, 256], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.102179
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.046050
    Step 3: arch=[[128, 128, 128, 128]], score=-0.151279
    Step 4: arch=[[1024, 1024]], score=-0.150977
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.128584
    Step 6: arch=[[512, 512]], score=-0.155355
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.136858
    Step 10: arch=[[512, 512, 512, 512, 512], [2048, 2048, 2048], [256], [1024, 1024, 1024, 1024, 1024], [256]], score=-100.000000


=== Modifiers: modifiers_78 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.017379
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.000556
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.154755
    Step 5: arch=[[512, 512]], score=-0.165781
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.056323
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.138246
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.017004
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 2: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 3: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=0.001567
    Step 4: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128], [256, 256, 256, 256]], score=-0.000638
    Step 5: arch=[[512], [64, 64, 64, 64, 64], [256, 256, 256, 256]], score=-0.025187
    Step 6: arch=[[512], [64, 64, 64, 64, 64], [256, 256, 256, 256], [128]], score=-0.024145
    Step 7: arch=[[512], [128, 128, 128, 128, 128], [256, 256, 256, 256], [128]], score=-0.023206
    Step 8: arch=[[512], [128, 128, 128, 128, 128], [256, 256, 256, 256]], score=-0.024246
    Step 9: arch=[[128, 128, 128, 128, 128], [256, 256, 256, 256]], score=-0.072171
    Step 10: arch=[[128, 128, 128, 128, 128], [256, 256, 256]], score=-0.093730

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 2: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 3: arch=[[512], [64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=-0.002279
    Step 4: arch=[[512], [64, 64, 64, 64], [128, 128, 128, 128, 128], [128, 128, 128]], score=-0.002515
    Step 5: arch=[[512, 512], [64, 64, 64, 64], [128, 128, 128, 128, 128], [128, 128, 128]], score=-0.001335
    Step 6: arch=[[512, 512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [128, 128, 128]], score=0.000944
    Step 7: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [128, 128, 128]], score=-0.000236
    Step 8: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 9: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [512, 512, 512]], score=0.000572
    Step 10: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000

Method: TPE
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.117369
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.032012
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.110263
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.001168
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.000895
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.148911
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.170941
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.011431

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.038288
    Step 3: arch=[[128, 128, 128, 128]], score=-0.148911
    Step 4: arch=[[1024, 1024]], score=-0.159162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089520
    Step 6: arch=[[512, 512]], score=-0.165781
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.143612
    Step 10: arch=[[256, 256]], score=-0.168802

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.022096
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.015084
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.040347
    Step 4: arch=[[256, 256], [512, 512]], score=-0.142853
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.160295
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.069335
    Step 9: arch=[[128, 128]], score=-0.170240
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048]], score=-0.007525

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.038288
    Step 3: arch=[[128, 128, 128, 128]], score=-0.148911
    Step 4: arch=[[1024, 1024]], score=-0.159162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089520
    Step 6: arch=[[512, 512]], score=-0.165781
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.143612
    Step 10: arch=[[256, 256, 256], [512, 512], [64, 64, 64, 64], [128], [128]], score=-0.068379

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.038288
    Step 3: arch=[[128, 128, 128, 128]], score=-0.148911
    Step 4: arch=[[1024, 1024]], score=-0.159162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089520
    Step 6: arch=[[512, 512]], score=-0.165781
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.143612
    Step 10: arch=[[128], [64], [128, 128, 128, 128, 128], [512, 512, 512, 512]], score=-0.044554

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512], [64, 64, 64, 64, 64], [128, 128, 128, 128, 128], [256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.038288
    Step 3: arch=[[128, 128, 128, 128]], score=-0.148911
    Step 4: arch=[[1024, 1024]], score=-0.159162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089520
    Step 6: arch=[[512, 512]], score=-0.165781
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.143612
    Step 10: arch=[[512]], score=-0.176808


=== Modifiers: modifiers_79 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.004681
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.022659
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.005408
    Step 4: arch=[[512, 512, 512]], score=-0.082464
    Step 5: arch=[[512, 512]], score=-0.121365
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.002803
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.036070
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.030210
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128, 128], [512, 512, 512, 512, 512]], score=0.001880
    Step 4: arch=[[128, 128, 128, 128, 128], [512], [1024], [128, 128, 128], [512, 512, 512, 512, 512]], score=0.000821
    Step 5: arch=[[128, 128, 128, 128, 128], [512], [128, 128, 128], [512, 512, 512, 512, 512]], score=0.003575
    Step 6: arch=[[128, 128, 128, 128, 128], [512], [128, 128, 128], [512, 512, 512, 512, 512], [128]], score=0.003640
    Step 7: arch=[[128, 128, 128, 128, 128], [1024], [128, 128, 128], [512, 512, 512, 512, 512], [128]], score=0.004769
    Step 8: arch=[[1024], [128, 128, 128], [512, 512, 512, 512, 512], [128]], score=-0.043212
    Step 9: arch=[[1024], [128, 128, 128], [512, 512, 512, 512, 512], [128, 128]], score=-0.013064
    Step 10: arch=[[1024], [128, 128], [512, 512, 512, 512, 512], [128, 128]], score=-0.026664

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [64, 64], [512, 512, 512, 512, 512]], score=-0.000099
    Step 4: arch=[[128, 128, 128, 128], [512], [1024, 1024], [64, 64], [512, 512, 512, 512, 512]], score=-0.002360
    Step 5: arch=[[64, 64, 64, 64], [512], [1024, 1024], [64, 64], [512, 512, 512, 512, 512]], score=-0.002626
    Step 6: arch=[[64, 64, 64], [512], [1024, 1024], [64, 64], [512, 512, 512, 512, 512]], score=-0.004879
    Step 7: arch=[[64, 64, 64], [256], [1024, 1024], [64, 64], [512, 512, 512, 512, 512]], score=-0.008608
    Step 8: arch=[[64, 64, 64], [256], [1024, 1024], [64, 64], [1024, 1024, 1024, 1024, 1024]], score=-0.003403
    Step 9: arch=[[64, 64, 64], [256], [1024, 1024], [64, 64], [512, 512, 512, 512, 512]], score=-0.008608
    Step 10: arch=[[64, 64, 64], [128], [1024, 1024], [64, 64], [512, 512, 512, 512, 512]], score=-0.013945

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.091421
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.002974
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.000506
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.003644
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.023882
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.000059
    Step 7: arch=[[128, 128, 128, 128]], score=-0.072314
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.148401
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.002259

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.005408
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.005403
    Step 3: arch=[[128, 128, 128, 128]], score=-0.072314
    Step 4: arch=[[1024, 1024]], score=-0.085162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.094471
    Step 6: arch=[[512, 512]], score=-0.121365
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004742
    Step 10: arch=[[256, 256]], score=-0.137344

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.004520
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.004359
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.004852
    Step 4: arch=[[256, 256], [512, 512]], score=-0.106008
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-0.001708
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.004619
    Step 7: arch=[[64, 64, 64]], score=-0.112289
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.004247
    Step 9: arch=[[128, 128]], score=-0.144803
    Step 10: arch=[[1024, 1024, 1024], [256, 256, 256, 256, 256], [64, 64, 64, 64], [128, 128, 128, 128, 128], [512, 512, 512]], score=0.008248

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.005408
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.005403
    Step 3: arch=[[128, 128, 128, 128]], score=-0.072314
    Step 4: arch=[[1024, 1024]], score=-0.085162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.094471
    Step 6: arch=[[512, 512]], score=-0.121365
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004742
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.013114

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.005408
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.005403
    Step 3: arch=[[128, 128, 128, 128]], score=-0.072314
    Step 4: arch=[[1024, 1024]], score=-0.085162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.094471
    Step 6: arch=[[512, 512]], score=-0.121365
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004742
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [2048, 2048, 2048, 2048], [128], [512]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128, 128], [512], [1024, 1024], [128, 128], [512, 512, 512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.005408
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.005403
    Step 3: arch=[[128, 128, 128, 128]], score=-0.072314
    Step 4: arch=[[1024, 1024]], score=-0.085162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.094471
    Step 6: arch=[[512, 512]], score=-0.121365
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004742
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_80 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.002345
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.038008
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.091134
    Step 5: arch=[[512, 512]], score=-0.099990
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.035613
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.094749
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.000155
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512, 512]], score=0.013840
    Step 4: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128, 128], [512, 512, 512]], score=0.020123
    Step 5: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [512, 512, 512]], score=-0.004766
    Step 6: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [512, 512, 512], [128]], score=-0.003060
    Step 7: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512], [512, 512, 512], [128]], score=0.005891
    Step 8: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512], [512, 512, 512]], score=0.004189
    Step 9: arch=[[512, 512], [512, 512, 512]], score=-0.073599
    Step 10: arch=[[512, 512], [512, 512]], score=-0.080615

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024, 1024], [256], [128], [512, 512]], score=-0.006134
    Step 4: arch=[[1024, 1024, 1024, 1024, 1024], [256], [128], [256, 256]], score=-0.013044
    Step 5: arch=[[1024, 1024, 1024, 1024], [256], [128], [256, 256]], score=-0.024896
    Step 6: arch=[[1024, 1024, 1024, 1024], [256, 256], [128], [256, 256]], score=-0.018763
    Step 7: arch=[[1024, 1024, 1024], [256, 256], [128], [256, 256]], score=-0.030615
    Step 8: arch=[[1024, 1024, 1024], [256, 256], [128], [512, 512]], score=-0.023704
    Step 9: arch=[[1024, 1024, 1024], [128, 128], [128], [512, 512]], score=-0.027877
    Step 10: arch=[[2048, 2048, 2048], [128, 128], [128], [512, 512]], score=-100.000000

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.083858
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.042261
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.025148
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.053955
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.025647
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.019217
    Step 7: arch=[[128, 128, 128, 128]], score=-0.102633
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.121356
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.057215

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.102633
    Step 4: arch=[[1024, 1024]], score=-0.073630
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.076005
    Step 6: arch=[[512, 512]], score=-0.099990
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.014702
    Step 10: arch=[[256, 256]], score=-0.112393

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.065099
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.065725
    Step 4: arch=[[256, 256], [512, 512]], score=-0.093884
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.113521
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.033519
    Step 9: arch=[[128, 128]], score=-0.118401
    Step 10: arch=[[128, 128, 128], [1024, 1024, 1024]], score=-0.065654

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.102633
    Step 4: arch=[[1024, 1024]], score=-0.073630
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.076005
    Step 6: arch=[[512, 512]], score=-0.099990
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.014702
    Step 10: arch=[[512, 512], [128, 128], [128, 128], [64, 64, 64, 64]], score=-0.046119

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.102633
    Step 4: arch=[[1024, 1024]], score=-0.073630
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.076005
    Step 6: arch=[[512, 512]], score=-0.099990
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.014702
    Step 10: arch=[[2048]], score=-0.039089

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024], [256, 256], [128], [512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.102633
    Step 4: arch=[[1024, 1024]], score=-0.073630
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.076005
    Step 6: arch=[[512, 512]], score=-0.099990
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.014702
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64]], score=-0.067476


=== Modifiers: modifiers_81 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.014685
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.027529
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.099564
    Step 5: arch=[[512, 512]], score=-0.110527
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.071032
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.108034
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.070605
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.024373

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64, 64]], score=0.007183
    Step 4: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128], [64, 64, 64]], score=-0.001536
    Step 5: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [64, 64, 64]], score=-0.029971
    Step 6: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [64, 64, 64], [128]], score=-0.028842
    Step 7: arch=[[256, 256, 256, 256, 256], [2048, 2048, 2048, 2048, 2048], [64, 64, 64], [128]], score=-100.000000
    Step 8: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [64, 64, 64]], score=-0.029971
    Step 9: arch=[[1024, 1024, 1024, 1024, 1024], [64, 64, 64]], score=-0.023260
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [64, 64]], score=-0.025202

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=-0.010141
    Step 4: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64]], score=-0.017324
    Step 5: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [128, 128, 128, 128], [64]], score=-0.026043
    Step 6: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64], [64]], score=-0.031542
    Step 7: arch=[[256, 256, 256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64], [64]], score=-0.041414
    Step 8: arch=[[256, 256, 256, 256], [1024, 1024, 1024], [64, 64, 64, 64], [64]], score=-0.051614
    Step 9: arch=[[256, 256, 256, 256], [1024, 1024, 1024], [64, 64, 64, 64], [128]], score=-0.050486
    Step 10: arch=[[256, 256, 256, 256], [512, 512, 512], [64, 64, 64, 64], [128]], score=-0.068525

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.095446
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.039680
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.028114
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.041956
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.023998
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.016036
    Step 7: arch=[[128, 128, 128, 128]], score=-0.117678
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.141218
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.071507

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.027333
    Step 3: arch=[[128, 128, 128, 128]], score=-0.117678
    Step 4: arch=[[1024, 1024]], score=-0.072816
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.097151
    Step 6: arch=[[512, 512]], score=-0.110527
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011038
    Step 10: arch=[[256, 256]], score=-0.128329

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.081151
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.029531
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.086396
    Step 4: arch=[[256, 256], [512, 512]], score=-0.119485
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.131641
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.056472
    Step 9: arch=[[128, 128]], score=-0.136966
    Step 10: arch=[[2048], [256, 256, 256, 256, 256], [2048]], score=0.029643

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.027333
    Step 3: arch=[[128, 128, 128, 128]], score=-0.117678
    Step 4: arch=[[1024, 1024]], score=-0.072816
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.097151
    Step 6: arch=[[512, 512]], score=-0.110527
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011038
    Step 10: arch=[[2048, 2048], [512, 512], [64, 64, 64, 64, 64], [128, 128, 128], [64]], score=0.026313

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.027333
    Step 3: arch=[[128, 128, 128, 128]], score=-0.117678
    Step 4: arch=[[1024, 1024]], score=-0.072816
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.097151
    Step 6: arch=[[512, 512]], score=-0.110527
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011038
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512], [256, 256, 256, 256, 256], [64], [256]], score=0.024115

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.027333
    Step 3: arch=[[128, 128, 128, 128]], score=-0.117678
    Step 4: arch=[[1024, 1024]], score=-0.072816
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.097151
    Step 6: arch=[[512, 512]], score=-0.110527
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011038
    Step 10: arch=[[2048, 2048]], score=0.011038


=== Modifiers: modifiers_82 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.013528
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.015055
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.011852
    Step 4: arch=[[512, 512, 512]], score=-0.125011
    Step 5: arch=[[512, 512]], score=-0.149112
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.031201
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.101953
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.038817
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-0.005857

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 2: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 3: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048, 2048]], score=-100.000000
    Step 4: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64], [2048]], score=-0.000235
    Step 5: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000
    Step 6: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64], [2048], [128]], score=-0.000084
    Step 7: arch=[[2048, 2048], [2048, 2048, 2048, 2048, 2048], [64, 64, 64], [2048], [128]], score=-100.000000
    Step 8: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64], [2048, 2048], [128]], score=-100.000000
    Step 9: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64], [2048], [128, 128]], score=0.000935
    Step 10: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64], [2048], [128, 128, 128]], score=0.001953

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 2: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 3: arch=[[1024, 1024], [2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=-0.003196
    Step 4: arch=[[1024, 1024], [2048, 2048, 2048, 2048], [64, 64, 64, 64], [1024]], score=-0.004094
    Step 5: arch=[[1024, 1024, 1024], [2048, 2048, 2048, 2048], [64, 64, 64, 64], [1024]], score=-0.002229
    Step 6: arch=[[1024, 1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [1024]], score=0.000968
    Step 7: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [1024]], score=-0.000897
    Step 8: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 9: arch=[[1024, 1024], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64], [2048]], score=-0.008340
    Step 10: arch=[[2048, 2048], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64], [2048]], score=-0.003216

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.105711
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.024450
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.012894
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.025244
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.019631
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.013092
    Step 7: arch=[[128, 128, 128, 128]], score=-0.124797
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.173899
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.015665

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.011852
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.008829
    Step 3: arch=[[128, 128, 128, 128]], score=-0.124797
    Step 4: arch=[[1024, 1024]], score=-0.118274
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.131802
    Step 6: arch=[[512, 512]], score=-0.149112
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-0.003799
    Step 9: arch=[[2048, 2048]], score=-0.048562
    Step 10: arch=[[256, 256]], score=-0.163527

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.038490
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.007137
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.031716
    Step 4: arch=[[256, 256], [512, 512]], score=-0.115716
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.151119
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.013565
    Step 9: arch=[[128, 128]], score=-0.170484
    Step 10: arch=[[2048], [64, 64, 64, 64, 64], [2048]], score=-0.010059

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.011852
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.008829
    Step 3: arch=[[128, 128, 128, 128]], score=-0.124797
    Step 4: arch=[[1024, 1024]], score=-0.118274
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.131802
    Step 6: arch=[[512, 512]], score=-0.149112
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-0.003799
    Step 9: arch=[[2048, 2048]], score=-0.048562
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.011852
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.008829
    Step 3: arch=[[128, 128, 128, 128]], score=-0.124797
    Step 4: arch=[[1024, 1024]], score=-0.118274
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.131802
    Step 6: arch=[[512, 512]], score=-0.149112
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-0.003799
    Step 9: arch=[[2048, 2048]], score=-0.048562
    Step 10: arch=[[512, 512, 512], [256, 256, 256, 256], [64, 64, 64, 64], [1024, 1024, 1024], [1024, 1024]], score=-0.010096

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.011852
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.008829
    Step 3: arch=[[128, 128, 128, 128]], score=-0.124797
    Step 4: arch=[[1024, 1024]], score=-0.118274
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.131802
    Step 6: arch=[[512, 512]], score=-0.149112
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-0.003799
    Step 9: arch=[[2048, 2048]], score=-0.048562
    Step 10: arch=[[512, 512], [1024, 1024, 1024]], score=-0.039528


=== Modifiers: modifiers_83 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.015707
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.040364
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.098311
    Step 5: arch=[[512, 512]], score=-0.130625
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.000365
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.014000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.051225
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.087343
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 2: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 3: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64, 64], [2048, 2048]], score=0.000904
    Step 4: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024], [64, 64, 64, 64, 64], [2048, 2048]], score=-0.000070
    Step 5: arch=[[128, 128, 128], [64, 64, 64], [64, 64, 64, 64, 64], [2048, 2048]], score=0.003541
    Step 6: arch=[[128, 128, 128], [64, 64, 64], [64, 64, 64, 64, 64], [2048, 2048], [128]], score=0.003702
    Step 7: arch=[[128, 128, 128], [128, 128, 128], [64, 64, 64, 64, 64], [2048, 2048], [128]], score=0.003894
    Step 8: arch=[[128, 128, 128], [64, 64, 64, 64, 64], [2048, 2048], [128]], score=-0.053821
    Step 9: arch=[[128, 128, 128], [64, 64, 64, 64, 64], [2048, 2048], [128, 128]], score=-0.039238
    Step 10: arch=[[128, 128, 128], [64, 64, 64, 64], [2048, 2048], [128, 128]], score=-0.042170

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 2: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.001958
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.001805
    Step 5: arch=[[64, 64, 64], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=-0.000150
    Step 6: arch=[[64, 64, 64], [64, 64, 64], [2048, 2048, 2048], [64, 64, 64, 64], [2048, 2048]], score=-100.000000
    Step 7: arch=[[64, 64, 64], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [1024, 1024]], score=-0.009523
    Step 8: arch=[[64, 64, 64], [128, 128, 128], [1024, 1024, 1024], [64, 64, 64, 64], [1024, 1024]], score=-0.005744
    Step 9: arch=[[64, 64, 64], [128, 128, 128], [1024, 1024, 1024], [64, 64, 64, 64], [512, 512]], score=-0.013211
    Step 10: arch=[[64, 64, 64], [128, 128, 128], [1024, 1024, 1024], [64, 64, 64, 64], [256, 256]], score=-0.016586

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.098454
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.008733
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.018560
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.047077
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.007087
    Step 7: arch=[[128, 128, 128, 128]], score=-0.082608
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.147723
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.004024

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.082608
    Step 4: arch=[[1024, 1024]], score=-0.109224
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.083323
    Step 6: arch=[[512, 512]], score=-0.130625
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.060469
    Step 10: arch=[[256, 256]], score=-0.140582

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.035406
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.037258
    Step 4: arch=[[256, 256], [512, 512]], score=-0.114503
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.009730
    Step 7: arch=[[64, 64, 64]], score=-0.116387
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.006574
    Step 9: arch=[[128, 128]], score=-0.145374
    Step 10: arch=[[128, 128, 128, 128, 128], [1024, 1024], [256, 256, 256, 256]], score=0.002350

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.082608
    Step 4: arch=[[1024, 1024]], score=-0.109224
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.083323
    Step 6: arch=[[512, 512]], score=-0.130625
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.060469
    Step 10: arch=[[128, 128, 128, 128], [64], [2048, 2048]], score=-0.037936

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.082608
    Step 4: arch=[[1024, 1024]], score=-0.109224
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.083323
    Step 6: arch=[[512, 512]], score=-0.130625
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.060469
    Step 10: arch=[[64, 64, 64, 64, 64]], score=-0.053715

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64, 64], [1024, 1024, 1024], [64, 64, 64, 64], [2048, 2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.082608
    Step 4: arch=[[1024, 1024]], score=-0.109224
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.083323
    Step 6: arch=[[512, 512]], score=-0.130625
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.060469
    Step 10: arch=[[128, 128, 128, 128, 128]], score=-0.051225


=== Modifiers: modifiers_84 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.105027
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.107708
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.027548
    Step 5: arch=[[512, 512]], score=-0.029356
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.058651
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.031387
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.071371
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 2: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 3: arch=[[256], [128, 128, 128, 128], [1024]], score=0.007356
    Step 4: arch=[[128], [128, 128, 128, 128], [1024]], score=0.005704
    Step 5: arch=[[128], [128, 128, 128, 128], [1024, 1024]], score=0.022067
    Step 6: arch=[[128], [256, 256, 256, 256], [1024, 1024]], score=0.026832
    Step 7: arch=[[256, 256, 256, 256], [1024, 1024]], score=0.006611
    Step 8: arch=[[256, 256, 256, 256], [1024, 1024, 1024]], score=0.017112
    Step 9: arch=[[256, 256, 256, 256], [1024, 1024]], score=0.006611
    Step 10: arch=[[256, 256, 256], [1024, 1024]], score=0.005354

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 2: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 3: arch=[[256], [128, 128], [1024]], score=-0.007356
    Step 4: arch=[[256], [256, 256], [1024]], score=-0.002706
    Step 5: arch=[[128, 128, 128], [256, 256], [1024]], score=-0.002157
    Step 6: arch=[[128, 128, 128], [256, 256], [512]], score=-0.012148
    Step 7: arch=[[128, 128], [256, 256], [512]], score=-0.013288
    Step 8: arch=[[64, 64], [256, 256], [512]], score=-0.014190
    Step 9: arch=[[64, 64], [256, 256], [512, 512]], score=-0.001893
    Step 10: arch=[[128, 128], [256, 256], [512, 512]], score=-0.000991

Method: TPE
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.003021
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.032549
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.030395
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.045948
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.091099
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.032528
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.035643
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.024903

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032528
    Step 4: arch=[[1024, 1024]], score=-0.020841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036030
    Step 6: arch=[[512, 512]], score=-0.029356
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000448
    Step 10: arch=[[256, 256]], score=-0.033081

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.023762
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.071427
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.018603
    Step 4: arch=[[256, 256], [512, 512]], score=-0.012499
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.125197
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.034535
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.031533
    Step 9: arch=[[128, 128]], score=-0.034811
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64], [64, 64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032528
    Step 4: arch=[[1024, 1024]], score=-0.020841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036030
    Step 6: arch=[[512, 512]], score=-0.029356
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000448
    Step 10: arch=[[512], [512, 512]], score=-0.009956

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032528
    Step 4: arch=[[1024, 1024]], score=-0.020841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036030
    Step 6: arch=[[512, 512]], score=-0.029356
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000448
    Step 10: arch=[[1024, 1024, 1024, 1024], [1024], [256, 256, 256]], score=0.044088

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256], [128, 128, 128], [1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032528
    Step 4: arch=[[1024, 1024]], score=-0.020841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036030
    Step 6: arch=[[512, 512]], score=-0.029356
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000448
    Step 10: arch=[[128]], score=-0.035952


=== Modifiers: modifiers_85 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.033639
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.034239
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.102225
    Step 5: arch=[[512, 512]], score=-0.119077
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.021783
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.084490
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.069492
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.031004

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=-0.014281
    Step 4: arch=[[1024, 1024, 1024], [64], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=-0.025785
    Step 5: arch=[[1024, 1024, 1024], [64], [64, 64, 64, 64, 64], [64, 64, 64, 64], [128]], score=-0.022924
    Step 6: arch=[[1024, 1024, 1024], [128], [64, 64, 64, 64, 64], [64, 64, 64, 64], [128]], score=-0.021792
    Step 7: arch=[[128], [64, 64, 64, 64, 64], [64, 64, 64, 64], [128]], score=-0.097363
    Step 8: arch=[[128], [64, 64, 64, 64, 64], [64, 64, 64, 64], [128, 128]], score=-0.095300
    Step 9: arch=[[128], [64, 64, 64, 64], [64, 64, 64, 64], [128, 128]], score=-0.097276
    Step 10: arch=[[128, 128], [64, 64, 64, 64], [64, 64, 64, 64], [128, 128]], score=-0.082570

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.023656
    Step 4: arch=[[512, 512, 512, 512], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=-0.006873
    Step 5: arch=[[512, 512, 512], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=-0.023711
    Step 6: arch=[[512, 512, 512], [64], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.014175
    Step 7: arch=[[512, 512, 512], [64], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [128, 128, 128, 128]], score=0.017376
    Step 8: arch=[[512, 512, 512], [64], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [128, 128, 128, 128]], score=0.021528
    Step 9: arch=[[512, 512, 512], [64], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [64, 64, 64, 64]], score=0.018274
    Step 10: arch=[[512, 512, 512], [64], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [64, 64, 64, 64]], score=0.016234

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.104238
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.041218
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.002149
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.042863
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.052691
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.099197
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.129949
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.043076

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.099197
    Step 4: arch=[[1024, 1024]], score=-0.102369
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089809
    Step 6: arch=[[512, 512]], score=-0.119077
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.031795
    Step 9: arch=[[2048, 2048]], score=-0.055243
    Step 10: arch=[[256, 256]], score=-0.125718

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.057782
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.024671
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.066712
    Step 4: arch=[[256, 256], [512, 512]], score=-0.118217
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-0.004854
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.115350
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.061119
    Step 9: arch=[[128, 128]], score=-0.128610
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.132869

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.099197
    Step 4: arch=[[1024, 1024]], score=-0.102369
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089809
    Step 6: arch=[[512, 512]], score=-0.119077
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.031795
    Step 9: arch=[[2048, 2048]], score=-0.055243
    Step 10: arch=[[64, 64], [512, 512, 512, 512, 512], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=-0.058780

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.099197
    Step 4: arch=[[1024, 1024]], score=-0.102369
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089809
    Step 6: arch=[[512, 512]], score=-0.119077
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.031795
    Step 9: arch=[[2048, 2048]], score=-0.055243
    Step 10: arch=[[256, 256, 256, 256], [2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256], [512]], score=0.029308

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024], [64, 64, 64, 64, 64], [64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.099197
    Step 4: arch=[[1024, 1024]], score=-0.102369
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.089809
    Step 6: arch=[[512, 512]], score=-0.119077
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.031795
    Step 9: arch=[[2048, 2048]], score=-0.055243
    Step 10: arch=[[64]], score=-0.144548


=== Modifiers: modifiers_86 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.044657
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.042727
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.143102
    Step 5: arch=[[512, 512]], score=-0.157644
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.065124
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.125605
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.088638
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 2: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 3: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256, 256], [512]], score=0.000195
    Step 4: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024], [256, 256, 256, 256], [512]], score=-0.001885
    Step 5: arch=[[2048, 2048], [256, 256, 256], [256, 256, 256, 256], [512]], score=-0.004892
    Step 6: arch=[[2048, 2048], [256, 256, 256], [256, 256, 256, 256], [512], [128]], score=-0.003537
    Step 7: arch=[[2048, 2048], [512, 512, 512], [256, 256, 256, 256], [512], [128]], score=-0.002645
    Step 8: arch=[[512, 512, 512], [256, 256, 256, 256], [512], [128]], score=-0.094314
    Step 9: arch=[[512, 512, 512], [256, 256, 256, 256], [512], [128, 128]], score=-0.091926
    Step 10: arch=[[512, 512, 512], [256, 256, 256], [512], [128, 128]], score=-0.103666

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 2: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 3: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [128, 128, 128], [512]], score=-0.000438
    Step 4: arch=[[2048, 2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [128, 128, 128], [512]], score=-100.000000
    Step 5: arch=[[1024, 1024], [256, 256, 256], [1024, 1024, 1024, 1024], [128, 128, 128], [512]], score=-0.002920
    Step 6: arch=[[1024], [256, 256, 256], [1024, 1024, 1024, 1024], [128, 128, 128], [512]], score=-0.010362
    Step 7: arch=[[1024], [256, 256, 256], [1024, 1024, 1024, 1024], [64, 64, 64], [512]], score=-0.013184
    Step 8: arch=[[1024], [256, 256], [1024, 1024, 1024, 1024], [64, 64, 64], [512]], score=-0.024903
    Step 9: arch=[[1024], [256, 256], [1024, 1024, 1024, 1024], [128, 128, 128], [512]], score=-0.022080
    Step 10: arch=[[1024], [256, 256], [512, 512, 512, 512], [128, 128, 128], [512]], score=-0.047677

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.114941
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.037374
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.077729
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.016886
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.003098
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.003206
    Step 7: arch=[[128, 128, 128, 128]], score=-0.139469
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.168710
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.032466

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.012575
    Step 3: arch=[[128, 128, 128, 128]], score=-0.139469
    Step 4: arch=[[1024, 1024]], score=-0.143642
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.072728
    Step 6: arch=[[512, 512]], score=-0.157644
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.111303
    Step 10: arch=[[256, 256]], score=-0.164103

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.046330
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.011711
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.058871
    Step 4: arch=[[256, 256], [512, 512]], score=-0.137415
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.154880
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.065460
    Step 9: arch=[[128, 128]], score=-0.167197
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=-0.020187

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.012575
    Step 3: arch=[[128, 128, 128, 128]], score=-0.139469
    Step 4: arch=[[1024, 1024]], score=-0.143642
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.072728
    Step 6: arch=[[512, 512]], score=-0.157644
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.111303
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [64], [128, 128, 128, 128, 128], [64, 64, 64, 64], [64]], score=-0.008567

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.012575
    Step 3: arch=[[128, 128, 128, 128]], score=-0.139469
    Step 4: arch=[[1024, 1024]], score=-0.143642
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.072728
    Step 6: arch=[[512, 512]], score=-0.157644
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.111303
    Step 10: arch=[[64], [512, 512], [128, 128, 128, 128], [64, 64, 64, 64, 64], [512]], score=-0.070587

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048], [256, 256, 256], [1024, 1024, 1024, 1024], [256, 256, 256], [512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.012575
    Step 3: arch=[[128, 128, 128, 128]], score=-0.139469
    Step 4: arch=[[1024, 1024]], score=-0.143642
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.072728
    Step 6: arch=[[512, 512]], score=-0.157644
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.111303
    Step 10: arch=[[2048, 2048, 2048], [64], [128], [256, 256]], score=-0.076960


=== Modifiers: modifiers_87 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.133421
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.144092
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.000910
    Step 5: arch=[[512, 512]], score=-0.003089
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.081497
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.149260
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.001457
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.070867
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256]], score=-0.001911
    Step 4: arch=[[128, 128, 128, 128]], score=-0.003301
    Step 5: arch=[[256, 256, 256, 256]], score=-0.001911
    Step 6: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 7: arch=[[1024, 1024]], score=0.002735
    Step 8: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 9: arch=[[1024, 1024], [512, 512, 512]], score=0.034018
    Step 10: arch=[[1024, 1024], [512, 512, 512, 512]], score=0.043263

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[256, 256, 256, 256]], score=-0.001911
    Step 4: arch=[[512, 512, 512, 512]], score=0.001270
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 6: arch=[[256, 256, 256, 256]], score=-0.001911
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 8: arch=[[256, 256, 256, 256]], score=-0.001911
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 10: arch=[[128, 128, 128, 128, 128]], score=-0.001457

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.043834
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.092804
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.063224
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.124497
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.146079
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.144333
    Step 7: arch=[[128, 128, 128, 128]], score=-0.003301
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.007599
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.087013

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.088299
    Step 3: arch=[[128, 128, 128, 128]], score=-0.003301
    Step 4: arch=[[1024, 1024]], score=0.002735
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.098747
    Step 6: arch=[[512, 512]], score=-0.003089
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.016527
    Step 10: arch=[[256, 256]], score=-0.005733

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.085169
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.115724
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.070548
    Step 4: arch=[[256, 256], [512, 512]], score=0.015027
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.005772
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.059489
    Step 9: arch=[[128, 128]], score=-0.006988
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [1024, 1024, 1024]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.088299
    Step 3: arch=[[128, 128, 128, 128]], score=-0.003301
    Step 4: arch=[[1024, 1024]], score=0.002735
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.098747
    Step 6: arch=[[512, 512]], score=-0.003089
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.016527
    Step 10: arch=[[256], [64, 64], [128, 128, 128, 128], [512, 512]], score=0.087185

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.088299
    Step 3: arch=[[128, 128, 128, 128]], score=-0.003301
    Step 4: arch=[[1024, 1024]], score=0.002735
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.098747
    Step 6: arch=[[512, 512]], score=-0.003089
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.016527
    Step 10: arch=[[64, 64, 64], [256, 256], [64, 64, 64], [256, 256]], score=0.063071

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.088299
    Step 3: arch=[[128, 128, 128, 128]], score=-0.003301
    Step 4: arch=[[1024, 1024]], score=0.002735
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.098747
    Step 6: arch=[[512, 512]], score=-0.003089
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.016527
    Step 10: arch=[[2048, 2048, 2048]], score=0.024067


=== Modifiers: modifiers_88 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.066684
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.139228
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.018842
    Step 5: arch=[[512, 512]], score=0.005320
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.056748
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.035773
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.051059
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[256], [256, 256, 256, 256, 256], [2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[128], [256, 256, 256, 256, 256]], score=-0.002110
    Step 5: arch=[[128], [256, 256, 256, 256]], score=-0.003552
    Step 6: arch=[[128], [256, 256, 256, 256], [128]], score=-0.001016
    Step 7: arch=[[128], [512, 512, 512, 512], [128]], score=0.009677
    Step 8: arch=[[512, 512, 512, 512], [128]], score=0.034618
    Step 9: arch=[[512, 512, 512, 512], [128, 128]], score=0.035843
    Step 10: arch=[[512, 512, 512, 512], [256, 256]], score=0.040392

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[256], [256, 256, 256, 256]], score=-0.001438
    Step 4: arch=[[256], [128, 128, 128, 128]], score=-0.006197
    Step 5: arch=[[256, 256], [128, 128, 128, 128]], score=0.006434
    Step 6: arch=[[256, 256], [128, 128, 128, 128, 128]], score=0.007662
    Step 7: arch=[[256], [128, 128, 128, 128, 128]], score=-0.004970
    Step 8: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 9: arch=[[256], [128, 128, 128, 128, 128]], score=-0.004970
    Step 10: arch=[[512], [128, 128, 128, 128, 128]], score=-0.000999

Method: TPE
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.032550
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.070905
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.113292
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.074397
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.095939
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.099033
    Step 7: arch=[[128, 128, 128, 128]], score=0.023360
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.002470
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.062729

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.023360
    Step 4: arch=[[1024, 1024]], score=0.016435
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047136
    Step 6: arch=[[512, 512]], score=0.005320
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.045744
    Step 10: arch=[[256, 256]], score=0.000647

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.050316
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.050224
    Step 4: arch=[[256, 256], [512, 512]], score=0.017393
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=0.009888
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.068075
    Step 9: arch=[[128, 128]], score=-0.001468
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.023360
    Step 4: arch=[[1024, 1024]], score=0.016435
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047136
    Step 6: arch=[[512, 512]], score=0.005320
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.045744
    Step 10: arch=[[2048], [2048]], score=0.103134

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.023360
    Step 4: arch=[[1024, 1024]], score=0.016435
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047136
    Step 6: arch=[[512, 512]], score=0.005320
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.045744
    Step 10: arch=[[64, 64], [512]], score=0.011259

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.023360
    Step 4: arch=[[1024, 1024]], score=0.016435
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047136
    Step 6: arch=[[512, 512]], score=0.005320
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.045744
    Step 10: arch=[[256]], score=-0.011988


=== Modifiers: modifiers_89 ===
Method: Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.088786
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.132892
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.013495
    Step 4: arch=[[512, 512, 512]], score=-0.013781
    Step 5: arch=[[512, 512]], score=-0.017173
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.065402
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.138103
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.010563
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.091659
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024]], score=-0.004355
    Step 4: arch=[[512, 512, 512, 512]], score=-0.010390
    Step 5: arch=[[1024, 1024, 1024, 1024]], score=-0.004355
    Step 6: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 7: arch=[[1024, 1024]], score=-0.013064
    Step 8: arch=[[2048, 2048, 2048, 2048]], score=0.013495
    Step 9: arch=[[2048, 2048, 2048, 2048], [512, 512, 512]], score=0.033227
    Step 10: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512]], score=0.037800

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[1024, 1024, 1024, 1024]], score=-0.004355
    Step 4: arch=[[2048, 2048, 2048, 2048]], score=0.013495
    Step 5: arch=[[256, 256, 256, 256, 256]], score=-0.009536
    Step 6: arch=[[256, 256, 256, 256]], score=-0.012686
    Step 7: arch=[[256, 256, 256, 256, 256]], score=-0.009536
    Step 8: arch=[[256, 256, 256, 256]], score=-0.012686
    Step 9: arch=[[256, 256, 256, 256, 256]], score=-0.009536
    Step 10: arch=[[128, 128, 128, 128, 128]], score=-0.010563

Method: TPE
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.009881
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.041529
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.015713
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.057568
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.089859
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.131914
    Step 7: arch=[[128, 128, 128, 128]], score=-0.013653
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.020240
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.038566

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.013495
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.091002
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013653
    Step 4: arch=[[1024, 1024]], score=-0.013064
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.045346
    Step 6: arch=[[512, 512]], score=-0.017173
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002922
    Step 10: arch=[[256, 256]], score=-0.018986

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.035476
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.048746
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.027732
    Step 4: arch=[[256, 256], [512, 512]], score=-0.005324
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.140063
    Step 7: arch=[[64, 64, 64]], score=-0.017166
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.025209
    Step 9: arch=[[128, 128]], score=-0.019832
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64], [64, 64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.013495
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.091002
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013653
    Step 4: arch=[[1024, 1024]], score=-0.013064
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.045346
    Step 6: arch=[[512, 512]], score=-0.017173
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002922
    Step 10: arch=[[2048], [256, 256], [128, 128, 128], [512, 512]], score=0.049368

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.013495
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.091002
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013653
    Step 4: arch=[[1024, 1024]], score=-0.013064
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.045346
    Step 6: arch=[[512, 512]], score=-0.017173
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002922
    Step 10: arch=[[128, 128, 128, 128]], score=-0.013653

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.013495
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.091002
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013653
    Step 4: arch=[[1024, 1024]], score=-0.013064
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.045346
    Step 6: arch=[[512, 512]], score=-0.017173
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002922
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_90 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.062684
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.040168
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.078101
    Step 4: arch=[[512, 512, 512]], score=0.000000
    Step 5: arch=[[512, 512]], score=-0.035764
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.071702
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.087857
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.043552
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.001806
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512, 512, 512]], score=0.000000
    Step 2: arch=[[512, 512, 512]], score=0.000000
    Step 3: arch=[[512, 512, 512, 512]], score=0.035764
    Step 4: arch=[[128, 128, 128, 128]], score=0.009506
    Step 5: arch=[[128, 128, 128, 128], [1024]], score=0.023360
    Step 6: arch=[[128, 128, 128, 128], [1024, 1024]], score=0.034765
    Step 7: arch=[[128, 128, 128, 128], [1024, 1024], [128]], score=0.035902
    Step 8: arch=[[128, 128, 128, 128], [2048, 2048], [128]], score=0.059792
    Step 9: arch=[[2048, 2048], [128]], score=0.070215
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.070756

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[512, 512, 512]], score=0.000000
    Step 2: arch=[[512, 512, 512]], score=0.000000
    Step 3: arch=[[512, 512]], score=-0.035764
    Step 4: arch=[[1024, 1024]], score=-0.002133
    Step 5: arch=[[256, 256, 256, 256, 256]], score=0.051962
    Step 6: arch=[[256, 256, 256, 256]], score=0.017572
    Step 7: arch=[[256, 256, 256, 256, 256]], score=0.051962
    Step 8: arch=[[256, 256, 256, 256]], score=0.017572
    Step 9: arch=[[256, 256, 256, 256, 256]], score=0.051962
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.043552

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.029890
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.066346
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.074685
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.049559
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.004267
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.079002
    Step 7: arch=[[128, 128, 128, 128]], score=0.009506
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.062189
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.070105

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.078101
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079515
    Step 3: arch=[[128, 128, 128, 128]], score=0.009506
    Step 4: arch=[[1024, 1024]], score=-0.002133
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.068232
    Step 6: arch=[[512, 512]], score=-0.035764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.070068
    Step 10: arch=[[256, 256]], score=-0.051207

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.042640
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.076896
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.043693
    Step 4: arch=[[256, 256], [512, 512]], score=-0.034971
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.082030
    Step 7: arch=[[64, 64, 64]], score=-0.028230
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.050624
    Step 9: arch=[[128, 128]], score=-0.058586
    Step 10: arch=[[64, 64, 64]], score=-0.028230

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.078101
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079515
    Step 3: arch=[[128, 128, 128, 128]], score=0.009506
    Step 4: arch=[[1024, 1024]], score=-0.002133
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.068232
    Step 6: arch=[[512, 512]], score=-0.035764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.070068
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=0.082117

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.078101
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079515
    Step 3: arch=[[128, 128, 128, 128]], score=0.009506
    Step 4: arch=[[1024, 1024]], score=-0.002133
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.068232
    Step 6: arch=[[512, 512]], score=-0.035764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.070068
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024]], score=0.072960

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512, 512]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.078101
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079515
    Step 3: arch=[[128, 128, 128, 128]], score=0.009506
    Step 4: arch=[[1024, 1024]], score=-0.002133
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.068232
    Step 6: arch=[[512, 512]], score=-0.035764
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.070068
    Step 10: arch=[[128, 128, 128, 128], [1024, 1024, 1024], [2048, 2048, 2048, 2048, 2048], [512, 512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_91 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.002853
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.051818
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.081828
    Step 5: arch=[[512, 512]], score=-0.095031
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.037906
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.069688
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.014744
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 2: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 3: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048, 2048]], score=-100.000000
    Step 4: arch=[[64], [512], [1024, 1024, 1024, 1024], [2048]], score=-0.008947
    Step 5: arch=[[64], [512], [2048]], score=-0.006422
    Step 6: arch=[[64], [512], [2048], [128]], score=-0.004414
    Step 7: arch=[[64], [1024], [2048], [128]], score=0.012693
    Step 8: arch=[[64], [1024], [2048]], score=0.010822
    Step 9: arch=[[1024], [2048]], score=-0.049920
    Step 10: arch=[[1024], [2048, 2048]], score=-0.023374

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 2: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 3: arch=[[64], [512], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000
    Step 4: arch=[[128, 128, 128], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.027429
    Step 5: arch=[[128, 128, 128], [512, 512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.038023
    Step 6: arch=[[128, 128], [512, 512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.025391
    Step 7: arch=[[128, 128], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.014798
    Step 8: arch=[[128, 128], [512], [1024, 1024, 1024, 1024, 1024], [1024]], score=0.003781
    Step 9: arch=[[128, 128], [1024], [1024, 1024, 1024, 1024, 1024], [1024]], score=0.015113
    Step 10: arch=[[256, 256], [1024], [1024, 1024, 1024, 1024, 1024], [1024]], score=0.019892

Method: TPE
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.070266
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.022648
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.032912
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.011208
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.024905
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.082321
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.109615
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.026005

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.082321
    Step 4: arch=[[1024, 1024]], score=-0.077225
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.085013
    Step 6: arch=[[512, 512]], score=-0.095031
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.037977
    Step 10: arch=[[256, 256]], score=-0.103478

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.038639
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.049522
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.038477
    Step 4: arch=[[256, 256], [512, 512]], score=-0.085165
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.097010
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.022024
    Step 9: arch=[[128, 128]], score=-0.107589
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.077962

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.082321
    Step 4: arch=[[1024, 1024]], score=-0.077225
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.085013
    Step 6: arch=[[512, 512]], score=-0.095031
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.037977
    Step 10: arch=[[256, 256, 256, 256, 256]], score=-0.065235

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.082321
    Step 4: arch=[[1024, 1024]], score=-0.077225
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.085013
    Step 6: arch=[[512, 512]], score=-0.095031
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.037977
    Step 10: arch=[[512, 512, 512, 512], [64], [128]], score=-0.065352

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64], [512], [1024, 1024, 1024, 1024, 1024], [2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.082321
    Step 4: arch=[[1024, 1024]], score=-0.077225
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.085013
    Step 6: arch=[[512, 512]], score=-0.095031
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.037977
    Step 10: arch=[[64, 64], [256, 256]], score=-0.096757


=== Modifiers: modifiers_92 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.047923
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.099098
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.006776
    Step 4: arch=[[512, 512, 512]], score=-0.038521
    Step 5: arch=[[512, 512]], score=-0.048657
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.027486
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.022816
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.077936
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.101271

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128], [128, 128, 128], [256, 256, 256, 256]], score=0.013988
    Step 4: arch=[[64, 64, 64, 64], [128, 128, 128], [256, 256, 256, 256]], score=0.013471
    Step 5: arch=[[64, 64, 64, 64], [128, 128, 128], [256, 256, 256, 256, 256]], score=0.018880
    Step 6: arch=[[64, 64, 64, 64], [256, 256, 256], [256, 256, 256, 256, 256]], score=0.022190
    Step 7: arch=[[256, 256, 256], [256, 256, 256, 256, 256]], score=0.020081
    Step 8: arch=[[256, 256, 256], [512, 512, 512, 512, 512]], score=0.028995
    Step 9: arch=[[256, 256, 256], [512, 512, 512, 512]], score=0.014016
    Step 10: arch=[[128, 128, 128], [512, 512, 512, 512]], score=0.012696

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[128, 128, 128, 128], [128], [256, 256, 256, 256]], score=-0.013988
    Step 4: arch=[[128, 128, 128, 128], [256], [256, 256, 256, 256]], score=-0.011024
    Step 5: arch=[[128, 128, 128], [256], [256, 256, 256, 256]], score=-0.020630
    Step 6: arch=[[128, 128, 128], [256], [128, 128, 128, 128]], score=-0.021686
    Step 7: arch=[[128, 128], [256], [128, 128, 128, 128]], score=-0.031293
    Step 8: arch=[[64, 64], [256], [128, 128, 128, 128]], score=-0.031807
    Step 9: arch=[[64, 64], [256], [128, 128, 128, 128, 128]], score=-0.026539
    Step 10: arch=[[128, 128], [256], [128, 128, 128, 128, 128]], score=-0.026025

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.018883
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.021773
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.008127
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.034480
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.035124
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.032424
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.052074
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.035052

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.006776
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079110
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032424
    Step 4: arch=[[1024, 1024]], score=-0.043697
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018474
    Step 6: arch=[[512, 512]], score=-0.048657
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030397
    Step 10: arch=[[256, 256]], score=-0.050715

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.025445
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.044256
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.025215
    Step 4: arch=[[256, 256], [512, 512]], score=-0.025647
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.042493
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.038429
    Step 9: arch=[[128, 128]], score=-0.051639
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.006776
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079110
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032424
    Step 4: arch=[[1024, 1024]], score=-0.043697
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018474
    Step 6: arch=[[512, 512]], score=-0.048657
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030397
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.095398

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.006776
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079110
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032424
    Step 4: arch=[[1024, 1024]], score=-0.043697
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018474
    Step 6: arch=[[512, 512]], score=-0.048657
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030397
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [512, 512, 512, 512, 512], [256, 256, 256, 256]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128, 128], [128, 128], [256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.006776
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079110
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032424
    Step 4: arch=[[1024, 1024]], score=-0.043697
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018474
    Step 6: arch=[[512, 512]], score=-0.048657
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030397
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_93 ===
Method: Random
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.090009
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.141749
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.000853
    Step 5: arch=[[512, 512]], score=-0.004655
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.075927
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.006135
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.104803
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.141516

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 2: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 3: arch=[[128, 128, 128], [64, 64, 64]], score=0.003665
    Step 4: arch=[[128, 128], [64, 64, 64]], score=-0.001238
    Step 5: arch=[[64, 64, 64]], score=-0.004286
    Step 6: arch=[[64, 64, 64], [128]], score=-0.004109
    Step 7: arch=[[64, 64, 64], [256]], score=-0.003754
    Step 8: arch=[[64, 64, 64]], score=-0.004286
    Step 9: arch=[[64, 64]], score=-0.009160
    Step 10: arch=[[128, 128]], score=-0.008577

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 2: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 3: arch=[[128, 128, 128], [64]], score=-0.003665
    Step 4: arch=[[256, 256, 256], [64]], score=-0.002303
    Step 5: arch=[[256, 256, 256], [64, 64]], score=0.001362
    Step 6: arch=[[256, 256], [64, 64]], score=-0.003662
    Step 7: arch=[[256, 256], [128, 128]], score=-0.003354
    Step 8: arch=[[256, 256], [64, 64]], score=-0.003662
    Step 9: arch=[[512, 512], [64, 64]], score=-0.000939
    Step 10: arch=[[512, 512], [64, 64, 64]], score=0.002726

Method: TPE
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.025603
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.086260
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.111696
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.127614
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.001231
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.009160
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.085236

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.001231
    Step 4: arch=[[1024, 1024]], score=0.001700
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.080654
    Step 6: arch=[[512, 512]], score=-0.004655
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.142759
    Step 9: arch=[[2048, 2048]], score=0.018274
    Step 10: arch=[[256, 256]], score=-0.007350

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.080333
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.059508
    Step 4: arch=[[256, 256], [512, 512]], score=-0.000791
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.004286
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.029906
    Step 9: arch=[[128, 128]], score=-0.008577
    Step 10: arch=[[256, 256, 256], [2048, 2048, 2048, 2048]], score=0.069430

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.001231
    Step 4: arch=[[1024, 1024]], score=0.001700
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.080654
    Step 6: arch=[[512, 512]], score=-0.004655
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.142759
    Step 9: arch=[[2048, 2048]], score=0.018274
    Step 10: arch=[[256, 256], [512, 512, 512, 512, 512], [128, 128, 128, 128, 128], [256, 256, 256], [64, 64]], score=0.139618

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.001231
    Step 4: arch=[[1024, 1024]], score=0.001700
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.080654
    Step 6: arch=[[512, 512]], score=-0.004655
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.142759
    Step 9: arch=[[2048, 2048]], score=0.018274
    Step 10: arch=[[256], [2048], [512, 512, 512, 512], [64, 64, 64, 64], [1024]], score=0.111292

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[128, 128, 128], [64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.001231
    Step 4: arch=[[1024, 1024]], score=0.001700
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.080654
    Step 6: arch=[[512, 512]], score=-0.004655
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.142759
    Step 9: arch=[[2048, 2048]], score=0.018274
    Step 10: arch=[[64]], score=-0.014033


=== Modifiers: modifiers_94 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.059333
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.035127
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.016269
    Step 4: arch=[[512, 512, 512]], score=-0.058589
    Step 5: arch=[[512, 512]], score=-0.060263
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.014440
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.061217
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.020712
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.067738

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048], [128, 128, 128, 128]], score=0.012311
    Step 4: arch=[[2048, 2048], [128, 128, 128, 128]], score=0.002380
    Step 5: arch=[[128, 128, 128, 128]], score=-0.062368
    Step 6: arch=[[128, 128, 128, 128], [128]], score=-0.061177
    Step 7: arch=[[128, 128, 128, 128], [256]], score=-0.058808
    Step 8: arch=[[128, 128, 128, 128]], score=-0.062368
    Step 9: arch=[[128, 128, 128]], score=-0.063519
    Step 10: arch=[[256, 256, 256]], score=-0.062015

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048], [128, 128]], score=-0.012311
    Step 4: arch=[[2048, 2048, 2048], [64, 64]], score=-0.013927
    Step 5: arch=[[2048, 2048, 2048, 2048], [64, 64]], score=-0.003933
    Step 6: arch=[[2048, 2048, 2048, 2048], [64, 64, 64]], score=0.008349
    Step 7: arch=[[2048, 2048, 2048], [64, 64, 64]], score=-0.001645
    Step 8: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 9: arch=[[2048, 2048, 2048], [64, 64, 64]], score=-0.001645
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64]], score=0.010637

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.033356
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.009807
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.012078
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.001817
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.027024
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.062368
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.065343
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.008290

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.016269
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069888
    Step 3: arch=[[128, 128, 128, 128]], score=-0.062368
    Step 4: arch=[[1024, 1024]], score=-0.053412
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.026554
    Step 6: arch=[[512, 512]], score=-0.060263
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.096756
    Step 9: arch=[[2048, 2048]], score=-0.036362
    Step 10: arch=[[256, 256]], score=-0.063271

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.009441
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.033016
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.010327
    Step 4: arch=[[256, 256], [512, 512]], score=-0.041678
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.052632
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.064219
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.006263
    Step 9: arch=[[128, 128]], score=-0.064670
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [64], [64, 64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.016269
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069888
    Step 3: arch=[[128, 128, 128, 128]], score=-0.062368
    Step 4: arch=[[1024, 1024]], score=-0.053412
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.026554
    Step 6: arch=[[512, 512]], score=-0.060263
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.096756
    Step 9: arch=[[2048, 2048]], score=-0.036362
    Step 10: arch=[[2048], [512, 512, 512, 512], [64, 64, 64, 64, 64], [2048, 2048, 2048, 2048], [2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.016269
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069888
    Step 3: arch=[[128, 128, 128, 128]], score=-0.062368
    Step 4: arch=[[1024, 1024]], score=-0.053412
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.026554
    Step 6: arch=[[512, 512]], score=-0.060263
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.096756
    Step 9: arch=[[2048, 2048]], score=-0.036362
    Step 10: arch=[[256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [64, 64, 64, 64], [512, 512, 512], [256, 256]], score=0.067622

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048], [128, 128, 128]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.016269
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069888
    Step 3: arch=[[128, 128, 128, 128]], score=-0.062368
    Step 4: arch=[[1024, 1024]], score=-0.053412
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.026554
    Step 6: arch=[[512, 512]], score=-0.060263
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.096756
    Step 9: arch=[[2048, 2048]], score=-0.036362
    Step 10: arch=[[1024, 1024], [1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=0.039774


=== Modifiers: modifiers_95 ===
Method: Random
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.011554
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.089936
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.008367
    Step 4: arch=[[512, 512, 512]], score=-0.055745
    Step 5: arch=[[512, 512]], score=-0.067059
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.008337
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.038110
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.083221
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64], [512, 512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.006984
    Step 4: arch=[[64, 64], [512, 512, 512, 512, 512], [256, 256, 256, 256, 256]], score=0.009988
    Step 5: arch=[[64, 64], [128, 128, 128, 128, 128], [256, 256, 256, 256, 256]], score=-0.001997
    Step 6: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [256, 256, 256, 256, 256]], score=0.061060
    Step 7: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [256, 256, 256, 256, 256], [512, 512, 512]], score=0.082589
    Step 8: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [256, 256, 256, 256, 256], [512, 512, 512, 512]], score=-100.000000
    Step 9: arch=[[2048, 2048, 2048], [128, 128, 128, 128, 128], [256, 256, 256, 256, 256], [512, 512, 512]], score=0.069720
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [256, 256, 256, 256, 256], [512, 512, 512]], score=0.082589

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 2: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 3: arch=[[64, 64], [512, 512, 512], [64, 64, 64, 64, 64]], score=-0.006984
    Step 4: arch=[[64, 64], [1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.009352
    Step 5: arch=[[128, 128, 128], [1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.020921
    Step 6: arch=[[128, 128, 128], [1024, 1024, 1024, 1024], [64, 64, 64, 64, 64]], score=0.030179
    Step 7: arch=[[128, 128, 128], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.011453
    Step 8: arch=[[256, 256, 256], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.012880
    Step 9: arch=[[128, 128, 128], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.011453
    Step 10: arch=[[128, 128, 128], [256, 256, 256, 256], [64, 64, 64, 64, 64]], score=0.003796

Method: TPE
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.039247
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.005694
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.017805
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.016450
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.016161
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.048920
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.071063
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.011218

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.008367
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064045
    Step 3: arch=[[128, 128, 128, 128]], score=-0.048920
    Step 4: arch=[[1024, 1024]], score=-0.061478
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018110
    Step 6: arch=[[512, 512]], score=-0.067059
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.047096
    Step 10: arch=[[256, 256]], score=-0.069448

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.000408
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.015916
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.004528
    Step 4: arch=[[256, 256], [512, 512]], score=-0.051855
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.060278
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.004566
    Step 9: arch=[[128, 128]], score=-0.070541
    Step 10: arch=[[2048, 2048], [256, 256, 256, 256, 256], [128, 128, 128, 128, 128]], score=0.025053

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.008367
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064045
    Step 3: arch=[[128, 128, 128, 128]], score=-0.048920
    Step 4: arch=[[1024, 1024]], score=-0.061478
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018110
    Step 6: arch=[[512, 512]], score=-0.067059
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.047096
    Step 10: arch=[[1024, 1024, 1024], [2048], [128]], score=0.005392

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.008367
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064045
    Step 3: arch=[[128, 128, 128, 128]], score=-0.048920
    Step 4: arch=[[1024, 1024]], score=-0.061478
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018110
    Step 6: arch=[[512, 512]], score=-0.067059
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.047096
    Step 10: arch=[[64, 64, 64], [128, 128, 128], [64, 64, 64, 64, 64]], score=-0.006442

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[64, 64], [512, 512, 512, 512], [64, 64, 64, 64, 64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.008367
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064045
    Step 3: arch=[[128, 128, 128, 128]], score=-0.048920
    Step 4: arch=[[1024, 1024]], score=-0.061478
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018110
    Step 6: arch=[[512, 512]], score=-0.067059
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.047096
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_96 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.008275
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=-0.076040
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.008171
    Step 4: arch=[[512, 512, 512]], score=-0.137891
    Step 5: arch=[[512, 512]], score=-0.153509
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.016310
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.131665
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.034210
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [512, 512, 512, 512]], score=-0.000281
    Step 4: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.000123
    Step 5: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=0.000267
    Step 6: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512, 512]], score=-0.028671
    Step 7: arch=[[128, 128, 128, 128, 128], [1024, 1024, 1024, 1024, 1024]], score=-0.010286
    Step 8: arch=[[128, 128, 128, 128, 128], [512, 512, 512, 512]], score=-0.053095
    Step 9: arch=[[64, 64, 64, 64, 64], [512, 512, 512, 512]], score=-0.056855
    Step 10: arch=[[64, 64, 64, 64], [512, 512, 512, 512]], score=-0.070851

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 2: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 3: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=-0.001651
    Step 4: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=-0.001502
    Step 5: arch=[[128, 128, 128], [128, 128, 128, 128], [1024, 1024, 1024, 1024]], score=-0.068825
    Step 6: arch=[[128, 128, 128], [128, 128, 128, 128], [512, 512, 512, 512]], score=-0.072876
    Step 7: arch=[[128, 128], [128, 128, 128, 128], [512, 512, 512, 512]], score=-0.086949
    Step 8: arch=[[64, 64], [128, 128, 128, 128], [512, 512, 512, 512]], score=-0.090231
    Step 9: arch=[[64, 64], [128, 128, 128, 128], [512, 512, 512, 512, 512]], score=-0.084669
    Step 10: arch=[[128, 128], [128, 128, 128, 128], [512, 512, 512, 512, 512]], score=-0.081387

Method: TPE
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.130473
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.056275
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.011115
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.057837
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.058533
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.145739
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.177106
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.047559

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.008171
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.002209
    Step 3: arch=[[128, 128, 128, 128]], score=-0.145739
    Step 4: arch=[[1024, 1024]], score=-0.123459
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.154668
    Step 6: arch=[[512, 512]], score=-0.153509
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.053496
    Step 10: arch=[[256, 256]], score=-0.167301

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.061633
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-0.005354
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.063273
    Step 4: arch=[[256, 256], [512, 512]], score=-0.136881
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.163109
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.034669
    Step 9: arch=[[128, 128]], score=-0.173889
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.008171
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.002209
    Step 3: arch=[[128, 128, 128, 128]], score=-0.145739
    Step 4: arch=[[1024, 1024]], score=-0.123459
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.154668
    Step 6: arch=[[512, 512]], score=-0.153509
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.053496
    Step 10: arch=[[2048], [64, 64, 64], [2048, 2048, 2048, 2048, 2048], [64, 64], [64, 64, 64, 64, 64]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.008171
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.002209
    Step 3: arch=[[128, 128, 128, 128]], score=-0.145739
    Step 4: arch=[[1024, 1024]], score=-0.123459
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.154668
    Step 6: arch=[[512, 512]], score=-0.153509
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.053496
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.008171
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-0.002209
    Step 3: arch=[[128, 128, 128, 128]], score=-0.145739
    Step 4: arch=[[1024, 1024]], score=-0.123459
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.154668
    Step 6: arch=[[512, 512]], score=-0.153509
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.053496
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_97 ===
Method: Random
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=-0.097194
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.003257
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.006504
    Step 4: arch=[[512, 512, 512]], score=-0.092235
    Step 5: arch=[[512, 512]], score=-0.122891
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.068727
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.060681
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.056017
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512, 512, 512], [2048, 2048, 2048, 2048], [256, 256, 256, 256, 256]], score=-100.000000
    Step 4: arch=[[256, 256, 256], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=-0.010427
    Step 5: arch=[[256, 256, 256], [256, 256, 256, 256, 256]], score=-0.100969
    Step 6: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256]], score=-0.071904
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [512, 512, 512]], score=-0.046261
    Step 8: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [512, 512, 512, 512]], score=-0.038615
    Step 9: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256, 256], [512, 512, 512, 512]], score=-0.009550
    Step 10: arch=[[256, 256, 256, 256, 256], [256, 256, 256, 256, 256], [128, 128, 128, 128]], score=-0.026495

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 2: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 3: arch=[[512, 512, 512], [2048, 2048], [256, 256, 256, 256, 256]], score=-0.013707
    Step 4: arch=[[512, 512, 512, 512], [2048, 2048], [256, 256, 256, 256, 256]], score=0.000315
    Step 5: arch=[[512, 512, 512, 512], [2048, 2048], [128, 128, 128, 128, 128]], score=-0.000141
    Step 6: arch=[[512, 512, 512], [2048, 2048], [128, 128, 128, 128, 128]], score=-0.021358
    Step 7: arch=[[256, 256, 256], [2048, 2048], [128, 128, 128, 128, 128]], score=-0.043791
    Step 8: arch=[[256, 256, 256], [2048, 2048], [128, 128, 128, 128]], score=-0.048701
    Step 9: arch=[[512, 512, 512], [2048, 2048], [128, 128, 128, 128]], score=-0.026267
    Step 10: arch=[[512, 512, 512], [2048, 2048], [256, 256, 256, 256]], score=-0.019065

Method: TPE
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.121221
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=-0.034717
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.003970
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=-0.049136
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=-0.049771
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.019304
    Step 7: arch=[[128, 128, 128, 128]], score=-0.089366
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.150478
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.040187

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.006504
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.006490
    Step 3: arch=[[128, 128, 128, 128]], score=-0.089366
    Step 4: arch=[[1024, 1024]], score=-0.087426
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.146387
    Step 6: arch=[[512, 512]], score=-0.122891
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.003898
    Step 10: arch=[[256, 256]], score=-0.139049

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.068870
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.005363
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.071110
    Step 4: arch=[[256, 256], [512, 512]], score=-0.132113
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.121893
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=-0.058719
    Step 9: arch=[[128, 128]], score=-0.146734
    Step 10: arch=[[2048], [2048, 2048, 2048, 2048, 2048], [2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.006504
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.006490
    Step 3: arch=[[128, 128, 128, 128]], score=-0.089366
    Step 4: arch=[[1024, 1024]], score=-0.087426
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.146387
    Step 6: arch=[[512, 512]], score=-0.122891
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.003898
    Step 10: arch=[[2048, 2048, 2048]], score=0.002800

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.006504
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.006490
    Step 3: arch=[[128, 128, 128, 128]], score=-0.089366
    Step 4: arch=[[1024, 1024]], score=-0.087426
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.146387
    Step 6: arch=[[512, 512]], score=-0.122891
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.003898
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[512, 512, 512], [2048, 2048, 2048], [256, 256, 256, 256, 256]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.006504
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.006490
    Step 3: arch=[[128, 128, 128, 128]], score=-0.089366
    Step 4: arch=[[1024, 1024]], score=-0.087426
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.146387
    Step 6: arch=[[512, 512]], score=-0.122891
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.003898
    Step 10: arch=[[2048, 2048, 2048, 2048], [512, 512, 512, 512, 512], [256, 256, 256, 256], [64, 64, 64], [1024, 1024, 1024, 1024, 1024]], score=-100.000000


=== Modifiers: modifiers_98 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.067849
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.086510
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.055408
    Step 5: arch=[[512, 512]], score=-0.057674
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.018977
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.069012
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.045922
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.086458

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[2048]], score=0.000000
    Step 2: arch=[[2048]], score=0.000000
    Step 3: arch=[[2048, 2048]], score=0.014846
    Step 4: arch=[[512, 512]], score=-0.057674
    Step 5: arch=[[512, 512], [1024]], score=-0.049640
    Step 6: arch=[[512, 512], [1024, 1024]], score=-0.022026
    Step 7: arch=[[512, 512], [1024, 1024], [128]], score=-0.018585
    Step 8: arch=[[512, 512], [2048, 2048], [128]], score=0.010514
    Step 9: arch=[[2048, 2048], [128]], score=0.016333
    Step 10: arch=[[2048, 2048], [128, 128]], score=0.037324

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[2048]], score=0.000000
    Step 2: arch=[[2048]], score=0.000000
    Step 3: arch=[[1024]], score=-0.039959
    Step 4: arch=[[1024, 1024]], score=-0.035177
    Step 5: arch=[[1024]], score=-0.039959
    Step 6: arch=[[1024, 1024]], score=-0.035177
    Step 7: arch=[[512, 512]], score=-0.057674
    Step 8: arch=[[256, 256]], score=-0.068293
    Step 9: arch=[[512, 512]], score=-0.057674
    Step 10: arch=[[1024, 1024]], score=-0.035177

Method: TPE
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.030900
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.008807
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.068805
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.024205
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.084668
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-0.001839
    Step 7: arch=[[128, 128, 128, 128]], score=-0.070490
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.075982
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.005162

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.086926
    Step 3: arch=[[128, 128, 128, 128]], score=-0.070490
    Step 4: arch=[[1024, 1024]], score=-0.035177
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.054909
    Step 6: arch=[[512, 512]], score=-0.057674
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.091589
    Step 9: arch=[[2048, 2048]], score=0.014846
    Step 10: arch=[[256, 256]], score=-0.068293

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.003684
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.089578
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.003121
    Step 4: arch=[[256, 256], [512, 512]], score=-0.042895
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.074544
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.035382
    Step 9: arch=[[128, 128]], score=-0.073445
    Step 10: arch=[[2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.086926
    Step 3: arch=[[128, 128, 128, 128]], score=-0.070490
    Step 4: arch=[[1024, 1024]], score=-0.035177
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.054909
    Step 6: arch=[[512, 512]], score=-0.057674
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.091589
    Step 9: arch=[[2048, 2048]], score=0.014846
    Step 10: arch=[[2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048], [128, 128], [2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.086926
    Step 3: arch=[[128, 128, 128, 128]], score=-0.070490
    Step 4: arch=[[1024, 1024]], score=-0.035177
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.054909
    Step 6: arch=[[512, 512]], score=-0.057674
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.091589
    Step 9: arch=[[2048, 2048]], score=0.014846
    Step 10: arch=[[2048], [128, 128, 128], [64, 64, 64, 64, 64], [512, 512], [256, 256]], score=0.085763

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.086926
    Step 3: arch=[[128, 128, 128, 128]], score=-0.070490
    Step 4: arch=[[1024, 1024]], score=-0.035177
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.054909
    Step 6: arch=[[512, 512]], score=-0.057674
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.091589
    Step 9: arch=[[2048, 2048]], score=0.014846
    Step 10: arch=[[1024], [2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [128, 128, 128, 128]], score=-100.000000


=== Modifiers: modifiers_99 ===
Method: Random
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.082262
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.066216
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.010827
    Step 5: arch=[[512, 512]], score=-0.037821
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.090752
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.027244
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.051756
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 2: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 3: arch=[[2048], [64, 64, 64], [64, 64, 64], [64, 64]], score=0.018847
    Step 4: arch=[[2048], [64, 64, 64], [64, 64], [64, 64]], score=0.011677
    Step 5: arch=[[2048], [64, 64, 64], [64, 64]], score=-0.007170
    Step 6: arch=[[2048], [64, 64, 64], [64, 64], [128]], score=-0.005383
    Step 7: arch=[[2048], [128, 128, 128], [64, 64], [128]], score=-0.002965
    Step 8: arch=[[2048], [128, 128, 128], [64, 64]], score=-0.004752
    Step 9: arch=[[128, 128, 128], [64, 64]], score=-0.011506
    Step 10: arch=[[128, 128, 128], [64]], score=-0.022265

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 2: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 3: arch=[[2048], [64, 64], [64, 64, 64], [64]], score=-0.010755
    Step 4: arch=[[2048], [64, 64], [128, 128, 128], [64]], score=-0.010455
    Step 5: arch=[[2048], [64, 64, 64], [128, 128, 128], [64]], score=0.000300
    Step 6: arch=[[2048], [64, 64, 64], [128, 128, 128], [64, 64]], score=0.019147
    Step 7: arch=[[2048], [64, 64, 64, 64], [128, 128, 128], [64, 64]], score=0.029902
    Step 8: arch=[[2048], [64, 64, 64, 64], [128, 128, 128], [128, 128]], score=0.031884
    Step 9: arch=[[2048], [64, 64, 64, 64], [128, 128, 128], [64, 64]], score=0.029902
    Step 10: arch=[[2048], [1024], [128, 128, 128], [64, 64]], score=0.031607

Method: TPE
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=-0.016733
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.064649
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.089547
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.065801
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.021647
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.098373
    Step 7: arch=[[128, 128, 128, 128]], score=0.002476
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.048341
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.081375

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.002476
    Step 4: arch=[[1024, 1024]], score=-0.021354
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.028287
    Step 6: arch=[[512, 512]], score=-0.037821
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.025800
    Step 10: arch=[[256, 256]], score=-0.044276

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.056608
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.052999
    Step 4: arch=[[256, 256], [512, 512]], score=-0.025301
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.023684
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.050593
    Step 9: arch=[[128, 128]], score=-0.047060
    Step 10: arch=[[1024, 1024, 1024, 1024], [512, 512, 512, 512]], score=0.089500

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.002476
    Step 4: arch=[[1024, 1024]], score=-0.021354
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.028287
    Step 6: arch=[[512, 512]], score=-0.037821
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.025800
    Step 10: arch=[[2048], [512, 512], [64, 64]], score=-0.001034

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.002476
    Step 4: arch=[[1024, 1024]], score=-0.021354
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.028287
    Step 6: arch=[[512, 512]], score=-0.037821
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.025800
    Step 10: arch=[[2048, 2048, 2048]], score=0.088358

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[2048], [64, 64, 64], [64, 64, 64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.002476
    Step 4: arch=[[1024, 1024]], score=-0.021354
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.028287
    Step 6: arch=[[512, 512]], score=-0.037821
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.025800
    Step 10: arch=[[512]], score=-0.064814


