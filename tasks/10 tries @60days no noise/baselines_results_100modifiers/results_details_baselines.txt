Reults Details:

=== Modifiers: modifiers_01 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.071760
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.129129
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.003075
    Step 5: arch=[[512, 512]], score=-0.008055
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.066340
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.012302
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.083992
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.112319

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.011511
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.006959
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003907
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001902
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.005977
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.008672
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.020326
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.018869

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.009927
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.006337
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003311
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006141
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004136
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006141
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007557
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006543

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.036426
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.093258
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.033686
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.044924
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.130588
    Step 7: arch=[[128, 128, 128, 128]], score=0.002650
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.017917
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.030739

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.130089
    Step 3: arch=[[128, 128, 128, 128]], score=0.002650
    Step 4: arch=[[1024, 1024]], score=0.006166
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003047
    Step 6: arch=[[512, 512]], score=-0.008055
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129039
    Step 9: arch=[[2048, 2048]], score=0.044051
    Step 10: arch=[[256, 256]], score=-0.013985

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.021087
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.108042
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.018858
    Step 4: arch=[[256, 256], [512, 512]], score=-0.008358
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.008338
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.034445
    Step 9: arch=[[128, 128]], score=-0.016655
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.128466

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.130089
    Step 3: arch=[[128, 128, 128, 128]], score=0.002650
    Step 4: arch=[[1024, 1024]], score=0.006166
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003047
    Step 6: arch=[[512, 512]], score=-0.008055
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129039
    Step 9: arch=[[2048, 2048]], score=0.044051
    Step 10: arch=[[1024, 1024, 1024], [2048, 2048, 2048], [128, 128, 128], [512, 512, 512], [64]], score=0.128989

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.130089
    Step 3: arch=[[128, 128, 128, 128]], score=0.002650
    Step 4: arch=[[1024, 1024]], score=0.006166
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003047
    Step 6: arch=[[512, 512]], score=-0.008055
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129039
    Step 9: arch=[[2048, 2048]], score=0.044051
    Step 10: arch=[[1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64, 64, 64], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.130089
    Step 3: arch=[[128, 128, 128, 128]], score=0.002650
    Step 4: arch=[[1024, 1024]], score=0.006166
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003047
    Step 6: arch=[[512, 512]], score=-0.008055
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129039
    Step 9: arch=[[2048, 2048]], score=0.044051
    Step 10: arch=[[1024, 1024, 1024, 1024], [256, 256, 256], [512, 512], [512, 512, 512, 512], [128, 128, 128, 128, 128]], score=0.132008


=== Modifiers: modifiers_02 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.073504
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.113189
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.016752
    Step 5: arch=[[512, 512]], score=-0.028271
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.044723
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.004714
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054212
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.008433
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.001029
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.008059
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007470
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.004726
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.004573
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.003898
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.005589

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.010762
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.007597
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002988
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008646
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.008057
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008646
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009997
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.008511

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.047530
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.076692
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.062461
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.091169
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.100660
    Step 7: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.037739
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.047414

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 4: arch=[[1024, 1024]], score=-0.015591
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001352
    Step 6: arch=[[512, 512]], score=-0.028271
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.015712
    Step 10: arch=[[256, 256]], score=-0.033867

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.036826
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033872
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015174
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.027197
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.041294
    Step 9: arch=[[128, 128]], score=-0.036479
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.066025

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 4: arch=[[1024, 1024]], score=-0.015591
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001352
    Step 6: arch=[[512, 512]], score=-0.028271
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.015712
    Step 10: arch=[[64, 64], [1024], [64, 64, 64, 64]], score=0.000108

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 4: arch=[[1024, 1024]], score=-0.015591
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001352
    Step 6: arch=[[512, 512]], score=-0.028271
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.015712
    Step 10: arch=[[128, 128, 128, 128, 128], [512]], score=0.003202

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015302
    Step 4: arch=[[1024, 1024]], score=-0.015591
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001352
    Step 6: arch=[[512, 512]], score=-0.028271
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.015712
    Step 10: arch=[[512, 512, 512, 512, 512]], score=0.006286


=== Modifiers: modifiers_03 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.070474
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.104449
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.023352
    Step 5: arch=[[512, 512]], score=-0.033306
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.016725
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.021654
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.043502
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.107091

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002139
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.002587
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007581
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007270
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.021915
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.002173
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.000041
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.008445

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.008813
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.003390
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005157
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.018629
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.018317
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.018629
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.020962
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.019663

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.034456
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.101377
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.031897
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.093060
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.090152
    Step 7: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.049482
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.018861

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 4: arch=[[1024, 1024]], score=-0.012020
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006964
    Step 6: arch=[[512, 512]], score=-0.033306
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039510
    Step 10: arch=[[256, 256]], score=-0.042829

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.010309
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.015999
    Step 4: arch=[[256, 256], [512, 512]], score=-0.012001
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.041000
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.070827
    Step 9: arch=[[128, 128]], score=-0.047311
    Step 10: arch=[[1024, 1024, 1024, 1024], [128, 128, 128, 128], [128, 128, 128, 128]], score=0.061205

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 4: arch=[[1024, 1024]], score=-0.012020
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006964
    Step 6: arch=[[512, 512]], score=-0.033306
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039510
    Step 10: arch=[[2048], [512, 512], [64, 64]], score=0.051346

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 4: arch=[[1024, 1024]], score=-0.012020
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006964
    Step 6: arch=[[512, 512]], score=-0.033306
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039510
    Step 10: arch=[[64, 64, 64, 64, 64]], score=-0.024036

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030206
    Step 4: arch=[[1024, 1024]], score=-0.012020
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006964
    Step 6: arch=[[512, 512]], score=-0.033306
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039510
    Step 10: arch=[[64, 64]], score=-0.049482


=== Modifiers: modifiers_04 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.049373
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.088525
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 4: arch=[[512, 512, 512]], score=-0.021409
    Step 5: arch=[[512, 512]], score=-0.026332
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.005700
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.029312
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054138
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003174
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.008151
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002634
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.000692
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.023392
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.000194
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.003036
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.002259

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003576
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001599
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004861
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014590
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.011264
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014590
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.016724
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.016179

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.037523
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.082806
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.033096
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.079777
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.041052
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.020393

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115151
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 4: arch=[[1024, 1024]], score=-0.006202
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030820
    Step 6: arch=[[512, 512]], score=-0.026332
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.044642
    Step 10: arch=[[256, 256]], score=-0.035074

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.017127
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.113970
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.013352
    Step 4: arch=[[256, 256], [512, 512]], score=-0.013896
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.037868
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.054382
    Step 9: arch=[[128, 128]], score=-0.039115
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.114293

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115151
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 4: arch=[[1024, 1024]], score=-0.006202
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030820
    Step 6: arch=[[512, 512]], score=-0.026332
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.044642
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115151
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 4: arch=[[1024, 1024]], score=-0.006202
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030820
    Step 6: arch=[[512, 512]], score=-0.026332
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.044642
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.117065

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.107433
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115151
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032580
    Step 4: arch=[[1024, 1024]], score=-0.006202
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030820
    Step 6: arch=[[512, 512]], score=-0.026332
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.044642
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_05 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.072971
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.094983
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.052718
    Step 5: arch=[[512, 512]], score=-0.058172
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.000087
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.049097
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.045755
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.104269

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003497
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.009314
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007226
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006212
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.027402
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.033389
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.029827
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.046080

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.004829
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002520
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002163
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.017625
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.016611
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.017625
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.018508
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.018025

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.041380
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.016276
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.064063
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.095443
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.063895
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.038943

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 4: arch=[[1024, 1024]], score=-0.050097
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033672
    Step 6: arch=[[512, 512]], score=-0.058172
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.106989
    Step 9: arch=[[2048, 2048]], score=-0.029041
    Step 10: arch=[[256, 256]], score=-0.061595

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.034258
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033361
    Step 4: arch=[[256, 256], [512, 512]], score=-0.019802
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.099442
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.059248
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.075071
    Step 9: arch=[[128, 128]], score=-0.063154
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [64, 64], [64], [128]], score=0.028347

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 4: arch=[[1024, 1024]], score=-0.050097
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033672
    Step 6: arch=[[512, 512]], score=-0.058172
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.106989
    Step 9: arch=[[2048, 2048]], score=-0.029041
    Step 10: arch=[[64], [64, 64, 64, 64], [256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128]], score=0.067850

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 4: arch=[[1024, 1024]], score=-0.050097
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033672
    Step 6: arch=[[512, 512]], score=-0.058172
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.106989
    Step 9: arch=[[2048, 2048]], score=-0.029041
    Step 10: arch=[[64], [256, 256, 256, 256], [64, 64, 64, 64], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024]], score=0.095302

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.053783
    Step 4: arch=[[1024, 1024]], score=-0.050097
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033672
    Step 6: arch=[[512, 512]], score=-0.058172
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.106989
    Step 9: arch=[[2048, 2048]], score=-0.029041
    Step 10: arch=[[1024]], score=-0.058006


=== Modifiers: modifiers_06 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.042591
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.102378
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.016321
    Step 5: arch=[[512, 512]], score=-0.036533
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.039269
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.009287
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.040297
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.099946

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003649
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.016526
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010059
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.009473
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=-0.000878
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.013394
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.009705
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.016258

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.018660
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.014972
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003326
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007358
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.006772
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007358
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008789
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.008065

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.089840
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.097601
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.097620
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.098839
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.093824
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.046920
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.091154

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097832
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 4: arch=[[1024, 1024]], score=-0.020853
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030050
    Step 6: arch=[[512, 512]], score=-0.036533
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022698
    Step 10: arch=[[256, 256]], score=-0.042850

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.072850
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.101553
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.055953
    Step 4: arch=[[256, 256], [512, 512]], score=-0.029778
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.028711
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.025366
    Step 9: arch=[[128, 128]], score=-0.045627
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097832
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 4: arch=[[1024, 1024]], score=-0.020853
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030050
    Step 6: arch=[[512, 512]], score=-0.036533
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022698
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [512, 512], [256, 256, 256]], score=0.096782

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097832
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 4: arch=[[1024, 1024]], score=-0.020853
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030050
    Step 6: arch=[[512, 512]], score=-0.036533
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022698
    Step 10: arch=[[64, 64, 64, 64], [1024, 1024], [64, 64, 64]], score=0.048916

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097832
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009018
    Step 4: arch=[[1024, 1024]], score=-0.020853
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030050
    Step 6: arch=[[512, 512]], score=-0.036533
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022698
    Step 10: arch=[[256, 256, 256], [64], [256, 256, 256, 256]], score=0.045096


=== Modifiers: modifiers_07 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.025847
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.086151
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.014522
    Step 5: arch=[[512, 512]], score=-0.012661
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.055337
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.050903
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.051550
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.115176

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.004563
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.000791
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002534
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.001640
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.014685
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.013928
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.018513
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.011638

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.025217
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.020442
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004317
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008784
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004611
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008784
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.010549
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010022

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.072667
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.110641
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.065106
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.029023
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.026136
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.024907
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.083084

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.026136
    Step 4: arch=[[1024, 1024]], score=0.006159
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025323
    Step 6: arch=[[512, 512]], score=-0.012661
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.059241
    Step 10: arch=[[256, 256]], score=-0.020141

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.058317
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.058112
    Step 4: arch=[[256, 256], [512, 512]], score=-0.006415
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.000261
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.080022
    Step 9: arch=[[128, 128]], score=-0.023399
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.075894

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.026136
    Step 4: arch=[[1024, 1024]], score=0.006159
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025323
    Step 6: arch=[[512, 512]], score=-0.012661
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.059241
    Step 10: arch=[[64], [512, 512]], score=-0.037472

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.026136
    Step 4: arch=[[1024, 1024]], score=0.006159
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025323
    Step 6: arch=[[512, 512]], score=-0.012661
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.059241
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.050903

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.026136
    Step 4: arch=[[1024, 1024]], score=0.006159
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.025323
    Step 6: arch=[[512, 512]], score=-0.012661
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.059241
    Step 10: arch=[[256]], score=-0.045393


=== Modifiers: modifiers_08 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.117958
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.047134
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 4: arch=[[512, 512, 512]], score=-0.016173
    Step 5: arch=[[512, 512]], score=-0.020747
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.080966
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.025711
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.052910
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.014258
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.004877
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002116
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001100
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010834
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.016886
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.031259
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.018526

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003409
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002253
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005391
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009683
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.008667
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009683
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.012102
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.009123

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.046865
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.085912
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.049536
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.085969
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.120911
    Step 7: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.037373
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.040408

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120857
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 4: arch=[[1024, 1024]], score=0.001111
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006553
    Step 6: arch=[[512, 512]], score=-0.020747
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.053972
    Step 10: arch=[[256, 256]], score=-0.030534

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.037265
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.118307
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.031346
    Step 4: arch=[[256, 256], [512, 512]], score=-0.011476
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.034302
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.062047
    Step 9: arch=[[128, 128]], score=-0.035141
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.118789

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120857
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 4: arch=[[1024, 1024]], score=0.001111
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006553
    Step 6: arch=[[512, 512]], score=-0.020747
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.053972
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128, 128], [1024, 1024, 1024, 1024, 1024], [256, 256], [64, 64, 64]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120857
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 4: arch=[[1024, 1024]], score=0.001111
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006553
    Step 6: arch=[[512, 512]], score=-0.020747
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.053972
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.122018

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.108853
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120857
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028855
    Step 4: arch=[[1024, 1024]], score=0.001111
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006553
    Step 6: arch=[[512, 512]], score=-0.020747
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.053972
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_09 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.064715
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.133507
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 4: arch=[[512, 512, 512]], score=-0.013344
    Step 5: arch=[[512, 512]], score=-0.015409
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.039484
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.014843
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.079378
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010754
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.006807
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003414
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001094
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.012645
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.006574
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.004228
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.003135

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.001582
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000113
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001582
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007749
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005429
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007749
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008411
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006885

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.009953
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.029577
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.011920
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.051529
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.097835
    Step 7: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.019830
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.000201

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099485
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 4: arch=[[1024, 1024]], score=-0.009172
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.012971
    Step 6: arch=[[512, 512]], score=-0.015409
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.007092
    Step 10: arch=[[256, 256]], score=-0.018053

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.001271
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.045076
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=-0.000368
    Step 4: arch=[[256, 256], [512, 512]], score=-0.007125
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.018388
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.024900
    Step 9: arch=[[128, 128]], score=-0.019257
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=0.077980

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099485
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 4: arch=[[1024, 1024]], score=-0.009172
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.012971
    Step 6: arch=[[512, 512]], score=-0.015409
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.007092
    Step 10: arch=[[2048, 2048, 2048], [1024], [256, 256, 256, 256], [512]], score=0.071667

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099485
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 4: arch=[[1024, 1024]], score=-0.009172
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.012971
    Step 6: arch=[[512, 512]], score=-0.015409
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.007092
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.030183
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099485
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016314
    Step 4: arch=[[1024, 1024]], score=-0.009172
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.012971
    Step 6: arch=[[512, 512]], score=-0.015409
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.007092
    Step 10: arch=[[2048, 2048], [2048, 2048, 2048, 2048, 2048], [512], [2048, 2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000


=== Modifiers: modifiers_10 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.040836
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120880
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.024412
    Step 5: arch=[[512, 512]], score=-0.028523
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.002588
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.025444
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.041649
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003822
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.005810
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010477
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.008365
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.007219
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.014818
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.010981
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.013290

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003596
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.000718
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002758
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009903
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007792
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009903
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.011148
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010746

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.027995
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.067703
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.042341
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.105346
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.037294
    Step 7: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.037030
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.012350

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069582
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 4: arch=[[1024, 1024]], score=-0.017537
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022478
    Step 6: arch=[[512, 512]], score=-0.028523
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.008477
    Step 10: arch=[[256, 256]], score=-0.033510

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.008872
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.094502
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.004864
    Step 4: arch=[[256, 256], [512, 512]], score=-0.019777
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.033584
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.021087
    Step 9: arch=[[128, 128]], score=-0.035878
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.118450

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069582
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 4: arch=[[1024, 1024]], score=-0.017537
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022478
    Step 6: arch=[[512, 512]], score=-0.028523
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.008477
    Step 10: arch=[[2048, 2048, 2048], [64], [128, 128, 128, 128, 128]], score=0.062966

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069582
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 4: arch=[[1024, 1024]], score=-0.017537
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022478
    Step 6: arch=[[512, 512]], score=-0.028523
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.008477
    Step 10: arch=[[2048, 2048], [128], [64, 64, 64], [128, 128]], score=0.033311

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069582
    Step 3: arch=[[128, 128, 128, 128]], score=-0.028922
    Step 4: arch=[[1024, 1024]], score=-0.017537
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022478
    Step 6: arch=[[512, 512]], score=-0.028523
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.008477
    Step 10: arch=[[2048, 2048], [64], [64, 64, 64, 64], [1024, 1024]], score=0.045805


=== Modifiers: modifiers_100 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.101153
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.030570
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.003823
    Step 4: arch=[[512, 512, 512]], score=-0.051843
    Step 5: arch=[[512, 512]], score=-0.053356
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.027664
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.055130
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.040715
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010853
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.002325
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002280
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.000077
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.030171
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.025520
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.014628
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.033940

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.000971
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001178
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002023
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.015317
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.012961
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.015317
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.016116
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.014596

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.039141
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.012344
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.059859
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.101887
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.055978
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.058315
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.041867

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003823
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064461
    Step 3: arch=[[128, 128, 128, 128]], score=-0.055978
    Step 4: arch=[[1024, 1024]], score=-0.046360
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033772
    Step 6: arch=[[512, 512]], score=-0.053356
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.028117
    Step 10: arch=[[256, 256]], score=-0.056323

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.041020
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.068791
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.038110
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015378
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.057501
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.081673
    Step 9: arch=[[128, 128]], score=-0.057673
    Step 10: arch=[[128]], score=-0.058521

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003823
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064461
    Step 3: arch=[[128, 128, 128, 128]], score=-0.055978
    Step 4: arch=[[1024, 1024]], score=-0.046360
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033772
    Step 6: arch=[[512, 512]], score=-0.053356
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.028117
    Step 10: arch=[[2048, 2048], [2048], [64, 64, 64], [512, 512], [128, 128, 128, 128]], score=0.104751

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003823
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064461
    Step 3: arch=[[128, 128, 128, 128]], score=-0.055978
    Step 4: arch=[[1024, 1024]], score=-0.046360
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033772
    Step 6: arch=[[512, 512]], score=-0.053356
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.028117
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [512, 512], [256, 256, 256]], score=0.053339

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.003823
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.064461
    Step 3: arch=[[128, 128, 128, 128]], score=-0.055978
    Step 4: arch=[[1024, 1024]], score=-0.046360
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033772
    Step 6: arch=[[512, 512]], score=-0.053356
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.028117
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_11 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.106083
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.083763
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.010038
    Step 5: arch=[[512, 512]], score=-0.012641
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.105056
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.028058
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.036639
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.111467

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.018559
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.016715
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004801
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004235
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010706
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.024971
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.043624
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.037249

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.019514
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.012915
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005861
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012066
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.011500
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012066
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014513
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.011927

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.060769
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.045281
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.044873
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.114875
    Step 7: arch=[[128, 128, 128, 128]], score=0.009269
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.030470
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.053453

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.009269
    Step 4: arch=[[1024, 1024]], score=0.015502
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021340
    Step 6: arch=[[512, 512]], score=-0.012641
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113472
    Step 9: arch=[[2048, 2048]], score=0.096641
    Step 10: arch=[[256, 256]], score=-0.023606

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.034665
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.037666
    Step 4: arch=[[256, 256], [512, 512]], score=-0.006533
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.011875
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.070520
    Step 9: arch=[[128, 128]], score=-0.028311
    Step 10: arch=[[512, 512, 512], [1024, 1024, 1024], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.009269
    Step 4: arch=[[1024, 1024]], score=0.015502
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021340
    Step 6: arch=[[512, 512]], score=-0.012641
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113472
    Step 9: arch=[[2048, 2048]], score=0.096641
    Step 10: arch=[[512], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256], [64]], score=0.114992

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.009269
    Step 4: arch=[[1024, 1024]], score=0.015502
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021340
    Step 6: arch=[[512, 512]], score=-0.012641
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113472
    Step 9: arch=[[2048, 2048]], score=0.096641
    Step 10: arch=[[512, 512], [2048, 2048, 2048], [128, 128, 128], [512], [512]], score=0.110486

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.009269
    Step 4: arch=[[1024, 1024]], score=0.015502
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021340
    Step 6: arch=[[512, 512]], score=-0.012641
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113472
    Step 9: arch=[[2048, 2048]], score=0.096641
    Step 10: arch=[[512]], score=-0.035320


=== Modifiers: modifiers_12 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.058030
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.100779
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.023138
    Step 5: arch=[[512, 512]], score=-0.031149
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.025771
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.017849
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.023450
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.116594

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003152
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.005086
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005362
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.003318
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.025268
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.015194
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.011973
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.013962

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.007272
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.003923
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003177
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016111
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.014067
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016111
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.017489
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.015892

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.027643
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.053113
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.026691
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.075367
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.024952
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.040386
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.013183

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.024952
    Step 4: arch=[[1024, 1024]], score=-0.018779
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027222
    Step 6: arch=[[512, 512]], score=-0.031149
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.118429
    Step 9: arch=[[2048, 2048]], score=0.011761
    Step 10: arch=[[256, 256]], score=-0.036608

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.006080
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.007843
    Step 4: arch=[[256, 256], [512, 512]], score=-0.013399
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.033329
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.052262
    Step 9: arch=[[128, 128]], score=-0.039157
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024], [512, 512], [512]], score=0.085963

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.024952
    Step 4: arch=[[1024, 1024]], score=-0.018779
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027222
    Step 6: arch=[[512, 512]], score=-0.031149
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.118429
    Step 9: arch=[[2048, 2048]], score=0.011761
    Step 10: arch=[[64], [64, 64, 64, 64], [256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128]], score=0.048542

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.024952
    Step 4: arch=[[1024, 1024]], score=-0.018779
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027222
    Step 6: arch=[[512, 512]], score=-0.031149
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.118429
    Step 9: arch=[[2048, 2048]], score=0.011761
    Step 10: arch=[[64], [256, 256, 256, 256], [64, 64, 64, 64], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024]], score=0.093232

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.024952
    Step 4: arch=[[1024, 1024]], score=-0.018779
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027222
    Step 6: arch=[[512, 512]], score=-0.031149
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.118429
    Step 9: arch=[[2048, 2048]], score=0.011761
    Step 10: arch=[[256]], score=-0.043893


=== Modifiers: modifiers_13 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.082672
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.110803
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.032119
    Step 5: arch=[[512, 512]], score=-0.037454
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.033388
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.033614
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.027443
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.114317

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.013348
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.003235
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.009347
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.008465
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.008595
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.018269
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.004867
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.010228

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003977
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.000738
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002922
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.010282
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.009399
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.010282
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.011463
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010412

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.047431
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.080328
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.068723
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.111172
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.099266
    Step 7: arch=[[128, 128, 128, 128]], score=-0.037280
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.045612
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.033407

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099431
    Step 3: arch=[[128, 128, 128, 128]], score=-0.037280
    Step 4: arch=[[1024, 1024]], score=-0.024799
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.038733
    Step 6: arch=[[512, 512]], score=-0.037454
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.117494
    Step 9: arch=[[2048, 2048]], score=0.011179
    Step 10: arch=[[256, 256]], score=-0.042449

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.029741
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.110570
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.019034
    Step 4: arch=[[256, 256], [512, 512]], score=-0.025549
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.042029
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.030991
    Step 9: arch=[[128, 128]], score=-0.044613
    Step 10: arch=[[2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.109902

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099431
    Step 3: arch=[[128, 128, 128, 128]], score=-0.037280
    Step 4: arch=[[1024, 1024]], score=-0.024799
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.038733
    Step 6: arch=[[512, 512]], score=-0.037454
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.117494
    Step 9: arch=[[2048, 2048]], score=0.011179
    Step 10: arch=[[128, 128, 128, 128, 128], [2048, 2048, 2048], [128, 128, 128, 128, 128], [2048], [1024, 1024]], score=0.116514

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099431
    Step 3: arch=[[128, 128, 128, 128]], score=-0.037280
    Step 4: arch=[[1024, 1024]], score=-0.024799
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.038733
    Step 6: arch=[[512, 512]], score=-0.037454
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.117494
    Step 9: arch=[[2048, 2048]], score=0.011179
    Step 10: arch=[[64, 64, 64, 64], [128, 128, 128, 128], [64, 64, 64, 64], [1024], [2048, 2048]], score=0.105887

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.099431
    Step 3: arch=[[128, 128, 128, 128]], score=-0.037280
    Step 4: arch=[[1024, 1024]], score=-0.024799
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.038733
    Step 6: arch=[[512, 512]], score=-0.037454
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.117494
    Step 9: arch=[[2048, 2048]], score=0.011179
    Step 10: arch=[[1024], [2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024], [512, 512, 512, 512, 512]], score=-100.000000


=== Modifiers: modifiers_14 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.083010
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.092004
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.010544
    Step 5: arch=[[512, 512]], score=-0.029310
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.078001
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.012859
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.077256
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.109429

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.011229
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.000959
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.001357
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.000117
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.014484
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.000465
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.011810
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.001641

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.017257
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.013615
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003290
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009445
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007971
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009445
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.010824
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.009522

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.071792
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.079645
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.064929
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.107229
    Step 7: arch=[[128, 128, 128, 128]], score=-0.004053
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.039089
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.083773

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004053
    Step 4: arch=[[1024, 1024]], score=-0.014431
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004024
    Step 6: arch=[[512, 512]], score=-0.029310
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027179
    Step 10: arch=[[256, 256]], score=-0.035269

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.066862
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.061371
    Step 4: arch=[[256, 256], [512, 512]], score=-0.011560
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.022270
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.067745
    Step 9: arch=[[128, 128]], score=-0.037877
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.103948

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004053
    Step 4: arch=[[1024, 1024]], score=-0.014431
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004024
    Step 6: arch=[[512, 512]], score=-0.029310
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027179
    Step 10: arch=[[512, 512], [2048, 2048], [256, 256, 256], [256, 256, 256]], score=0.101298

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004053
    Step 4: arch=[[1024, 1024]], score=-0.014431
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004024
    Step 6: arch=[[512, 512]], score=-0.029310
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027179
    Step 10: arch=[[2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.004053
    Step 4: arch=[[1024, 1024]], score=-0.014431
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004024
    Step 6: arch=[[512, 512]], score=-0.029310
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027179
    Step 10: arch=[[1024, 1024], [128], [64, 64, 64]], score=0.007860


=== Modifiers: modifiers_15 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.105611
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.083803
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.008139
    Step 5: arch=[[512, 512]], score=-0.020533
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.070203
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.011494
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.037874
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.015076
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.009767
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007619
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006852
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.002025
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.031137
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.046311
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.029576

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.010591
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002559
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.007612
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011128
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.010361
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011128
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014636
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.012701

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.063695
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.108312
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.065283
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.102090
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.107433
    Step 7: arch=[[128, 128, 128, 128]], score=-0.021672
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.045353
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.056201

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.111237
    Step 3: arch=[[128, 128, 128, 128]], score=-0.021672
    Step 4: arch=[[1024, 1024]], score=0.012258
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021222
    Step 6: arch=[[512, 512]], score=-0.020533
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.092001
    Step 10: arch=[[256, 256]], score=-0.035158

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.046024
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.112014
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.043547
    Step 4: arch=[[256, 256], [512, 512]], score=-0.012761
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.035286
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.069267
    Step 9: arch=[[128, 128]], score=-0.042029
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.114589

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.111237
    Step 3: arch=[[128, 128, 128, 128]], score=-0.021672
    Step 4: arch=[[1024, 1024]], score=0.012258
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021222
    Step 6: arch=[[512, 512]], score=-0.020533
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.092001
    Step 10: arch=[[2048, 2048, 2048], [64], [128, 128, 128, 128, 128]], score=0.107709

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.111237
    Step 3: arch=[[128, 128, 128, 128]], score=-0.021672
    Step 4: arch=[[1024, 1024]], score=0.012258
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021222
    Step 6: arch=[[512, 512]], score=-0.020533
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.092001
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64], [128, 128], [1024, 1024, 1024, 1024, 1024], [64]], score=0.107617

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.111237
    Step 3: arch=[[128, 128, 128, 128]], score=-0.021672
    Step 4: arch=[[1024, 1024]], score=0.012258
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021222
    Step 6: arch=[[512, 512]], score=-0.020533
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.092001
    Step 10: arch=[[2048, 2048], [512], [128, 128, 128], [2048, 2048, 2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_16 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.096868
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.110845
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.011351
    Step 5: arch=[[512, 512]], score=-0.024090
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.063490
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.002205
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.039673
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.005534
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.003207
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007201
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006710
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.003294
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.007707
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.013333
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.002293

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.011419
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.006745
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004367
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008087
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007596
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008087
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009992
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007629

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.058762
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.071827
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.104055
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.113355
    Step 7: arch=[[128, 128, 128, 128]], score=-0.013323
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.037280
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.057909

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013323
    Step 4: arch=[[1024, 1024]], score=-0.005777
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.005044
    Step 6: arch=[[512, 512]], score=-0.024090
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.041211
    Step 10: arch=[[256, 256]], score=-0.031951

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.046792
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.041160
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015663
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.026244
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.055971
    Step 9: arch=[[128, 128]], score=-0.035557
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.072150

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013323
    Step 4: arch=[[1024, 1024]], score=-0.005777
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.005044
    Step 6: arch=[[512, 512]], score=-0.024090
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.041211
    Step 10: arch=[[512], [2048, 2048], [64]], score=0.027674

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013323
    Step 4: arch=[[1024, 1024]], score=-0.005777
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.005044
    Step 6: arch=[[512, 512]], score=-0.024090
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.041211
    Step 10: arch=[[128, 128, 128]], score=-0.024440

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013323
    Step 4: arch=[[1024, 1024]], score=-0.005777
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.005044
    Step 6: arch=[[512, 512]], score=-0.024090
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.041211
    Step 10: arch=[[512, 512, 512], [64, 64]], score=-0.000181


=== Modifiers: modifiers_17 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.076956
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.109895
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.027836
    Step 4: arch=[[512, 512, 512]], score=-0.020813
    Step 5: arch=[[512, 512]], score=-0.029581
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.056545
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.007510
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.086495
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.012017
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.006506
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002099
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000247
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.016732
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.013095
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.001035
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.011722

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.008184
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.007061
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000986
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008690
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.006838
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008690
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009046
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007397

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.033378
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.014392
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.043592
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.051495
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.015560
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.031923
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.041152

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.027836
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097109
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015560
    Step 4: arch=[[1024, 1024]], score=-0.025471
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006929
    Step 6: arch=[[512, 512]], score=-0.029581
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.012660
    Step 10: arch=[[256, 256]], score=-0.031063

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.033102
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.057440
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033512
    Step 4: arch=[[256, 256], [512, 512]], score=-0.007545
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.099763
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.023909
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.051784
    Step 9: arch=[[128, 128]], score=-0.031660
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=0.003525

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.027836
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097109
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015560
    Step 4: arch=[[1024, 1024]], score=-0.025471
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006929
    Step 6: arch=[[512, 512]], score=-0.029581
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.012660
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048], [64, 64, 64, 64, 64], [2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.027836
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097109
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015560
    Step 4: arch=[[1024, 1024]], score=-0.025471
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006929
    Step 6: arch=[[512, 512]], score=-0.029581
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.012660
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [2048, 2048], [512, 512]], score=0.118514

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.027836
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097109
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015560
    Step 4: arch=[[1024, 1024]], score=-0.025471
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006929
    Step 6: arch=[[512, 512]], score=-0.029581
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.012660
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_18 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.096658
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.109636
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.014336
    Step 5: arch=[[512, 512]], score=-0.023212
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.073684
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.132779
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.002628
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.070525
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.007450
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.002310
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003617
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002533
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.009776
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.003808
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.003736
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.006184

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.008394
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.006438
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001844
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006728
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005644
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006728
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007487
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.004749

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.036542
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.047274
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.058578
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.124121
    Step 7: arch=[[128, 128, 128, 128]], score=-0.010911
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.028120
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.043009

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.010911
    Step 4: arch=[[1024, 1024]], score=-0.016420
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003215
    Step 6: arch=[[512, 512]], score=-0.023212
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000946
    Step 10: arch=[[256, 256]], score=-0.026135

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.034725
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033443
    Step 4: arch=[[256, 256], [512, 512]], score=-0.008737
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.130149
    Step 7: arch=[[64, 64, 64]], score=-0.019866
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.052054
    Step 9: arch=[[128, 128]], score=-0.027478
    Step 10: arch=[[1024], [256], [2048, 2048]], score=0.024290

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.010911
    Step 4: arch=[[1024, 1024]], score=-0.016420
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003215
    Step 6: arch=[[512, 512]], score=-0.023212
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000946
    Step 10: arch=[[2048, 2048], [512, 512]], score=0.024211

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.010911
    Step 4: arch=[[1024, 1024]], score=-0.016420
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003215
    Step 6: arch=[[512, 512]], score=-0.023212
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000946
    Step 10: arch=[[128, 128, 128]], score=-0.019194

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.010911
    Step 4: arch=[[1024, 1024]], score=-0.016420
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003215
    Step 6: arch=[[512, 512]], score=-0.023212
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.000946
    Step 10: arch=[[1024, 1024, 1024], [64, 64, 64]], score=0.014276


=== Modifiers: modifiers_19 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.068838
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.098429
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.029900
    Step 5: arch=[[512, 512]], score=-0.036823
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=-0.001732
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.043941
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.020179
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003500
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.021409
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.015120
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.014883
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=-0.005384
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.003710
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.007257
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.001142

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.005630
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002710
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.008039
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012295
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.012058
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012295
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.016097
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.015596

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.081462
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.097855
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.093448
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.098584
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.049276
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.063615
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.052563

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.049276
    Step 4: arch=[[1024, 1024]], score=-0.003032
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.049208
    Step 6: arch=[[512, 512]], score=-0.036823
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.074700
    Step 10: arch=[[256, 256]], score=-0.052450

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.047229
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.025773
    Step 4: arch=[[256, 256], [512, 512]], score=-0.039633
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.058359
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.014221
    Step 9: arch=[[128, 128]], score=-0.059946
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024], [512, 512], [512]], score=0.093453

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.049276
    Step 4: arch=[[1024, 1024]], score=-0.003032
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.049208
    Step 6: arch=[[512, 512]], score=-0.036823
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.074700
    Step 10: arch=[[2048], [128, 128], [128]], score=0.055629

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.049276
    Step 4: arch=[[1024, 1024]], score=-0.003032
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.049208
    Step 6: arch=[[512, 512]], score=-0.036823
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.074700
    Step 10: arch=[[64, 64, 64, 64, 64]], score=-0.047849

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.049276
    Step 4: arch=[[1024, 1024]], score=-0.003032
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.049208
    Step 6: arch=[[512, 512]], score=-0.036823
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.074700
    Step 10: arch=[[256, 256, 256, 256, 256]], score=-0.035491


=== Modifiers: modifiers_20 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.054910
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.114081
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.033644
    Step 5: arch=[[512, 512]], score=-0.036371
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.017213
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.038068
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.077846
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.114758

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003885
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.017119
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003327
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001296
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.014039
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.019210
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.015250
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.020409

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.001956
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000816
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002592
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009862
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007832
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009862
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.011015
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010156

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.050415
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.031631
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.068729
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.112198
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.076456
    Step 7: arch=[[128, 128, 128, 128]], score=-0.039847
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.044467
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.040218

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.039847
    Step 4: arch=[[1024, 1024]], score=-0.025226
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.062062
    Step 6: arch=[[512, 512]], score=-0.036371
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.115571
    Step 9: arch=[[2048, 2048]], score=0.003121
    Step 10: arch=[[256, 256]], score=-0.041187

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.038439
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.023104
    Step 4: arch=[[256, 256], [512, 512]], score=-0.024012
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.042736
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.017084
    Step 9: arch=[[128, 128]], score=-0.043406
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.054029

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.039847
    Step 4: arch=[[1024, 1024]], score=-0.025226
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.062062
    Step 6: arch=[[512, 512]], score=-0.036371
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.115571
    Step 9: arch=[[2048, 2048]], score=0.003121
    Step 10: arch=[[512], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256], [64]], score=0.117563

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.039847
    Step 4: arch=[[1024, 1024]], score=-0.025226
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.062062
    Step 6: arch=[[512, 512]], score=-0.036371
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.115571
    Step 9: arch=[[2048, 2048]], score=0.003121
    Step 10: arch=[[128, 128], [256, 256, 256], [64, 64, 64, 64, 64], [2048, 2048, 2048]], score=0.113772

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.039847
    Step 4: arch=[[1024, 1024]], score=-0.025226
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.062062
    Step 6: arch=[[512, 512]], score=-0.036371
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.115571
    Step 9: arch=[[2048, 2048]], score=0.003121
    Step 10: arch=[[256], [512, 512, 512]], score=-0.019962


=== Modifiers: modifiers_21 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.100359
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.080330
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.025236
    Step 5: arch=[[512, 512]], score=-0.035572
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.068495
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.020937
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.038157
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.105250

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.013900
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.005033
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004177
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.003966
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.012040
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.004197
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.009798
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.000072

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.009505
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.004561
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004750
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012146
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.011935
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012146
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014353
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.012333

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.070214
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.070701
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.084652
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.101406
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.103839
    Step 7: arch=[[128, 128, 128, 128]], score=-0.030251
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.050979
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.065012

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.102354
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030251
    Step 4: arch=[[1024, 1024]], score=-0.015924
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040322
    Step 6: arch=[[512, 512]], score=-0.035572
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.029899
    Step 10: arch=[[256, 256]], score=-0.044580

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055698
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.102064
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.042557
    Step 4: arch=[[256, 256], [512, 512]], score=-0.022794
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.041716
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.042646
    Step 9: arch=[[128, 128]], score=-0.048880
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.103261

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.102354
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030251
    Step 4: arch=[[1024, 1024]], score=-0.015924
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040322
    Step 6: arch=[[512, 512]], score=-0.035572
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.029899
    Step 10: arch=[[2048, 2048], [2048, 2048], [128, 128, 128, 128], [512]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.102354
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030251
    Step 4: arch=[[1024, 1024]], score=-0.015924
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040322
    Step 6: arch=[[512, 512]], score=-0.035572
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.029899
    Step 10: arch=[[64, 64, 64, 64, 64], [1024, 1024], [64, 64, 64], [64, 64]], score=0.064271

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.102354
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030251
    Step 4: arch=[[1024, 1024]], score=-0.015924
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040322
    Step 6: arch=[[512, 512]], score=-0.035572
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.029899
    Step 10: arch=[[2048, 2048, 2048], [512, 512]], score=0.082543


=== Modifiers: modifiers_22 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.061655
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.109968
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.071760
    Step 4: arch=[[512, 512, 512]], score=-0.018231
    Step 5: arch=[[512, 512]], score=-0.033846
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.055687
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.004861
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.024582
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.109240

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.009508
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.010041
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010118
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.009837
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=-0.004524
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.020287
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.010689
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.015445

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.014550
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.012575
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001727
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.003911
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.003630
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.003911
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.004582
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.003845

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.076200
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.077455
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.106656
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.108394
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009445
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.038608
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.079291

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.071760
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.082068
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009445
    Step 4: arch=[[1024, 1024]], score=-0.025791
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030506
    Step 6: arch=[[512, 512]], score=-0.033846
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.108332
    Step 9: arch=[[2048, 2048]], score=-0.001314
    Step 10: arch=[[256, 256]], score=-0.036829

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.064985
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.107661
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.047373
    Step 4: arch=[[256, 256], [512, 512]], score=-0.029204
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.024367
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.014341
    Step 9: arch=[[128, 128]], score=-0.038058
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.109525

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.071760
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.082068
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009445
    Step 4: arch=[[1024, 1024]], score=-0.025791
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030506
    Step 6: arch=[[512, 512]], score=-0.033846
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.108332
    Step 9: arch=[[2048, 2048]], score=-0.001314
    Step 10: arch=[[2048, 2048, 2048, 2048], [256, 256], [128, 128, 128, 128], [2048, 2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.071760
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.082068
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009445
    Step 4: arch=[[1024, 1024]], score=-0.025791
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030506
    Step 6: arch=[[512, 512]], score=-0.033846
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.108332
    Step 9: arch=[[2048, 2048]], score=-0.001314
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.071760
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.082068
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009445
    Step 4: arch=[[1024, 1024]], score=-0.025791
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.030506
    Step 6: arch=[[512, 512]], score=-0.033846
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.108332
    Step 9: arch=[[2048, 2048]], score=-0.001314
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024]], score=0.011647


=== Modifiers: modifiers_23 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.065900
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.085512
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.009702
    Step 5: arch=[[512, 512]], score=-0.032210
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.037508
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.004560
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.000762
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.091955

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.005202
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.009043
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010895
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.010740
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.017122
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.009415
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.014694
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.010625

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.020697
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.011496
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.008779
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.020775
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.020620
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.020775
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.024782
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.023691

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.082810
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.076183
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.084958
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.085045
    Step 7: arch=[[128, 128, 128, 128]], score=-0.015724
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.060045
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.061577

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015724
    Step 4: arch=[[1024, 1024]], score=0.004044
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.016890
    Step 6: arch=[[512, 512]], score=-0.032210
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.092045
    Step 9: arch=[[2048, 2048]], score=0.083552
    Step 10: arch=[[256, 256]], score=-0.048560

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.041295
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.036396
    Step 4: arch=[[256, 256], [512, 512]], score=-0.024972
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.039873
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.076141
    Step 9: arch=[[128, 128]], score=-0.056291
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.059786

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015724
    Step 4: arch=[[1024, 1024]], score=0.004044
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.016890
    Step 6: arch=[[512, 512]], score=-0.032210
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.092045
    Step 9: arch=[[2048, 2048]], score=0.083552
    Step 10: arch=[[128, 128], [256, 256, 256, 256, 256], [64, 64, 64, 64]], score=0.011064

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015724
    Step 4: arch=[[1024, 1024]], score=0.004044
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.016890
    Step 6: arch=[[512, 512]], score=-0.032210
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.092045
    Step 9: arch=[[2048, 2048]], score=0.083552
    Step 10: arch=[[512], [2048, 2048, 2048], [128, 128, 128, 128, 128], [2048, 2048]], score=0.091224

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.015724
    Step 4: arch=[[1024, 1024]], score=0.004044
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.016890
    Step 6: arch=[[512, 512]], score=-0.032210
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.092045
    Step 9: arch=[[2048, 2048]], score=0.083552
    Step 10: arch=[[256]], score=-0.069289


=== Modifiers: modifiers_24 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.067190
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.125639
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.002307
    Step 5: arch=[[512, 512]], score=-0.010272
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.061853
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.005159
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.065677
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.052691

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.007586
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.001899
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003756
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001442
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.003144
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.003394
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.011054
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.009250

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.007383
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.005024
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002224
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004449
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.002135
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004449
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.005472
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.003351

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.031281
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.058104
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.035697
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.048821
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.002091
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.017560
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.028011

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.002091
    Step 4: arch=[[1024, 1024]], score=-0.000513
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005986
    Step 6: arch=[[512, 512]], score=-0.010272
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.065656
    Step 9: arch=[[2048, 2048]], score=0.023581
    Step 10: arch=[[256, 256]], score=-0.014580

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.020761
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.074759
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.016873
    Step 4: arch=[[256, 256], [512, 512]], score=-0.009199
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.130294
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.010347
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.014166
    Step 9: arch=[[128, 128]], score=-0.016591
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.014725

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.002091
    Step 4: arch=[[1024, 1024]], score=-0.000513
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005986
    Step 6: arch=[[512, 512]], score=-0.010272
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.065656
    Step 9: arch=[[2048, 2048]], score=0.023581
    Step 10: arch=[[256, 256, 256], [2048, 2048], [128, 128, 128, 128, 128], [1024, 1024, 1024], [128]], score=0.097955

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.002091
    Step 4: arch=[[1024, 1024]], score=-0.000513
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005986
    Step 6: arch=[[512, 512]], score=-0.010272
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.065656
    Step 9: arch=[[2048, 2048]], score=0.023581
    Step 10: arch=[[512], [2048, 2048, 2048], [128, 128, 128, 128, 128], [2048, 2048]], score=0.128477

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.002091
    Step 4: arch=[[1024, 1024]], score=-0.000513
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.005986
    Step 6: arch=[[512, 512]], score=-0.010272
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.065656
    Step 9: arch=[[2048, 2048]], score=0.023581
    Step 10: arch=[[256, 256], [128, 128]], score=-0.012266


=== Modifiers: modifiers_25 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.099538
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.119276
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.101823
    Step 4: arch=[[512, 512, 512]], score=-0.007788
    Step 5: arch=[[512, 512]], score=-0.016895
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.079495
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.001695
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.057062
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.024920
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.018960
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005700
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004487
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.006290
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.000741
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.024325
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.021547

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.007782
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.004726
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002747
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007582
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.006368
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007582
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008735
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.008067

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.033437
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.088920
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.037626
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.068979
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.127614
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009173
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.025147
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.025049

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.101823
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.124869
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009173
    Step 4: arch=[[1024, 1024]], score=-0.004212
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006543
    Step 6: arch=[[512, 512]], score=-0.016895
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.031560
    Step 10: arch=[[256, 256]], score=-0.021936

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.017571
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.112347
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.015468
    Step 4: arch=[[256, 256], [512, 512]], score=-0.011338
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.017750
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.028761
    Step 9: arch=[[128, 128]], score=-0.024131
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.124321

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.101823
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.124869
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009173
    Step 4: arch=[[1024, 1024]], score=-0.004212
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006543
    Step 6: arch=[[512, 512]], score=-0.016895
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.031560
    Step 10: arch=[[2048]], score=-0.003571

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.101823
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.124869
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009173
    Step 4: arch=[[1024, 1024]], score=-0.004212
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006543
    Step 6: arch=[[512, 512]], score=-0.016895
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.031560
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.126842

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.101823
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.124869
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009173
    Step 4: arch=[[1024, 1024]], score=-0.004212
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006543
    Step 6: arch=[[512, 512]], score=-0.016895
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.031560
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_26 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.069561
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120378
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.013698
    Step 5: arch=[[512, 512]], score=-0.020961
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.032282
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.014659
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.026044
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.091881

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.006274
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.005402
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.008263
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006393
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=-0.000878
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.002745
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.009064
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.003686

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.005816
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.001772
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003707
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006346
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004475
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006346
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007969
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006577

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.047870
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.105791
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.066665
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.119956
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.099488
    Step 7: arch=[[128, 128, 128, 128]], score=-0.020144
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.032598
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.036365

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119869
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020144
    Step 4: arch=[[1024, 1024]], score=-0.004109
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.014655
    Step 6: arch=[[512, 512]], score=-0.020961
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040957
    Step 10: arch=[[256, 256]], score=-0.027966

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.030881
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.121035
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.021610
    Step 4: arch=[[256, 256], [512, 512]], score=-0.019125
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.027203
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.019977
    Step 9: arch=[[128, 128]], score=-0.031113
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.121722

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119869
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020144
    Step 4: arch=[[1024, 1024]], score=-0.004109
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.014655
    Step 6: arch=[[512, 512]], score=-0.020961
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040957
    Step 10: arch=[[1024, 1024, 1024], [64], [64, 64, 64, 64, 64], [256, 256, 256, 256, 256], [1024]], score=0.111249

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119869
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020144
    Step 4: arch=[[1024, 1024]], score=-0.004109
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.014655
    Step 6: arch=[[512, 512]], score=-0.020961
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040957
    Step 10: arch=[[512], [2048], [256, 256, 256]], score=0.022265

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119869
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020144
    Step 4: arch=[[1024, 1024]], score=-0.004109
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.014655
    Step 6: arch=[[512, 512]], score=-0.020961
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040957
    Step 10: arch=[[256, 256, 256, 256], [128, 128], [256, 256, 256, 256], [64, 64]], score=0.037127


=== Modifiers: modifiers_27 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.105619
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.070219
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.014305
    Step 5: arch=[[512, 512]], score=-0.025952
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.078254
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.010290
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.013703
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.108501

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.007773
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.004206
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005852
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.005728
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.008705
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.009318
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.017175
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.008548

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.010641
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.004835
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005572
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011926
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.011803
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011926
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014510
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010980

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.060499
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.065865
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.098895
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.110422
    Step 7: arch=[[128, 128, 128, 128]], score=-0.020701
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.043975
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.052286

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020701
    Step 4: arch=[[1024, 1024]], score=-0.002886
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.015016
    Step 6: arch=[[512, 512]], score=-0.025952
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.051146
    Step 10: arch=[[256, 256]], score=-0.036498

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.041875
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.034890
    Step 4: arch=[[256, 256], [512, 512]], score=-0.017612
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.033626
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.049232
    Step 9: arch=[[128, 128]], score=-0.041524
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.071156

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020701
    Step 4: arch=[[1024, 1024]], score=-0.002886
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.015016
    Step 6: arch=[[512, 512]], score=-0.025952
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.051146
    Step 10: arch=[[2048, 2048], [512, 512]], score=0.076250

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020701
    Step 4: arch=[[1024, 1024]], score=-0.002886
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.015016
    Step 6: arch=[[512, 512]], score=-0.025952
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.051146
    Step 10: arch=[[64, 64, 64, 64, 64]], score=-0.012927

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020701
    Step 4: arch=[[1024, 1024]], score=-0.002886
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.015016
    Step 6: arch=[[512, 512]], score=-0.025952
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.051146
    Step 10: arch=[[64, 64]], score=-0.043975


=== Modifiers: modifiers_28 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.066473
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.131803
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.012906
    Step 5: arch=[[512, 512]], score=-0.016620
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.042673
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.014904
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.081931
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.054382

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.012389
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.002146
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005785
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.003359
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.000061
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.002837
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.009603
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.007123

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.002769
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.000404
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002144
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.003760
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.001333
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.003760
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.004695
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.003556

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.033010
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.067936
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.045799
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.079619
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.017457
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.023417
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.024141

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017457
    Step 4: arch=[[1024, 1024]], score=-0.006533
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020887
    Step 6: arch=[[512, 512]], score=-0.016620
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.080079
    Step 9: arch=[[2048, 2048]], score=0.021068
    Step 10: arch=[[256, 256]], score=-0.020736

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.021589
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.092122
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.012713
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015731
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.020923
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.003982
    Step 9: arch=[[128, 128]], score=-0.022562
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.121136

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017457
    Step 4: arch=[[1024, 1024]], score=-0.006533
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020887
    Step 6: arch=[[512, 512]], score=-0.016620
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.080079
    Step 9: arch=[[2048, 2048]], score=0.021068
    Step 10: arch=[[256, 256], [512, 512, 512, 512, 512], [128, 128, 128, 128, 128], [256, 256, 256], [64, 64]], score=0.079614

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017457
    Step 4: arch=[[1024, 1024]], score=-0.006533
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020887
    Step 6: arch=[[512, 512]], score=-0.016620
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.080079
    Step 9: arch=[[2048, 2048]], score=0.021068
    Step 10: arch=[[64], [128, 128, 128, 128]], score=-0.018180

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017457
    Step 4: arch=[[1024, 1024]], score=-0.006533
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020887
    Step 6: arch=[[512, 512]], score=-0.016620
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.080079
    Step 9: arch=[[2048, 2048]], score=0.021068
    Step 10: arch=[[64], [64, 64]], score=-0.023431


=== Modifiers: modifiers_29 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.088501
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.111721
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.001342
    Step 5: arch=[[512, 512]], score=-0.013914
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.081401
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.016064
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.082381
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.115618

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.015855
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.011964
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003278
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001307
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.006878
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.014582
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.030516
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.021454

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.013968
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.009626
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004042
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007260
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005289
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007260
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009057
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007448

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.052096
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.051089
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.044993
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.002390
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.026613
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055560

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.002390
    Step 4: arch=[[1024, 1024]], score=0.003758
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.014433
    Step 6: arch=[[512, 512]], score=-0.013914
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.049215
    Step 10: arch=[[256, 256]], score=-0.021487

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.041887
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.040528
    Step 4: arch=[[256, 256], [512, 512]], score=-0.007151
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.103536
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.013019
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.052919
    Step 9: arch=[[128, 128]], score=-0.024957
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128]], score=0.044109

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.002390
    Step 4: arch=[[1024, 1024]], score=0.003758
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.014433
    Step 6: arch=[[512, 512]], score=-0.013914
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.049215
    Step 10: arch=[[256, 256], [2048, 2048]], score=0.023963

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.002390
    Step 4: arch=[[1024, 1024]], score=0.003758
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.014433
    Step 6: arch=[[512, 512]], score=-0.013914
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.049215
    Step 10: arch=[[128, 128, 128, 128, 128]], score=0.016064

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.002390
    Step 4: arch=[[1024, 1024]], score=0.003758
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.014433
    Step 6: arch=[[512, 512]], score=-0.013914
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.049215
    Step 10: arch=[[512, 512, 512], [128, 128, 128], [512, 512], [256, 256]], score=0.052480


=== Modifiers: modifiers_30 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.109341
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.055660
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.110375
    Step 4: arch=[[512, 512, 512]], score=-0.002807
    Step 5: arch=[[512, 512]], score=-0.019077
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.106735
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.123414
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.011367
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.031462
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.020487
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.013750
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003533
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.003089
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.014166
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.011411
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.032000
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.025839

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.015093
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.009685
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005133
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012554
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.012109
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012554
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014880
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.012043

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.054833
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.106931
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.048162
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.054663
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.115336
    Step 7: arch=[[128, 128, 128, 128]], score=-0.003457
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.035274
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.050523

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.110375
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113616
    Step 3: arch=[[128, 128, 128, 128]], score=-0.003457
    Step 4: arch=[[1024, 1024]], score=0.002322
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001216
    Step 6: arch=[[512, 512]], score=-0.019077
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.054362
    Step 10: arch=[[256, 256]], score=-0.028621

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.035700
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.110702
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.034708
    Step 4: arch=[[256, 256], [512, 512]], score=-0.010234
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.020523
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.060804
    Step 9: arch=[[128, 128]], score=-0.033104
    Step 10: arch=[[2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [1024, 1024]], score=0.109605

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.110375
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113616
    Step 3: arch=[[128, 128, 128, 128]], score=-0.003457
    Step 4: arch=[[1024, 1024]], score=0.002322
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001216
    Step 6: arch=[[512, 512]], score=-0.019077
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.054362
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=0.112917

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.110375
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113616
    Step 3: arch=[[128, 128, 128, 128]], score=-0.003457
    Step 4: arch=[[1024, 1024]], score=0.002322
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001216
    Step 6: arch=[[512, 512]], score=-0.019077
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.054362
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.114938

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.110375
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113616
    Step 3: arch=[[128, 128, 128, 128]], score=-0.003457
    Step 4: arch=[[1024, 1024]], score=0.002322
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001216
    Step 6: arch=[[512, 512]], score=-0.019077
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.054362
    Step 10: arch=[[128, 128, 128, 128], [1024, 1024, 1024], [512], [512, 512, 512], [2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_31 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.078278
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.089429
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.040006
    Step 5: arch=[[512, 512]], score=-0.046732
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.012709
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.101552
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.039097
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.026070
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.006411
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.004690
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007458
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.005458
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.019320
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.016912
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.010460
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.025841

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.005499
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002053
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003160
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014420
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.012419
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014420
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.015747
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.014943

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.045873
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.064292
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.100881
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.052404
    Step 7: arch=[[128, 128, 128, 128]], score=-0.044316
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.055915
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.041364

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.044316
    Step 4: arch=[[1024, 1024]], score=-0.033228
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020546
    Step 6: arch=[[512, 512]], score=-0.046732
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.003416
    Step 10: arch=[[256, 256]], score=-0.052280

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.036146
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033776
    Step 4: arch=[[256, 256], [512, 512]], score=-0.018302
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.103520
    Step 7: arch=[[64, 64, 64]], score=-0.050771
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.066260
    Step 9: arch=[[128, 128]], score=-0.054753
    Step 10: arch=[[1024], [256], [2048, 2048]], score=0.069284

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.044316
    Step 4: arch=[[1024, 1024]], score=-0.033228
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020546
    Step 6: arch=[[512, 512]], score=-0.046732
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.003416
    Step 10: arch=[[256, 256], [512], [256], [64, 64, 64, 64]], score=-0.009033

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.044316
    Step 4: arch=[[1024, 1024]], score=-0.033228
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020546
    Step 6: arch=[[512, 512]], score=-0.046732
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.003416
    Step 10: arch=[[2048, 2048, 2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.044316
    Step 4: arch=[[1024, 1024]], score=-0.033228
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020546
    Step 6: arch=[[512, 512]], score=-0.046732
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.003416
    Step 10: arch=[[256, 256, 256]], score=-0.046760


=== Modifiers: modifiers_32 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.100604
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.111320
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.024074
    Step 5: arch=[[512, 512]], score=-0.033611
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.061362
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.122509
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.012182
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.038101
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.113730

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.017094
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.014398
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.006755
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006510
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.015489
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.014495
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.002700
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.007554

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.008769
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.006840
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001750
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012262
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.012017
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012262
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.012980
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.011619

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.027549
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.045306
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.039197
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.083126
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.113656
    Step 7: arch=[[128, 128, 128, 128]], score=-0.020776
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.038580
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.027136

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.092005
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020776
    Step 4: arch=[[1024, 1024]], score=-0.026050
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.000994
    Step 6: arch=[[512, 512]], score=-0.033611
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004905
    Step 10: arch=[[256, 256]], score=-0.036638

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.018543
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.091379
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.024022
    Step 4: arch=[[256, 256], [512, 512]], score=-0.009018
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.119527
    Step 7: arch=[[64, 64, 64]], score=-0.030033
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.056305
    Step 9: arch=[[128, 128]], score=-0.037964
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128], [2048], [128]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.092005
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020776
    Step 4: arch=[[1024, 1024]], score=-0.026050
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.000994
    Step 6: arch=[[512, 512]], score=-0.033611
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004905
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512], [256, 256, 256, 256, 256], [64], [256]], score=0.058715

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.092005
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020776
    Step 4: arch=[[1024, 1024]], score=-0.026050
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.000994
    Step 6: arch=[[512, 512]], score=-0.033611
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004905
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64], [128, 128], [1024, 1024, 1024, 1024, 1024], [64]], score=0.112560

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.092005
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020776
    Step 4: arch=[[1024, 1024]], score=-0.026050
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.000994
    Step 6: arch=[[512, 512]], score=-0.033611
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004905
    Step 10: arch=[[2048], [128]], score=-0.025995


=== Modifiers: modifiers_33 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.097341
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.098164
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.083198
    Step 4: arch=[[512, 512, 512]], score=-0.020793
    Step 5: arch=[[512, 512]], score=-0.036899
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.058715
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.002279
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.041385
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.012683
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.004714
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.009281
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.009019
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.004719
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.000184
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.012578
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.007152

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.015263
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.010917
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004150
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009318
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.009056
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009318
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.011141
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010206

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.070692
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.087584
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.095199
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.098613
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.098366
    Step 7: arch=[[128, 128, 128, 128]], score=-0.017350
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.049135
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.082262

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.083198
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.098165
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017350
    Step 4: arch=[[1024, 1024]], score=-0.020847
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020040
    Step 6: arch=[[512, 512]], score=-0.036899
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.017877
    Step 10: arch=[[256, 256]], score=-0.044098

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.067192
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.101423
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.063454
    Step 4: arch=[[256, 256], [512, 512]], score=-0.017041
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.034117
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.083661
    Step 9: arch=[[128, 128]], score=-0.047491
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=0.106307

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.083198
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.098165
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017350
    Step 4: arch=[[1024, 1024]], score=-0.020847
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020040
    Step 6: arch=[[512, 512]], score=-0.036899
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.017877
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.103472

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.083198
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.098165
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017350
    Step 4: arch=[[1024, 1024]], score=-0.020847
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020040
    Step 6: arch=[[512, 512]], score=-0.036899
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.017877
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.103472

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.083198
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.098165
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017350
    Step 4: arch=[[1024, 1024]], score=-0.020847
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020040
    Step 6: arch=[[512, 512]], score=-0.036899
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.017877
    Step 10: arch=[[64, 64, 64], [1024, 1024, 1024, 1024, 1024], [512], [512, 512, 512], [64, 64]], score=0.101198


=== Modifiers: modifiers_34 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.087268
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.104872
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.008357
    Step 5: arch=[[512, 512]], score=-0.017291
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.074577
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.001373
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.080967
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.106110

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.011275
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.000492
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.001590
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.000377
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.005504
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.004746
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.016109
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.008599

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.008124
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.005042
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002894
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004931
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.002964
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004931
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.006228
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.004101

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.050581
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.054476
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.060256
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.068353
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.124742
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009312
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.026392
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.053109

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.123925
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009312
    Step 4: arch=[[1024, 1024]], score=-0.004905
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013578
    Step 6: arch=[[512, 512]], score=-0.017291
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.026220
    Step 10: arch=[[256, 256]], score=-0.022690

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.045171
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.093617
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.036083
    Step 4: arch=[[256, 256], [512, 512]], score=-0.012180
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.018502
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.030662
    Step 9: arch=[[128, 128]], score=-0.025191
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.103466

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.123925
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009312
    Step 4: arch=[[1024, 1024]], score=-0.004905
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013578
    Step 6: arch=[[512, 512]], score=-0.017291
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.026220
    Step 10: arch=[[512, 512, 512, 512, 512], [128], [64, 64, 64, 64, 64], [1024]], score=0.081559

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.123925
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009312
    Step 4: arch=[[1024, 1024]], score=-0.004905
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013578
    Step 6: arch=[[512, 512]], score=-0.017291
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.026220
    Step 10: arch=[[1024, 1024], [512], [128, 128], [1024, 1024], [64, 64, 64, 64, 64]], score=0.119709

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.123925
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009312
    Step 4: arch=[[1024, 1024]], score=-0.004905
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013578
    Step 6: arch=[[512, 512]], score=-0.017291
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.026220
    Step 10: arch=[[1024, 1024], [64]], score=-0.004734


=== Modifiers: modifiers_35 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.065692
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.065468
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.024921
    Step 5: arch=[[512, 512]], score=-0.015813
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.066376
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.053465
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.028563
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.018502
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.001839
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002825
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002221
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.022515
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.055040
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.065371
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.065075

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.037829
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.022365
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.014787
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.025709
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.025105
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.025709
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.032624
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.032040

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.068195
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.074958
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.066734
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.066367
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.016300
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.064649
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.067491

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.016300
    Step 4: arch=[[1024, 1024]], score=0.047128
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.003618
    Step 6: arch=[[512, 512]], score=-0.015813
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.070559
    Step 10: arch=[[256, 256]], score=-0.044432

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.065912
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.077094
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.065566
    Step 4: arch=[[256, 256], [512, 512]], score=-0.019185
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.069894
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.027664
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.066872
    Step 9: arch=[[128, 128]], score=-0.058029
    Step 10: arch=[[1024, 1024, 1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024], [1024, 1024, 1024, 1024]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.016300
    Step 4: arch=[[1024, 1024]], score=0.047128
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.003618
    Step 6: arch=[[512, 512]], score=-0.015813
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.070559
    Step 10: arch=[[64, 64]], score=-0.064649

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.016300
    Step 4: arch=[[1024, 1024]], score=0.047128
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.003618
    Step 6: arch=[[512, 512]], score=-0.015813
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.070559
    Step 10: arch=[[64, 64, 64, 64, 64]], score=0.046307

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.016300
    Step 4: arch=[[1024, 1024]], score=0.047128
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.003618
    Step 6: arch=[[512, 512]], score=-0.015813
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.070559
    Step 10: arch=[[64, 64, 64, 64]], score=0.009322


=== Modifiers: modifiers_36 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.020572
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.093608
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.007325
    Step 5: arch=[[512, 512]], score=-0.033330
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.026292
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.077856
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.027230
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.014403
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002668
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.002186
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007012
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.005595
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.028873
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.010706
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.008021
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.010709

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.024448
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.019673
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004412
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.020645
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.019229
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.020645
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.022561
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.022016

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.056774
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.092730
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.048235
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.067458
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.062694
    Step 7: arch=[[128, 128, 128, 128]], score=0.003137
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.046779
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.050274

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003137
    Step 4: arch=[[1024, 1024]], score=-0.014142
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004321
    Step 6: arch=[[512, 512]], score=-0.033330
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.036453
    Step 10: arch=[[256, 256]], score=-0.041397

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.026182
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033844
    Step 4: arch=[[256, 256], [512, 512]], score=-0.011456
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.093637
    Step 7: arch=[[64, 64, 64]], score=-0.022782
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.078771
    Step 9: arch=[[128, 128]], score=-0.045048
    Step 10: arch=[[1024], [256], [2048, 2048]], score=0.068322

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003137
    Step 4: arch=[[1024, 1024]], score=-0.014142
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004321
    Step 6: arch=[[512, 512]], score=-0.033330
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.036453
    Step 10: arch=[[256, 256], [512, 512]], score=-0.011456

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003137
    Step 4: arch=[[1024, 1024]], score=-0.014142
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004321
    Step 6: arch=[[512, 512]], score=-0.033330
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.036453
    Step 10: arch=[[256]], score=-0.065872

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.003137
    Step 4: arch=[[1024, 1024]], score=-0.014142
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.004321
    Step 6: arch=[[512, 512]], score=-0.033330
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.036453
    Step 10: arch=[[1024, 1024, 1024], [64, 64, 64]], score=0.023633


=== Modifiers: modifiers_37 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.113961
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.112442
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.066924
    Step 4: arch=[[512, 512, 512]], score=-0.018142
    Step 5: arch=[[512, 512]], score=-0.024700
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.083936
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.014066
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.049882
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.091685

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.015025
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.004060
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004930
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004747
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.001257
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.003878
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.011222
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.002642

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.005478
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.003313
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001914
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004862
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004678
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004862
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.005651
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.002645

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.044394
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.055167
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.065584
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.106343
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.019298
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.030451
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.044137

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.066924
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121616
    Step 3: arch=[[128, 128, 128, 128]], score=-0.019298
    Step 4: arch=[[1024, 1024]], score=-0.015480
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.015915
    Step 6: arch=[[512, 512]], score=-0.024700
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011433
    Step 10: arch=[[256, 256]], score=-0.028251

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.038906
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.104382
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.030455
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015306
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.131130
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.025286
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.023717
    Step 9: arch=[[128, 128]], score=-0.029762
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=0.000626

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.066924
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121616
    Step 3: arch=[[128, 128, 128, 128]], score=-0.019298
    Step 4: arch=[[1024, 1024]], score=-0.015480
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.015915
    Step 6: arch=[[512, 512]], score=-0.024700
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011433
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128], [256, 256, 256, 256], [128], [256, 256, 256, 256]], score=0.123618

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.066924
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121616
    Step 3: arch=[[128, 128, 128, 128]], score=-0.019298
    Step 4: arch=[[1024, 1024]], score=-0.015480
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.015915
    Step 6: arch=[[512, 512]], score=-0.024700
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011433
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.066924
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121616
    Step 3: arch=[[128, 128, 128, 128]], score=-0.019298
    Step 4: arch=[[1024, 1024]], score=-0.015480
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.015915
    Step 6: arch=[[512, 512]], score=-0.024700
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011433
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_38 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.070429
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.112480
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.001765
    Step 5: arch=[[512, 512]], score=-0.021914
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.084581
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.027392
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.040015
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.110619

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.018057
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.008138
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.006577
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004900
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.001468
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.005601
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.012556
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.007740

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.018528
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.016122
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002028
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004760
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.003083
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004760
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.005532
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.004801

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.066185
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.103252
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.079664
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.068543
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.009234
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.027710
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.072833

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.009234
    Step 4: arch=[[1024, 1024]], score=-0.011314
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002944
    Step 6: arch=[[512, 512]], score=-0.021914
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022611
    Step 10: arch=[[256, 256]], score=-0.025624

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.054676
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.114197
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.046967
    Step 4: arch=[[256, 256], [512, 512]], score=-0.016265
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.118209
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.009652
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.030724
    Step 9: arch=[[128, 128]], score=-0.027081
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.024833

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.009234
    Step 4: arch=[[1024, 1024]], score=-0.011314
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002944
    Step 6: arch=[[512, 512]], score=-0.021914
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022611
    Step 10: arch=[[512, 512], [512], [256, 256, 256, 256]], score=0.019146

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.009234
    Step 4: arch=[[1024, 1024]], score=-0.011314
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002944
    Step 6: arch=[[512, 512]], score=-0.021914
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022611
    Step 10: arch=[[128, 128, 128, 128], [128, 128]], score=0.014573

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.009234
    Step 4: arch=[[1024, 1024]], score=-0.011314
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002944
    Step 6: arch=[[512, 512]], score=-0.021914
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.022611
    Step 10: arch=[[256]], score=-0.044180


=== Modifiers: modifiers_39 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.084785
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.095496
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.010500
    Step 5: arch=[[512, 512]], score=-0.027340
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.039528
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.002769
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.031034
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.098863

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010480
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.004156
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.008244
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006922
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.009308
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.018925
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.029488
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.014536

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.015385
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.007768
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.007279
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014524
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.013203
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014524
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.017908
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.017519

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.068428
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.098698
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.069833
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.095540
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.095340
    Step 7: arch=[[128, 128, 128, 128]], score=-0.017821
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.051150
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.062653

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017821
    Step 4: arch=[[1024, 1024]], score=0.003440
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.014195
    Step 6: arch=[[512, 512]], score=-0.027340
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.099787
    Step 9: arch=[[2048, 2048]], score=0.076422
    Step 10: arch=[[256, 256]], score=-0.041303

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.047601
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.102108
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.046932
    Step 4: arch=[[256, 256], [512, 512]], score=-0.014351
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.036187
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.075288
    Step 9: arch=[[128, 128]], score=-0.047927
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017821
    Step 4: arch=[[1024, 1024]], score=0.003440
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.014195
    Step 6: arch=[[512, 512]], score=-0.027340
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.099787
    Step 9: arch=[[2048, 2048]], score=0.076422
    Step 10: arch=[[512], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256], [64]], score=0.101676

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017821
    Step 4: arch=[[1024, 1024]], score=0.003440
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.014195
    Step 6: arch=[[512, 512]], score=-0.027340
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.099787
    Step 9: arch=[[2048, 2048]], score=0.076422
    Step 10: arch=[[512], [2048, 2048, 2048], [128, 128, 128, 128, 128], [2048, 2048]], score=0.098521

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017821
    Step 4: arch=[[1024, 1024]], score=0.003440
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.014195
    Step 6: arch=[[512, 512]], score=-0.027340
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.099787
    Step 9: arch=[[2048, 2048]], score=0.076422
    Step 10: arch=[[256, 256], [128, 128]], score=-0.024700


=== Modifiers: modifiers_40 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.081066
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.090788
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.028660
    Step 5: arch=[[512, 512]], score=-0.043414
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.048253
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.017659
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.014193
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.097004

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003909
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.022262
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007495
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006980
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.003751
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.010076
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.006007
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.017598

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.013309
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.008199
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004773
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009471
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.008956
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009471
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.011613
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010780

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.091089
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.092940
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.094728
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.030638
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.058585
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.090995

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030638
    Step 4: arch=[[1024, 1024]], score=-0.022530
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048857
    Step 6: arch=[[512, 512]], score=-0.043414
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.030587
    Step 10: arch=[[256, 256]], score=-0.052438

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.083704
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.061304
    Step 4: arch=[[256, 256], [512, 512]], score=-0.033339
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.099226
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.045695
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.035455
    Step 9: arch=[[128, 128]], score=-0.056595
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [64, 64], [64], [128]], score=0.043065

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030638
    Step 4: arch=[[1024, 1024]], score=-0.022530
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048857
    Step 6: arch=[[512, 512]], score=-0.043414
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.030587
    Step 10: arch=[[2048], [512, 512], [64, 64]], score=0.040855

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030638
    Step 4: arch=[[1024, 1024]], score=-0.022530
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048857
    Step 6: arch=[[512, 512]], score=-0.043414
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.030587
    Step 10: arch=[[1024, 1024, 1024, 1024], [512]], score=0.027359

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030638
    Step 4: arch=[[1024, 1024]], score=-0.022530
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.048857
    Step 6: arch=[[512, 512]], score=-0.043414
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.030587
    Step 10: arch=[[128, 128, 128]], score=-0.043616


=== Modifiers: modifiers_41 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.078202
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.103408
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.014104
    Step 5: arch=[[512, 512]], score=-0.025646
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.026510
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.104997
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.019868
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.040201
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003636
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.012574
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010182
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.009289
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=-0.001636
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.018387
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.022113
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.012628

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.009616
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.001490
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.007678
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.010779
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.009886
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.010779
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014313
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.013394

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.077096
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.086813
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.102725
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.100958
    Step 7: arch=[[128, 128, 128, 128]], score=-0.029043
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.050745
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.059244

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.029043
    Step 4: arch=[[1024, 1024]], score=0.007763
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017125
    Step 6: arch=[[512, 512]], score=-0.025646
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.089700
    Step 10: arch=[[256, 256]], score=-0.040461

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.050069
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.036423
    Step 4: arch=[[256, 256], [512, 512]], score=-0.026084
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.107777
    Step 7: arch=[[64, 64, 64]], score=-0.041687
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.038235
    Step 9: arch=[[128, 128]], score=-0.047395
    Step 10: arch=[[1024], [256], [2048, 2048]], score=0.102308

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.029043
    Step 4: arch=[[1024, 1024]], score=0.007763
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017125
    Step 6: arch=[[512, 512]], score=-0.025646
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.089700
    Step 10: arch=[[512, 512], [2048, 2048], [256, 256]], score=0.051679

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.029043
    Step 4: arch=[[1024, 1024]], score=0.007763
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017125
    Step 6: arch=[[512, 512]], score=-0.025646
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.089700
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.029043
    Step 4: arch=[[1024, 1024]], score=0.007763
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.017125
    Step 6: arch=[[512, 512]], score=-0.025646
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.089700
    Step 10: arch=[[64, 64]], score=-0.050745


=== Modifiers: modifiers_42 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.087866
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.099132
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.027529
    Step 5: arch=[[512, 512]], score=-0.031032
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.031763
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.123534
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.027607
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.038631
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.015577
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.013610
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007484
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.005624
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.011598
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.011627
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.004009
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.007678

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.002611
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.000786
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001617
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009478
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007618
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009478
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.010103
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.009534

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.017834
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.049108
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.031884
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.084379
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.080265
    Step 7: arch=[[128, 128, 128, 128]], score=-0.030014
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.035333
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.014508

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030014
    Step 4: arch=[[1024, 1024]], score=-0.023927
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004125
    Step 6: arch=[[512, 512]], score=-0.031032
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002717
    Step 10: arch=[[256, 256]], score=-0.033708

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.012102
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.016274
    Step 4: arch=[[256, 256], [512, 512]], score=-0.009176
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.123124
    Step 7: arch=[[64, 64, 64]], score=-0.032981
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.049698
    Step 9: arch=[[128, 128]], score=-0.034828
    Step 10: arch=[[1024], [256], [2048, 2048]], score=0.071193

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030014
    Step 4: arch=[[1024, 1024]], score=-0.023927
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004125
    Step 6: arch=[[512, 512]], score=-0.031032
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002717
    Step 10: arch=[[2048, 2048], [512, 512]], score=0.027491

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030014
    Step 4: arch=[[1024, 1024]], score=-0.023927
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004125
    Step 6: arch=[[512, 512]], score=-0.031032
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002717
    Step 10: arch=[[64, 64], [1024], [64, 64, 64, 64]], score=-0.007366

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030014
    Step 4: arch=[[1024, 1024]], score=-0.023927
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004125
    Step 6: arch=[[512, 512]], score=-0.031032
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002717
    Step 10: arch=[[64, 64]], score=-0.035333


=== Modifiers: modifiers_43 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.087684
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.087537
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.051330
    Step 5: arch=[[512, 512]], score=-0.059818
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.015461
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.049218
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.049506
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.009422
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.001217
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007014
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006787
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.028234
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.019916
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.010438
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.033979

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.006796
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002951
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003451
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.019591
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.019364
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.019591
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.020994
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.020233

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.047450
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.069440
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.064107
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.089037
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.055627
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.069641
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.047090

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.088357
    Step 3: arch=[[128, 128, 128, 128]], score=-0.055627
    Step 4: arch=[[1024, 1024]], score=-0.044441
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.011981
    Step 6: arch=[[512, 512]], score=-0.059818
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000410
    Step 10: arch=[[256, 256]], score=-0.065846

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.040682
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.091331
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.044851
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015044
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.063336
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.087649
    Step 9: arch=[[128, 128]], score=-0.068445
    Step 10: arch=[[512, 512, 512, 512]], score=-0.042843

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.088357
    Step 3: arch=[[128, 128, 128, 128]], score=-0.055627
    Step 4: arch=[[1024, 1024]], score=-0.044441
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.011981
    Step 6: arch=[[512, 512]], score=-0.059818
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000410
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024], [256, 256, 256, 256, 256], [128], [512, 512]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.088357
    Step 3: arch=[[128, 128, 128, 128]], score=-0.055627
    Step 4: arch=[[1024, 1024]], score=-0.044441
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.011981
    Step 6: arch=[[512, 512]], score=-0.059818
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000410
    Step 10: arch=[[1024, 1024], [512], [128, 128], [1024, 1024], [64, 64, 64, 64, 64]], score=0.076652

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.088357
    Step 3: arch=[[128, 128, 128, 128]], score=-0.055627
    Step 4: arch=[[1024, 1024]], score=-0.044441
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.011981
    Step 6: arch=[[512, 512]], score=-0.059818
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000410
    Step 10: arch=[[1024, 1024], [64]], score=-0.044084


=== Modifiers: modifiers_44 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.082811
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.086231
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.045937
    Step 5: arch=[[512, 512]], score=-0.058721
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.017339
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.035381
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.061303
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.097103

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.004144
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.012895
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005950
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004920
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.017602
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.016690
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.012530
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.038427

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.010924
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.007123
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003367
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.013117
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.012087
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.013117
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014442
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.013729

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.082252
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.071659
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.086765
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.089309
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.045880
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.067970
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.085367

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.045880
    Step 4: arch=[[1024, 1024]], score=-0.043587
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018851
    Step 6: arch=[[512, 512]], score=-0.058721
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.001290
    Step 10: arch=[[256, 256]], score=-0.064463

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.083265
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.091057
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.073873
    Step 4: arch=[[256, 256], [512, 512]], score=-0.022728
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.057586
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.085218
    Step 9: arch=[[128, 128]], score=-0.066877
    Step 10: arch=[[1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.083442

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.045880
    Step 4: arch=[[1024, 1024]], score=-0.043587
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018851
    Step 6: arch=[[512, 512]], score=-0.058721
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.001290
    Step 10: arch=[[256, 256], [512], [256], [64, 64, 64, 64]], score=-0.032760

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.045880
    Step 4: arch=[[1024, 1024]], score=-0.043587
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018851
    Step 6: arch=[[512, 512]], score=-0.058721
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.001290
    Step 10: arch=[[2048, 2048, 2048]], score=0.050607

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.045880
    Step 4: arch=[[1024, 1024]], score=-0.043587
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018851
    Step 6: arch=[[512, 512]], score=-0.058721
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.001290
    Step 10: arch=[[512, 512, 512, 512, 512]], score=-0.020368


=== Modifiers: modifiers_45 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.054059
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.127563
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.011481
    Step 5: arch=[[512, 512]], score=-0.020139
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.027539
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.002195
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.026588
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.080065

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.008133
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.005023
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.011444
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.010102
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.001006
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.010876
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.002662
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.003486

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.007619
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.005696
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001681
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006969
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005627
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006969
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007632
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007173

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.022291
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.089124
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.035744
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.091152
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.107801
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009576
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.024890
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.011321

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009576
    Step 4: arch=[[1024, 1024]], score=-0.012159
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002318
    Step 6: arch=[[512, 512]], score=-0.020139
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011954
    Step 10: arch=[[256, 256]], score=-0.023109

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.003940
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.005117
    Step 4: arch=[[256, 256], [512, 512]], score=-0.013992
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.017573
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.018745
    Step 9: arch=[[128, 128]], score=-0.024339
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024], [512], [512]], score=0.057404

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009576
    Step 4: arch=[[1024, 1024]], score=-0.012159
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002318
    Step 6: arch=[[512, 512]], score=-0.020139
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011954
    Step 10: arch=[[2048, 2048], [512, 512]], score=0.026124

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009576
    Step 4: arch=[[1024, 1024]], score=-0.012159
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002318
    Step 6: arch=[[512, 512]], score=-0.020139
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011954
    Step 10: arch=[[128, 128, 128]], score=-0.016958

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009576
    Step 4: arch=[[1024, 1024]], score=-0.012159
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002318
    Step 6: arch=[[512, 512]], score=-0.020139
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.011954
    Step 10: arch=[[1024, 1024], [128, 128]], score=-0.009676


=== Modifiers: modifiers_46 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.051223
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.101945
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.077835
    Step 4: arch=[[512, 512, 512]], score=-0.011828
    Step 5: arch=[[512, 512]], score=-0.019986
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.040224
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.004241
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.046122
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.005298
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.006952
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004260
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001028
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.003211
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.005759
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.000406
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.004818

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.006970
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.004962
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001732
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.003411
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.000179
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.003411
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.004085
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.002910

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.046903
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.062422
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.062702
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.080294
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.010940
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.024893
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.046005

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.077835
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.112361
    Step 3: arch=[[128, 128, 128, 128]], score=-0.010940
    Step 4: arch=[[1024, 1024]], score=-0.011464
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020999
    Step 6: arch=[[512, 512]], score=-0.019986
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.014899
    Step 10: arch=[[256, 256]], score=-0.023081

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.039307
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.095066
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.028510
    Step 4: arch=[[256, 256], [512, 512]], score=-0.016231
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.018268
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.015857
    Step 9: arch=[[128, 128]], score=-0.024338
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [256, 256]], score=0.125883

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.077835
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.112361
    Step 3: arch=[[128, 128, 128, 128]], score=-0.010940
    Step 4: arch=[[1024, 1024]], score=-0.011464
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020999
    Step 6: arch=[[512, 512]], score=-0.019986
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.014899
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128], [256, 256, 256, 256], [128], [256, 256, 256, 256]], score=0.126478

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.077835
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.112361
    Step 3: arch=[[128, 128, 128, 128]], score=-0.010940
    Step 4: arch=[[1024, 1024]], score=-0.011464
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020999
    Step 6: arch=[[512, 512]], score=-0.019986
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.014899
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.077835
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.112361
    Step 3: arch=[[128, 128, 128, 128]], score=-0.010940
    Step 4: arch=[[1024, 1024]], score=-0.011464
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.020999
    Step 6: arch=[[512, 512]], score=-0.019986
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.014899
    Step 10: arch=[[2048, 2048, 2048, 2048]], score=0.077835


=== Modifiers: modifiers_47 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.071993
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.083753
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.026001
    Step 5: arch=[[512, 512]], score=-0.033998
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.034046
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.016026
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.026001
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.117344

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010423
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.007234
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.006358
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004170
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.022867
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.018766
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.008269
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.015727

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.007563
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.005537
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001925
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014066
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.011878
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014066
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014862
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.013938

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.021308
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.025929
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.061435
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.095791
    Step 7: arch=[[128, 128, 128, 128]], score=-0.023490
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.039091
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.017195

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023490
    Step 4: arch=[[1024, 1024]], score=-0.027112
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006220
    Step 6: arch=[[512, 512]], score=-0.033998
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.120581
    Step 9: arch=[[2048, 2048]], score=-0.009931
    Step 10: arch=[[256, 256]], score=-0.037015

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.009731
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.015863
    Step 4: arch=[[256, 256], [512, 512]], score=-0.009520
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.031654
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.061850
    Step 9: arch=[[128, 128]], score=-0.038417
    Step 10: arch=[[512, 512], [256, 256], [256], [64, 64], [256, 256, 256]], score=0.013133

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023490
    Step 4: arch=[[1024, 1024]], score=-0.027112
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006220
    Step 6: arch=[[512, 512]], score=-0.033998
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.120581
    Step 9: arch=[[2048, 2048]], score=-0.009931
    Step 10: arch=[[64, 64, 64, 64, 64], [1024, 1024, 1024, 1024], [128, 128, 128, 128], [64, 64, 64], [64]], score=0.100707

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023490
    Step 4: arch=[[1024, 1024]], score=-0.027112
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006220
    Step 6: arch=[[512, 512]], score=-0.033998
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.120581
    Step 9: arch=[[2048, 2048]], score=-0.009931
    Step 10: arch=[[64], [256, 256, 256, 256], [64, 64, 64, 64], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024]], score=0.112009

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023490
    Step 4: arch=[[1024, 1024]], score=-0.027112
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.006220
    Step 6: arch=[[512, 512]], score=-0.033998
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.120581
    Step 9: arch=[[2048, 2048]], score=-0.009931
    Step 10: arch=[[1024, 1024], [64, 64, 64]], score=-0.012102


=== Modifiers: modifiers_48 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.082657
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.058068
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.044857
    Step 5: arch=[[512, 512]], score=-0.057758
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.004841
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.037452
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.027870
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.094957

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.000563
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.008684
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.006027
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004000
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.025912
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.010337
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.009745
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.037460

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.010661
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.006037
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004102
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.017321
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.015293
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.017321
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.018956
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.018268

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.066713
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.084618
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.084101
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.086591
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.020350
    Step 7: arch=[[128, 128, 128, 128]], score=-0.047601
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.069268
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.074077

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.086946
    Step 3: arch=[[128, 128, 128, 128]], score=-0.047601
    Step 4: arch=[[1024, 1024]], score=-0.039107
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000039
    Step 6: arch=[[512, 512]], score=-0.057758
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.097164
    Step 9: arch=[[2048, 2048]], score=0.015780
    Step 10: arch=[[256, 256]], score=-0.064885

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.063929
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.090594
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.064902
    Step 4: arch=[[256, 256], [512, 512]], score=-0.015117
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.059257
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.085671
    Step 9: arch=[[128, 128]], score=-0.067898
    Step 10: arch=[[1024, 1024, 1024], [128, 128, 128, 128, 128]], score=0.084776

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.086946
    Step 3: arch=[[128, 128, 128, 128]], score=-0.047601
    Step 4: arch=[[1024, 1024]], score=-0.039107
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000039
    Step 6: arch=[[512, 512]], score=-0.057758
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.097164
    Step 9: arch=[[2048, 2048]], score=0.015780
    Step 10: arch=[[1024, 1024, 1024], [2048, 2048, 2048], [128, 128, 128], [512, 512, 512], [64]], score=0.093397

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.086946
    Step 3: arch=[[128, 128, 128, 128]], score=-0.047601
    Step 4: arch=[[1024, 1024]], score=-0.039107
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000039
    Step 6: arch=[[512, 512]], score=-0.057758
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.097164
    Step 9: arch=[[2048, 2048]], score=0.015780
    Step 10: arch=[[1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64, 64, 64], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.086946
    Step 3: arch=[[128, 128, 128, 128]], score=-0.047601
    Step 4: arch=[[1024, 1024]], score=-0.039107
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000039
    Step 6: arch=[[512, 512]], score=-0.057758
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.097164
    Step 9: arch=[[2048, 2048]], score=0.015780
    Step 10: arch=[[1024], [2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024], [512, 512, 512, 512, 512]], score=-100.000000


=== Modifiers: modifiers_49 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.092776
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.100374
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.042033
    Step 4: arch=[[512, 512, 512]], score=-0.030707
    Step 5: arch=[[512, 512]], score=-0.037849
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.061130
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.024791
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.068132
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010644
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.006898
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002211
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001397
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.012464
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.015292
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.004577
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.015968

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.006323
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.004103
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002030
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008618
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007804
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008618
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009486
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007330

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.058109
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.023241
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.080617
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.108814
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.110542
    Step 7: arch=[[128, 128, 128, 128]], score=-0.030927
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.043974
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.061262

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.042033
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.104936
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030927
    Step 4: arch=[[1024, 1024]], score=-0.028841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040914
    Step 6: arch=[[512, 512]], score=-0.037849
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004398
    Step 10: arch=[[256, 256]], score=-0.041550

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055126
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.084990
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.042763
    Step 4: arch=[[256, 256], [512, 512]], score=-0.019378
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.114687
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.037888
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.035793
    Step 9: arch=[[128, 128]], score=-0.043200
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64, 64, 64, 64], [2048, 2048], [128]], score=0.090825

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.042033
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.104936
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030927
    Step 4: arch=[[1024, 1024]], score=-0.028841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040914
    Step 6: arch=[[512, 512]], score=-0.037849
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004398
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048], [64, 64, 64, 64, 64], [2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.042033
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.104936
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030927
    Step 4: arch=[[1024, 1024]], score=-0.028841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040914
    Step 6: arch=[[512, 512]], score=-0.037849
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004398
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [2048, 2048], [512, 512]], score=0.113941

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.042033
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.104936
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030927
    Step 4: arch=[[1024, 1024]], score=-0.028841
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040914
    Step 6: arch=[[512, 512]], score=-0.037849
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004398
    Step 10: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=-100.000000


=== Modifiers: modifiers_50 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.068666
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.117197
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.009085
    Step 4: arch=[[512, 512, 512]], score=-0.030946
    Step 5: arch=[[512, 512]], score=-0.034762
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.035546
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.027485
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.099652
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.009506
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.004983
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.001665
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.000827
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.014013
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.018477
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.008920
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.020011

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003318
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002115
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001087
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006870
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004378
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006870
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007280
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006337

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.043936
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.001023
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.065027
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.087220
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.030689
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.037415
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.048929

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.009085
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079666
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030689
    Step 4: arch=[[1024, 1024]], score=-0.030509
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.034033
    Step 6: arch=[[512, 512]], score=-0.034762
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.018095
    Step 10: arch=[[256, 256]], score=-0.036400

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.045725
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.053072
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.035755
    Step 4: arch=[[256, 256], [512, 512]], score=-0.016026
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.034242
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.036537
    Step 9: arch=[[128, 128]], score=-0.037097
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=0.085577

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.009085
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079666
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030689
    Step 4: arch=[[1024, 1024]], score=-0.030509
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.034033
    Step 6: arch=[[512, 512]], score=-0.034762
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.018095
    Step 10: arch=[[512, 512, 512, 512], [64, 64], [64, 64], [1024], [128, 128, 128]], score=0.057202

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.009085
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079666
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030689
    Step 4: arch=[[1024, 1024]], score=-0.030509
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.034033
    Step 6: arch=[[512, 512]], score=-0.034762
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.018095
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [2048, 2048], [512, 512]], score=0.118180

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.009085
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079666
    Step 3: arch=[[128, 128, 128, 128]], score=-0.030689
    Step 4: arch=[[1024, 1024]], score=-0.030509
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.034033
    Step 6: arch=[[512, 512]], score=-0.034762
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.018095
    Step 10: arch=[[128, 128, 128, 128, 128], [2048, 2048, 2048, 2048], [2048], [1024, 1024, 1024, 1024], [2048, 2048]], score=-100.000000


=== Modifiers: modifiers_51 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.073588
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.106340
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.012102
    Step 5: arch=[[512, 512]], score=-0.026459
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.063342
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.001676
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.083227
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.110251

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010684
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.007382
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002522
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000870
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.005751
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.003486
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.014221
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.003533

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.013577
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.009029
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004366
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006833
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005181
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006833
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008845
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007508

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.081640
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.070337
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.097688
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.098557
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.105940
    Step 7: arch=[[128, 128, 128, 128]], score=-0.011724
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.040421
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.087805

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.011724
    Step 4: arch=[[1024, 1024]], score=-0.008591
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.024295
    Step 6: arch=[[512, 512]], score=-0.026459
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.110999
    Step 9: arch=[[2048, 2048]], score=0.033266
    Step 10: arch=[[256, 256]], score=-0.034628

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.074406
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.058386
    Step 4: arch=[[256, 256], [512, 512]], score=-0.020433
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.027070
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.042345
    Step 9: arch=[[128, 128]], score=-0.038522
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024], [512, 512], [512]], score=0.070083

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.011724
    Step 4: arch=[[1024, 1024]], score=-0.008591
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.024295
    Step 6: arch=[[512, 512]], score=-0.026459
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.110999
    Step 9: arch=[[2048, 2048]], score=0.033266
    Step 10: arch=[[512], [512, 512, 512, 512, 512], [64, 64, 64, 64], [512, 512, 512, 512, 512], [64]], score=0.106714

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.011724
    Step 4: arch=[[1024, 1024]], score=-0.008591
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.024295
    Step 6: arch=[[512, 512]], score=-0.026459
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.110999
    Step 9: arch=[[2048, 2048]], score=0.033266
    Step 10: arch=[[128, 128], [128, 128, 128, 128], [256, 256], [1024]], score=0.033491

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.011724
    Step 4: arch=[[1024, 1024]], score=-0.008591
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.024295
    Step 6: arch=[[512, 512]], score=-0.026459
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.110999
    Step 9: arch=[[2048, 2048]], score=0.033266
    Step 10: arch=[[512], [2048, 2048]], score=0.004541


=== Modifiers: modifiers_52 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.075623
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.053496
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.025887
    Step 5: arch=[[512, 512]], score=-0.042025
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.049521
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.002907
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.037417
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003214
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.000081
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002275
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000402
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.034737
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.017040
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.013751
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.027750

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.014775
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.012276
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002182
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.017441
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.015568
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.017441
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.018192
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.016201

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.041636
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.043873
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.041065
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.046741
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.017371
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.046816
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.049144

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.100527
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017371
    Step 4: arch=[[1024, 1024]], score=-0.033207
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.000836
    Step 6: arch=[[512, 512]], score=-0.042025
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004876
    Step 10: arch=[[256, 256]], score=-0.045097

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.034681
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.096351
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.043066
    Step 4: arch=[[256, 256], [512, 512]], score=-0.005737
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.032436
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.099669
    Step 9: arch=[[128, 128]], score=-0.046299
    Step 10: arch=[[256, 256, 256], [1024, 1024, 1024, 1024, 1024]], score=0.100878

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.100527
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017371
    Step 4: arch=[[1024, 1024]], score=-0.033207
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.000836
    Step 6: arch=[[512, 512]], score=-0.042025
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004876
    Step 10: arch=[[2048, 2048, 2048], [2048, 2048], [128, 128, 128, 128, 128], [256, 256]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.100527
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017371
    Step 4: arch=[[1024, 1024]], score=-0.033207
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.000836
    Step 6: arch=[[512, 512]], score=-0.042025
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004876
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64], [128, 128], [1024, 1024, 1024, 1024, 1024], [64]], score=0.090774

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.100527
    Step 3: arch=[[128, 128, 128, 128]], score=-0.017371
    Step 4: arch=[[1024, 1024]], score=-0.033207
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.000836
    Step 6: arch=[[512, 512]], score=-0.042025
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004876
    Step 10: arch=[[2048], [128]], score=-0.042063


=== Modifiers: modifiers_53 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.110800
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.067849
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.064843
    Step 4: arch=[[512, 512, 512]], score=-0.019554
    Step 5: arch=[[512, 512]], score=-0.024288
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.062412
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.022360
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.023776
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.119029

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.009928
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.007963
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005029
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004202
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.016104
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.001373
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.011388
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.003120

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003955
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.000308
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003465
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012845
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.012018
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012845
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014411
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.011341

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.019060
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.064535
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.018155
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.064694
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.121196
    Step 7: arch=[[128, 128, 128, 128]], score=-0.026137
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.035145
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.008964

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.064843
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119157
    Step 3: arch=[[128, 128, 128, 128]], score=-0.026137
    Step 4: arch=[[1024, 1024]], score=-0.009968
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001192
    Step 6: arch=[[512, 512]], score=-0.024288
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.024787
    Step 10: arch=[[256, 256]], score=-0.030683

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.005188
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.099586
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.010461
    Step 4: arch=[[256, 256], [512, 512]], score=-0.006806
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.031417
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.052798
    Step 9: arch=[[128, 128]], score=-0.033690
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.118557

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.064843
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119157
    Step 3: arch=[[128, 128, 128, 128]], score=-0.026137
    Step 4: arch=[[1024, 1024]], score=-0.009968
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001192
    Step 6: arch=[[512, 512]], score=-0.024288
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.024787
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=0.084871

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.064843
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119157
    Step 3: arch=[[128, 128, 128, 128]], score=-0.026137
    Step 4: arch=[[1024, 1024]], score=-0.009968
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001192
    Step 6: arch=[[512, 512]], score=-0.024288
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.024787
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.064843
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119157
    Step 3: arch=[[128, 128, 128, 128]], score=-0.026137
    Step 4: arch=[[1024, 1024]], score=-0.009968
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001192
    Step 6: arch=[[512, 512]], score=-0.024288
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.024787
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_54 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.094248
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.125328
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.019045
    Step 5: arch=[[512, 512]], score=-0.023797
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.053253
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.013987
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.008472
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.106857

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003092
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.003784
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010705
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.010583
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=-0.003331
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.010910
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.007710
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.012971

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.004458
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002956
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001433
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004528
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004407
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004528
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.005130
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.002456

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.028079
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.046887
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.053941
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.117003
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.018377
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.027677
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.023575

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.018377
    Step 4: arch=[[1024, 1024]], score=-0.018641
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001980
    Step 6: arch=[[512, 512]], score=-0.023797
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.125618
    Step 9: arch=[[2048, 2048]], score=-0.006017
    Step 10: arch=[[256, 256]], score=-0.026087

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.019184
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.083613
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.015021
    Step 4: arch=[[256, 256], [512, 512]], score=-0.016989
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.023304
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.020577
    Step 9: arch=[[128, 128]], score=-0.027159
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.116658

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.018377
    Step 4: arch=[[1024, 1024]], score=-0.018641
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001980
    Step 6: arch=[[512, 512]], score=-0.023797
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.125618
    Step 9: arch=[[2048, 2048]], score=-0.006017
    Step 10: arch=[[64, 64, 64, 64, 64], [1024, 1024, 1024, 1024], [128, 128, 128, 128], [64, 64, 64], [64]], score=0.052125

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.018377
    Step 4: arch=[[1024, 1024]], score=-0.018641
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001980
    Step 6: arch=[[512, 512]], score=-0.023797
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.125618
    Step 9: arch=[[2048, 2048]], score=-0.006017
    Step 10: arch=[[64], [256, 256, 256, 256], [64, 64, 64, 64], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024]], score=0.059487

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.018377
    Step 4: arch=[[1024, 1024]], score=-0.018641
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.001980
    Step 6: arch=[[512, 512]], score=-0.023797
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.125618
    Step 9: arch=[[2048, 2048]], score=-0.006017
    Step 10: arch=[[1024, 1024], [64, 64, 64]], score=-0.008056


=== Modifiers: modifiers_55 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.054728
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120585
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.027482
    Step 5: arch=[[512, 512]], score=-0.029875
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.004123
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.033654
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.033043
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.006387
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.008660
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010583
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.008497
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.002003
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.014040
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.007618
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.010827

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.001480
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001638
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002905
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007530
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005444
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007530
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008791
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.008405

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.039070
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.076961
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.062515
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.118946
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.055362
    Step 7: arch=[[128, 128, 128, 128]], score=-0.034925
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.038601
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.022414

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079425
    Step 3: arch=[[128, 128, 128, 128]], score=-0.034925
    Step 4: arch=[[1024, 1024]], score=-0.017661
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033630
    Step 6: arch=[[512, 512]], score=-0.029875
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013940
    Step 10: arch=[[256, 256]], score=-0.035085

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.021144
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.115231
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.009932
    Step 4: arch=[[256, 256], [512, 512]], score=-0.025091
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.037386
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.012435
    Step 9: arch=[[128, 128]], score=-0.037466
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.119161

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079425
    Step 3: arch=[[128, 128, 128, 128]], score=-0.034925
    Step 4: arch=[[1024, 1024]], score=-0.017661
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033630
    Step 6: arch=[[512, 512]], score=-0.029875
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013940
    Step 10: arch=[[1024, 1024], [256], [64, 64, 64, 64, 64], [512, 512], [1024, 1024, 1024, 1024]], score=0.117873

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079425
    Step 3: arch=[[128, 128, 128, 128]], score=-0.034925
    Step 4: arch=[[1024, 1024]], score=-0.017661
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033630
    Step 6: arch=[[512, 512]], score=-0.029875
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013940
    Step 10: arch=[[1024, 1024, 1024, 1024], [1024], [256, 256, 256]], score=0.052315

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079425
    Step 3: arch=[[128, 128, 128, 128]], score=-0.034925
    Step 4: arch=[[1024, 1024]], score=-0.017661
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033630
    Step 6: arch=[[512, 512]], score=-0.029875
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013940
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64], [128], [512, 512]], score=-100.000000


=== Modifiers: modifiers_56 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.113095
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.060026
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.024481
    Step 5: arch=[[512, 512]], score=-0.032251
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.068699
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.130125
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.013166
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.031591
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002239
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.001127
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003846
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002836
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010470
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.006165
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.003809
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.022174

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.007440
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.006030
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001333
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007170
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.006159
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007170
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007714
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.004610

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.037275
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.010828
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.058632
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.083673
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.119152
    Step 7: arch=[[128, 128, 128, 128]], score=-0.020531
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.035713
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.051880

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020531
    Step 4: arch=[[1024, 1024]], score=-0.027485
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.013546
    Step 6: arch=[[512, 512]], score=-0.032251
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.015362
    Step 10: arch=[[256, 256]], score=-0.034310

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.044516
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.045792
    Step 4: arch=[[256, 256], [512, 512]], score=-0.006937
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.125613
    Step 7: arch=[[64, 64, 64]], score=-0.028369
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.066335
    Step 9: arch=[[128, 128]], score=-0.035259
    Step 10: arch=[[1024], [256], [2048, 2048]], score=0.027751

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020531
    Step 4: arch=[[1024, 1024]], score=-0.027485
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.013546
    Step 6: arch=[[512, 512]], score=-0.032251
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.015362
    Step 10: arch=[[512], [2048, 2048], [64]], score=0.039424

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020531
    Step 4: arch=[[1024, 1024]], score=-0.027485
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.013546
    Step 6: arch=[[512, 512]], score=-0.032251
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.015362
    Step 10: arch=[[64, 64], [1024], [64, 64, 64, 64]], score=-0.011884

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020531
    Step 4: arch=[[1024, 1024]], score=-0.027485
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.013546
    Step 6: arch=[[512, 512]], score=-0.032251
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.015362
    Step 10: arch=[[256, 256, 256], [1024, 1024], [1024, 1024], [128]], score=0.049009


=== Modifiers: modifiers_57 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.076792
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.100208
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.046655
    Step 5: arch=[[512, 512]], score=-0.051948
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.022942
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.043824
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=-0.003661
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.110150

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.013716
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.004395
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.009768
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.009184
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.024589
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.041378
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.027564
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.030050

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.004238
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002027
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001965
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.017036
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.016452
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.017036
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.017731
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.017231

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.037812
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.043749
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.056069
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.101962
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.047821
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.056308
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.019420

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.047821
    Step 4: arch=[[1024, 1024]], score=-0.044377
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.059722
    Step 6: arch=[[512, 512]], score=-0.051948
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113458
    Step 9: arch=[[2048, 2048]], score=-0.020954
    Step 10: arch=[[256, 256]], score=-0.054698

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.015424
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.083086
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.009000
    Step 4: arch=[[256, 256], [512, 512]], score=-0.027640
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.052377
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.045031
    Step 9: arch=[[128, 128]], score=-0.055815
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.100801

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.047821
    Step 4: arch=[[1024, 1024]], score=-0.044377
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.059722
    Step 6: arch=[[512, 512]], score=-0.051948
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113458
    Step 9: arch=[[2048, 2048]], score=-0.020954
    Step 10: arch=[[128], [128, 128, 128, 128, 128], [256, 256, 256, 256, 256], [512], [64]], score=0.037667

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.047821
    Step 4: arch=[[1024, 1024]], score=-0.044377
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.059722
    Step 6: arch=[[512, 512]], score=-0.051948
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113458
    Step 9: arch=[[2048, 2048]], score=-0.020954
    Step 10: arch=[[64], [256, 256, 256, 256], [64, 64, 64, 64], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024]], score=0.100321

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.047821
    Step 4: arch=[[1024, 1024]], score=-0.044377
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.059722
    Step 6: arch=[[512, 512]], score=-0.051948
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113458
    Step 9: arch=[[2048, 2048]], score=-0.020954
    Step 10: arch=[[1024]], score=-0.053813


=== Modifiers: modifiers_58 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.066637
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.108145
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.019923
    Step 5: arch=[[512, 512]], score=-0.031762
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.028350
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.007965
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.029476
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002333
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.002686
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.009333
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007910
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.007658
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.004999
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.002632
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.014255

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.011074
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.007672
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003223
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.010543
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.009120
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.010543
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.012009
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010540

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.044344
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.083045
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.058530
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.092939
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.083317
    Step 7: arch=[[128, 128, 128, 128]], score=-0.018864
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.042034
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.043874

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.103006
    Step 3: arch=[[128, 128, 128, 128]], score=-0.018864
    Step 4: arch=[[1024, 1024]], score=-0.018145
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.006029
    Step 6: arch=[[512, 512]], score=-0.031762
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.015102
    Step 10: arch=[[256, 256]], score=-0.037820

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.032976
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.108253
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033650
    Step 4: arch=[[256, 256], [512, 512]], score=-0.014076
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.031183
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.051007
    Step 9: arch=[[128, 128]], score=-0.040661
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.112148

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.103006
    Step 3: arch=[[128, 128, 128, 128]], score=-0.018864
    Step 4: arch=[[1024, 1024]], score=-0.018145
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.006029
    Step 6: arch=[[512, 512]], score=-0.031762
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.015102
    Step 10: arch=[[2048, 2048], [512, 512], [128, 128, 128, 128]], score=0.060388

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.103006
    Step 3: arch=[[128, 128, 128, 128]], score=-0.018864
    Step 4: arch=[[1024, 1024]], score=-0.018145
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.006029
    Step 6: arch=[[512, 512]], score=-0.031762
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.015102
    Step 10: arch=[[512, 512, 512, 512, 512], [64, 64], [128, 128], [1024, 1024, 1024, 1024, 1024], [64]], score=0.064615

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.103006
    Step 3: arch=[[128, 128, 128, 128]], score=-0.018864
    Step 4: arch=[[1024, 1024]], score=-0.018145
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.006029
    Step 6: arch=[[512, 512]], score=-0.031762
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.015102
    Step 10: arch=[[2048, 2048, 2048], [512, 512]], score=0.069194


=== Modifiers: modifiers_59 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.072115
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.094780
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-0.010009
    Step 4: arch=[[512, 512, 512]], score=-0.042320
    Step 5: arch=[[512, 512]], score=-0.046007
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.021916
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.038295
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.057365
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.118745

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.012286
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.002778
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002765
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000859
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.037434
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.034781
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.022415
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.029728

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003299
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.001901
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001307
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.018422
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.016516
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.018422
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.018855
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.018299

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.018835
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-0.017206
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.025537
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.082179
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.041506
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.048191
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.011514

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.010009
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.048007
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041506
    Step 4: arch=[[1024, 1024]], score=-0.042558
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.038669
    Step 6: arch=[[512, 512]], score=-0.046007
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.123348
    Step 9: arch=[[2048, 2048]], score=-0.032616
    Step 10: arch=[[256, 256]], score=-0.047350

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.008304
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.026976
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.012000
    Step 4: arch=[[256, 256], [512, 512]], score=-0.012146
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.045005
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.073977
    Step 9: arch=[[128, 128]], score=-0.047927
    Step 10: arch=[[64, 64], [2048, 2048, 2048, 2048, 2048]], score=0.119782

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.010009
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.048007
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041506
    Step 4: arch=[[1024, 1024]], score=-0.042558
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.038669
    Step 6: arch=[[512, 512]], score=-0.046007
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.123348
    Step 9: arch=[[2048, 2048]], score=-0.032616
    Step 10: arch=[[512, 512, 512], [1024, 1024, 1024], [64, 64, 64, 64, 64], [1024, 1024, 1024, 1024], [1024, 1024, 1024]], score=0.115702

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.010009
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.048007
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041506
    Step 4: arch=[[1024, 1024]], score=-0.042558
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.038669
    Step 6: arch=[[512, 512]], score=-0.046007
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.123348
    Step 9: arch=[[2048, 2048]], score=-0.032616
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024], [128, 128, 128, 128], [2048, 2048, 2048, 2048, 2048], [1024]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-0.010009
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.048007
    Step 3: arch=[[128, 128, 128, 128]], score=-0.041506
    Step 4: arch=[[1024, 1024]], score=-0.042558
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.038669
    Step 6: arch=[[512, 512]], score=-0.046007
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.123348
    Step 9: arch=[[2048, 2048]], score=-0.032616
    Step 10: arch=[[64, 64, 64, 64]], score=-0.041818


=== Modifiers: modifiers_60 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.070962
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.105883
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.013262
    Step 5: arch=[[512, 512]], score=-0.008867
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.060394
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.027787
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.060781
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.103508

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.007217
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.001066
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.007275
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.005773
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.000053
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.036923
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.044203
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.035553

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.020619
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.011848
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.008420
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.010702
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.009200
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.010702
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014665
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.013379

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.079633
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.108356
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.073244
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.083948
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.007513
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.036847
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.073361

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.007513
    Step 4: arch=[[1024, 1024]], score=0.026815
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.023361
    Step 6: arch=[[512, 512]], score=-0.008867
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.103302
    Step 10: arch=[[256, 256]], score=-0.025226

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.053088
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.110814
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.048867
    Step 4: arch=[[256, 256], [512, 512]], score=-0.013144
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.016667
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.058602
    Step 9: arch=[[128, 128]], score=-0.033036
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.007513
    Step 4: arch=[[1024, 1024]], score=0.026815
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.023361
    Step 6: arch=[[512, 512]], score=-0.008867
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.103302
    Step 10: arch=[[64], [512, 512]], score=-0.045884

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.007513
    Step 4: arch=[[1024, 1024]], score=0.026815
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.023361
    Step 6: arch=[[512, 512]], score=-0.008867
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.103302
    Step 10: arch=[[128, 128]], score=-0.033036

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.007513
    Step 4: arch=[[1024, 1024]], score=0.026815
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.023361
    Step 6: arch=[[512, 512]], score=-0.008867
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.103302
    Step 10: arch=[[256, 256, 256, 256, 256], [512]], score=0.039030


=== Modifiers: modifiers_61 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.097255
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120723
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.035218
    Step 5: arch=[[512, 512]], score=-0.035863
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.052185
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.035376
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054539
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.023517
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.011460
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.008018
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007092
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.009801
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.030121
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.006494
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.010426

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.000452
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000107
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000513
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008253
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007327
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008253
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008418
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007882

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.022464
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.008871
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.044279
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.096193
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.035783
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.036693
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.014199

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035783
    Step 4: arch=[[1024, 1024]], score=-0.034440
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036838
    Step 6: arch=[[512, 512]], score=-0.035863
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030074
    Step 10: arch=[[256, 256]], score=-0.036385

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.013792
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.040454
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.007745
    Step 4: arch=[[256, 256], [512, 512]], score=-0.019886
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.036297
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.017202
    Step 9: arch=[[128, 128]], score=-0.036598
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035783
    Step 4: arch=[[1024, 1024]], score=-0.034440
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036838
    Step 6: arch=[[512, 512]], score=-0.035863
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030074
    Step 10: arch=[[64, 64], [1024], [64, 64, 64, 64]], score=0.021935

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035783
    Step 4: arch=[[1024, 1024]], score=-0.034440
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036838
    Step 6: arch=[[512, 512]], score=-0.035863
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030074
    Step 10: arch=[[128, 128, 128], [128], [128, 128, 128, 128, 128]], score=0.015025

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.035783
    Step 4: arch=[[1024, 1024]], score=-0.034440
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.036838
    Step 6: arch=[[512, 512]], score=-0.035863
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.030074
    Step 10: arch=[[64, 64, 64], [1024]], score=-0.013208


=== Modifiers: modifiers_62 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.101413
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.091035
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.109571
    Step 4: arch=[[512, 512, 512]], score=-0.008519
    Step 5: arch=[[512, 512]], score=-0.021237
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.061918
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.018125
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.063188
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.103210

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.016254
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.000304
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004316
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002727
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.005435
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.032406
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.048732
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.036542

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.009981
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.000516
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.008827
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012042
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.010452
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.012042
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.016050
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.014568

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.085047
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.106767
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.082954
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.102001
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.027481
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.049959
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.068513

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.109571
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.110437
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027481
    Step 4: arch=[[1024, 1024]], score=0.018303
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018733
    Step 6: arch=[[512, 512]], score=-0.021237
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.102069
    Step 10: arch=[[256, 256]], score=-0.038321

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.059159
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.110184
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.045206
    Step 4: arch=[[256, 256], [512, 512]], score=-0.020660
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.040772
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.053376
    Step 9: arch=[[128, 128]], score=-0.046192
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.111034

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.109571
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.110437
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027481
    Step 4: arch=[[1024, 1024]], score=0.018303
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018733
    Step 6: arch=[[512, 512]], score=-0.021237
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.102069
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [64], [1024, 1024, 1024, 1024, 1024]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.109571
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.110437
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027481
    Step 4: arch=[[1024, 1024]], score=0.018303
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018733
    Step 6: arch=[[512, 512]], score=-0.021237
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.102069
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.116250

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.109571
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.110437
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027481
    Step 4: arch=[[1024, 1024]], score=0.018303
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018733
    Step 6: arch=[[512, 512]], score=-0.021237
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.102069
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_63 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.086662
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.097902
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.108477
    Step 4: arch=[[512, 512, 512]], score=0.008180
    Step 5: arch=[[512, 512]], score=-0.008292
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.037752
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.099493
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.013030
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.040123
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.007019
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.011344
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.006483
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.006074
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.000734
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.061091
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.068180
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.062576

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.012446
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002126
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.013634
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016838
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.016429
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016838
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.023117
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.021587

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.096336
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.105515
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.080452
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.098573
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.097198
    Step 7: arch=[[128, 128, 128, 128]], score=-0.024556
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.053584
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.058428

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.108477
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.107078
    Step 3: arch=[[128, 128, 128, 128]], score=-0.024556
    Step 4: arch=[[1024, 1024]], score=0.053347
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022166
    Step 6: arch=[[512, 512]], score=-0.008292
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.100746
    Step 10: arch=[[256, 256]], score=-0.035161

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.046904
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.107608
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.031315
    Step 4: arch=[[256, 256], [512, 512]], score=-0.024067
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.042306
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.044702
    Step 9: arch=[[128, 128]], score=-0.047607
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.107765

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.108477
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.107078
    Step 3: arch=[[128, 128, 128, 128]], score=-0.024556
    Step 4: arch=[[1024, 1024]], score=0.053347
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022166
    Step 6: arch=[[512, 512]], score=-0.008292
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.100746
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [128, 128, 128, 128, 128], [128]], score=0.109575

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.108477
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.107078
    Step 3: arch=[[128, 128, 128, 128]], score=-0.024556
    Step 4: arch=[[1024, 1024]], score=0.053347
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022166
    Step 6: arch=[[512, 512]], score=-0.008292
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.100746
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.112339

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.108477
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.107078
    Step 3: arch=[[128, 128, 128, 128]], score=-0.024556
    Step 4: arch=[[1024, 1024]], score=0.053347
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.022166
    Step 6: arch=[[512, 512]], score=-0.008292
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.100746
    Step 10: arch=[[512, 512], [1024, 1024, 1024, 1024], [512], [512, 512, 512], [64, 64]], score=0.082389


=== Modifiers: modifiers_64 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.100922
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.069230
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.103016
    Step 4: arch=[[512, 512, 512]], score=-0.021193
    Step 5: arch=[[512, 512]], score=-0.033352
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.055101
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.017501
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.048379
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010964
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.008521
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002372
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001507
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.035297
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.002868
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.013928
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.002953

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.010390
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.004518
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005460
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.021767
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.020902
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.021767
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.024117
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.021942

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.034472
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.100831
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.018333
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.057357
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.027487
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.049555
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.022530

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.103016
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.105147
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027487
    Step 4: arch=[[1024, 1024]], score=-0.010493
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002980
    Step 6: arch=[[512, 512]], score=-0.033352
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.049117
    Step 10: arch=[[256, 256]], score=-0.043045

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.012546
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.103194
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.022614
    Step 4: arch=[[256, 256], [512, 512]], score=-0.004821
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.039678
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.100907
    Step 9: arch=[[128, 128]], score=-0.047457
    Step 10: arch=[[512, 512, 512, 512]], score=-0.009033

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.103016
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.105147
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027487
    Step 4: arch=[[1024, 1024]], score=-0.010493
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002980
    Step 6: arch=[[512, 512]], score=-0.033352
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.049117
    Step 10: arch=[[2048], [512, 512, 512, 512, 512], [128, 128, 128, 128, 128], [64, 64], [512, 512, 512]], score=0.103535

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.103016
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.105147
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027487
    Step 4: arch=[[1024, 1024]], score=-0.010493
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002980
    Step 6: arch=[[512, 512]], score=-0.033352
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.049117
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.106904

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.103016
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.105147
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027487
    Step 4: arch=[[1024, 1024]], score=-0.010493
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002980
    Step 6: arch=[[512, 512]], score=-0.033352
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.049117
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024, 1024, 1024], [512, 512, 512], [512, 512, 512], [1024, 1024]], score=-100.000000


=== Modifiers: modifiers_65 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.042382
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.116838
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.113699
    Step 4: arch=[[512, 512, 512]], score=-0.003766
    Step 5: arch=[[512, 512]], score=-0.019355
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.036502
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.012795
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.079561
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002336
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.005707
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005376
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002848
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.007498
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.004240
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.006614
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.000396

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.014335
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.010307
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003736
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007990
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005463
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007990
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009625
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.008613

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.056534
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.100946
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.061708
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.069255
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.081460
    Step 7: arch=[[128, 128, 128, 128]], score=-0.001253
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.030837
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.056373

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.113699
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115872
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001253
    Step 4: arch=[[1024, 1024]], score=-0.003157
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000222
    Step 6: arch=[[512, 512]], score=-0.019355
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039086
    Step 10: arch=[[256, 256]], score=-0.026224

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.042325
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.114811
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.037675
    Step 4: arch=[[256, 256], [512, 512]], score=-0.013258
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.016866
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.044941
    Step 9: arch=[[128, 128]], score=-0.029350
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [512, 512]], score=0.121899

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.113699
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115872
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001253
    Step 4: arch=[[1024, 1024]], score=-0.003157
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000222
    Step 6: arch=[[512, 512]], score=-0.019355
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039086
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=0.116681

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.113699
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115872
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001253
    Step 4: arch=[[1024, 1024]], score=-0.003157
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000222
    Step 6: arch=[[512, 512]], score=-0.019355
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039086
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.119017

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.113699
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.115872
    Step 3: arch=[[128, 128, 128, 128]], score=-0.001253
    Step 4: arch=[[1024, 1024]], score=-0.003157
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000222
    Step 6: arch=[[512, 512]], score=-0.019355
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039086
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_66 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.045031
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.079410
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.038245
    Step 5: arch=[[512, 512]], score=-0.059787
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.019978
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.007234
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.012632
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002730
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.019704
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.008082
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007480
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.024225
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.033958
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.031210
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.044344

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.020072
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.016600
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003129
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016511
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.015909
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016511
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.017682
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.017400

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.078363
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.066340
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.080004
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.081796
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.042596
    Step 7: arch=[[128, 128, 128, 128]], score=-0.026969
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.067339
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.078731

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.026969
    Step 4: arch=[[1024, 1024]], score=-0.047549
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.039751
    Step 6: arch=[[512, 512]], score=-0.059787
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011534
    Step 10: arch=[[256, 256]], score=-0.064463

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.077594
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.068263
    Step 4: arch=[[256, 256], [512, 512]], score=-0.030244
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.047694
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.078081
    Step 9: arch=[[128, 128]], score=-0.066440
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.078863

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.026969
    Step 4: arch=[[1024, 1024]], score=-0.047549
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.039751
    Step 6: arch=[[512, 512]], score=-0.059787
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011534
    Step 10: arch=[[64, 64], [1024], [64, 64, 64, 64]], score=0.031691

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.026969
    Step 4: arch=[[1024, 1024]], score=-0.047549
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.039751
    Step 6: arch=[[512, 512]], score=-0.059787
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011534
    Step 10: arch=[[128, 128, 128], [128], [128, 128, 128, 128, 128]], score=0.045400

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.026969
    Step 4: arch=[[1024, 1024]], score=-0.047549
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.039751
    Step 6: arch=[[512, 512]], score=-0.059787
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011534
    Step 10: arch=[[64], [64], [2048, 2048], [256]], score=0.038538


=== Modifiers: modifiers_67 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.053792
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120977
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.028198
    Step 4: arch=[[512, 512, 512]], score=-0.019536
    Step 5: arch=[[512, 512]], score=-0.026828
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.018708
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.010180
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.070982
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.110796

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.005545
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.003788
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.006159
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002798
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010072
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.008940
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.003359
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.015177

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.006794
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.005306
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001372
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007263
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.003902
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007263
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007835
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007442

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.026648
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.037290
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.040848
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.066458
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.016861
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.030717
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.031671

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028198
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079595
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016861
    Step 4: arch=[[1024, 1024]], score=-0.021162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.010552
    Step 6: arch=[[512, 512]], score=-0.026828
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.005925
    Step 10: arch=[[256, 256]], score=-0.029172

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.024991
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.081157
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.027823
    Step 4: arch=[[256, 256], [512, 512]], score=-0.007734
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.024067
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.047131
    Step 9: arch=[[128, 128]], score=-0.030222
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.120875

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028198
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079595
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016861
    Step 4: arch=[[1024, 1024]], score=-0.021162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.010552
    Step 6: arch=[[512, 512]], score=-0.026828
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.005925
    Step 10: arch=[[2048, 2048, 2048]], score=0.011137

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028198
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079595
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016861
    Step 4: arch=[[1024, 1024]], score=-0.021162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.010552
    Step 6: arch=[[512, 512]], score=-0.026828
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.005925
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028198
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.079595
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016861
    Step 4: arch=[[1024, 1024]], score=-0.021162
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.010552
    Step 6: arch=[[512, 512]], score=-0.026828
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.005925
    Step 10: arch=[[2048, 2048, 2048, 2048]], score=0.028198


=== Modifiers: modifiers_68 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.094467
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.087495
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.072654
    Step 4: arch=[[512, 512, 512]], score=-0.008420
    Step 5: arch=[[512, 512]], score=-0.016759
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.071466
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.003769
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.034028
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.123191

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.010768
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.003016
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005396
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004071
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.007677
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.003717
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.014580
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.010969

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.007711
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.003848
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003717
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008181
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.006855
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008181
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009846
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007344

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.038525
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.073205
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.041781
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.067994
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.124483
    Step 7: arch=[[128, 128, 128, 128]], score=-0.011337
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.028001
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.031221

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.072654
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121861
    Step 3: arch=[[128, 128, 128, 128]], score=-0.011337
    Step 4: arch=[[1024, 1024]], score=-0.002372
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.007004
    Step 6: arch=[[512, 512]], score=-0.016759
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.031331
    Step 10: arch=[[256, 256]], score=-0.023337

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.023653
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.097838
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.019473
    Step 4: arch=[[256, 256], [512, 512]], score=-0.013106
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.020472
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.039607
    Step 9: arch=[[128, 128]], score=-0.026472
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.121499

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.072654
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121861
    Step 3: arch=[[128, 128, 128, 128]], score=-0.011337
    Step 4: arch=[[1024, 1024]], score=-0.002372
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.007004
    Step 6: arch=[[512, 512]], score=-0.016759
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.031331
    Step 10: arch=[[2048], [128, 128, 128, 128], [64, 64]], score=0.031343

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.072654
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121861
    Step 3: arch=[[128, 128, 128, 128]], score=-0.011337
    Step 4: arch=[[1024, 1024]], score=-0.002372
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.007004
    Step 6: arch=[[512, 512]], score=-0.016759
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.031331
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.072654
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.121861
    Step 3: arch=[[128, 128, 128, 128]], score=-0.011337
    Step 4: arch=[[1024, 1024]], score=-0.002372
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.007004
    Step 6: arch=[[512, 512]], score=-0.016759
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.031331
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_69 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.082174
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.132261
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.072488
    Step 4: arch=[[512, 512, 512]], score=-0.003896
    Step 5: arch=[[512, 512]], score=-0.010273
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.058321
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.002163
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.130052
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.016557
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.014613
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002068
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000347
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.008618
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.010942
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.027580
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.020206

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.005716
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002270
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003292
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006462
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004741
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006462
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007926
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007066

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.027231
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.059650
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.025115
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.038330
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.112694
    Step 7: arch=[[128, 128, 128, 128]], score=-0.007727
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.020193
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.025998

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.072488
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.131061
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007727
    Step 4: arch=[[1024, 1024]], score=0.002686
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.010936
    Step 6: arch=[[512, 512]], score=-0.010273
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.033790
    Step 10: arch=[[256, 256]], score=-0.016104

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.020433
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.087216
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.021023
    Step 4: arch=[[256, 256], [512, 512]], score=-0.004068
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.014669
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.048377
    Step 9: arch=[[128, 128]], score=-0.018857
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.130753

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.072488
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.131061
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007727
    Step 4: arch=[[1024, 1024]], score=0.002686
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.010936
    Step 6: arch=[[512, 512]], score=-0.010273
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.033790
    Step 10: arch=[[2048, 2048], [256, 256, 256, 256, 256], [256], [256], [2048, 2048]], score=0.136205

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.072488
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.131061
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007727
    Step 4: arch=[[1024, 1024]], score=0.002686
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.010936
    Step 6: arch=[[512, 512]], score=-0.010273
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.033790
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.072488
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.131061
    Step 3: arch=[[128, 128, 128, 128]], score=-0.007727
    Step 4: arch=[[1024, 1024]], score=0.002686
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.010936
    Step 6: arch=[[512, 512]], score=-0.010273
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.033790
    Step 10: arch=[[64], [2048, 2048, 2048, 2048], [1024], [512], [2048, 2048, 2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_70 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.009584
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120711
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.119685
    Step 4: arch=[[512, 512, 512]], score=0.006828
    Step 5: arch=[[512, 512]], score=-0.011998
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.030407
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.031579
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.073555
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002138
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.003307
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003131
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.001316
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.011714
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.003853
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.006008
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.004286

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.017482
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.014177
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002993
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007542
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.003095
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007542
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008813
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.008565

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.051569
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.095380
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.049055
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.039906
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.051444
    Step 7: arch=[[128, 128, 128, 128]], score=0.014403
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.021081
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.053070

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.119685
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120779
    Step 3: arch=[[128, 128, 128, 128]], score=0.014403
    Step 4: arch=[[1024, 1024]], score=0.001677
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002460
    Step 6: arch=[[512, 512]], score=-0.011998
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039568
    Step 10: arch=[[256, 256]], score=-0.017517

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.035895
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.113293
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.034053
    Step 4: arch=[[256, 256], [512, 512]], score=-0.008356
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.003988
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.039709
    Step 9: arch=[[128, 128]], score=-0.019948
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.119839

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.119685
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120779
    Step 3: arch=[[128, 128, 128, 128]], score=0.014403
    Step 4: arch=[[1024, 1024]], score=0.001677
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002460
    Step 6: arch=[[512, 512]], score=-0.011998
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039568
    Step 10: arch=[[2048, 2048, 2048], [128, 128, 128], [1024, 1024, 1024, 1024]], score=0.119888

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.119685
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120779
    Step 3: arch=[[128, 128, 128, 128]], score=0.014403
    Step 4: arch=[[1024, 1024]], score=0.001677
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002460
    Step 6: arch=[[512, 512]], score=-0.011998
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039568
    Step 10: arch=[[2048, 2048, 2048], [512, 512, 512], [512, 512, 512, 512], [512, 512]], score=0.119803

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.119685
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.120779
    Step 3: arch=[[128, 128, 128, 128]], score=0.014403
    Step 4: arch=[[1024, 1024]], score=0.001677
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002460
    Step 6: arch=[[512, 512]], score=-0.011998
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.039568
    Step 10: arch=[[128, 128, 128, 128, 128], [1024, 1024, 1024, 1024], [512, 512, 512, 512, 512], [512, 512, 512], [2048, 2048]], score=-100.000000


=== Modifiers: modifiers_71 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.077895
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.118537
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.079535
    Step 4: arch=[[512, 512, 512]], score=-0.010458
    Step 5: arch=[[512, 512]], score=-0.023343
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.073016
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.006205
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.052726
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.116597

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.019230
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.007070
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.006391
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.005612
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.003091
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.009791
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.009502
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.006607

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.011849
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.009555
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002052
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006075
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005297
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006075
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.006921
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.005718

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.052924
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.069602
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.070004
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.096379
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.118487
    Step 7: arch=[[128, 128, 128, 128]], score=-0.005407
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.029363
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.051529

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.079535
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113002
    Step 3: arch=[[128, 128, 128, 128]], score=-0.005407
    Step 4: arch=[[1024, 1024]], score=-0.013920
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.019021
    Step 6: arch=[[512, 512]], score=-0.023343
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013062
    Step 10: arch=[[256, 256]], score=-0.027037

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.039918
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.102611
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.031082
    Step 4: arch=[[256, 256], [512, 512]], score=-0.018034
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.017815
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.021787
    Step 9: arch=[[128, 128]], score=-0.028630
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.116462

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.079535
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113002
    Step 3: arch=[[128, 128, 128, 128]], score=-0.005407
    Step 4: arch=[[1024, 1024]], score=-0.013920
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.019021
    Step 6: arch=[[512, 512]], score=-0.023343
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013062
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128], [256, 256, 256, 256], [128], [256, 256, 256, 256]], score=0.120110

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.079535
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113002
    Step 3: arch=[[128, 128, 128, 128]], score=-0.005407
    Step 4: arch=[[1024, 1024]], score=-0.013920
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.019021
    Step 6: arch=[[512, 512]], score=-0.023343
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013062
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.079535
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113002
    Step 3: arch=[[128, 128, 128, 128]], score=-0.005407
    Step 4: arch=[[1024, 1024]], score=-0.013920
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.019021
    Step 6: arch=[[512, 512]], score=-0.023343
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013062
    Step 10: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=-100.000000


=== Modifiers: modifiers_72 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.120309
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.048318
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.082064
    Step 4: arch=[[512, 512, 512]], score=-0.020786
    Step 5: arch=[[512, 512]], score=-0.027169
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.079922
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.018184
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.070405
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.013594
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.011775
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.001452
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000307
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010814
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.005539
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.019252
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.001104

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.004961
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002522
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002107
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006449
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005304
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006449
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007236
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.004836

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.036458
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.051537
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.047939
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.060018
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.122828
    Step 7: arch=[[128, 128, 128, 128]], score=-0.022820
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.032708
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.048323

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.082064
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.122045
    Step 3: arch=[[128, 128, 128, 128]], score=-0.022820
    Step 4: arch=[[1024, 1024]], score=-0.017350
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018811
    Step 6: arch=[[512, 512]], score=-0.027169
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013452
    Step 10: arch=[[256, 256]], score=-0.030683

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.043688
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.118602
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.045273
    Step 4: arch=[[256, 256], [512, 512]], score=-0.003290
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.028160
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.073521
    Step 9: arch=[[128, 128]], score=-0.032091
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.121478

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.082064
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.122045
    Step 3: arch=[[128, 128, 128, 128]], score=-0.022820
    Step 4: arch=[[1024, 1024]], score=-0.017350
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018811
    Step 6: arch=[[512, 512]], score=-0.027169
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013452
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=0.116369

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.082064
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.122045
    Step 3: arch=[[128, 128, 128, 128]], score=-0.022820
    Step 4: arch=[[1024, 1024]], score=-0.017350
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018811
    Step 6: arch=[[512, 512]], score=-0.027169
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013452
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.082064
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.122045
    Step 3: arch=[[128, 128, 128, 128]], score=-0.022820
    Step 4: arch=[[1024, 1024]], score=-0.017350
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.018811
    Step 6: arch=[[512, 512]], score=-0.027169
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.013452
    Step 10: arch=[[128]], score=-0.036727


=== Modifiers: modifiers_73 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.083362
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.085964
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.039670
    Step 5: arch=[[512, 512]], score=-0.052308
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.020409
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.091383
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.032664
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.059141
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.003609
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.013517
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004752
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.004316
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.022702
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.010252
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.006553
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.027479

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.011190
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.005801
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005051
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016554
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.016118
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016554
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.018735
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.018286

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.078709
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.085805
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.088083
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.067516
    Step 7: arch=[[128, 128, 128, 128]], score=-0.043523
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.067187
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.081554

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.043523
    Step 4: arch=[[1024, 1024]], score=-0.031749
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.024610
    Step 6: arch=[[512, 512]], score=-0.052308
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.020742
    Step 10: arch=[[256, 256]], score=-0.061166

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.070697
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.062550
    Step 4: arch=[[256, 256], [512, 512]], score=-0.021738
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.091258
    Step 7: arch=[[64, 64, 64]], score=-0.056418
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.085695
    Step 9: arch=[[128, 128]], score=-0.065239
    Step 10: arch=[[128, 128, 128], [256, 256, 256]], score=-0.004865

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.043523
    Step 4: arch=[[1024, 1024]], score=-0.031749
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.024610
    Step 6: arch=[[512, 512]], score=-0.052308
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.020742
    Step 10: arch=[[128, 128], [2048]], score=-0.001597

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.043523
    Step 4: arch=[[1024, 1024]], score=-0.031749
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.024610
    Step 6: arch=[[512, 512]], score=-0.052308
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.020742
    Step 10: arch=[[1024, 1024, 1024, 1024], [512]], score=0.025275

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.043523
    Step 4: arch=[[1024, 1024]], score=-0.031749
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.024610
    Step 6: arch=[[512, 512]], score=-0.052308
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.020742
    Step 10: arch=[[256, 256, 256]], score=-0.049951


=== Modifiers: modifiers_74 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.055197
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.135428
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.028127
    Step 4: arch=[[512, 512, 512]], score=-0.013756
    Step 5: arch=[[512, 512]], score=-0.018228
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.027042
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.008783
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.053421
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.008461
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.003936
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.009448
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007600
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=-0.001472
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.011808
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.003297
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.005182

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003924
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002978
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000818
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.003957
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.002109
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.003957
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.004266
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.003506

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.018256
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.050239
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.038180
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.096428
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.090562
    Step 7: arch=[[128, 128, 128, 128]], score=-0.012581
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.020425
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.011237

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028127
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069731
    Step 3: arch=[[128, 128, 128, 128]], score=-0.012581
    Step 4: arch=[[1024, 1024]], score=-0.014372
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002883
    Step 6: arch=[[512, 512]], score=-0.018228
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002355
    Step 10: arch=[[256, 256]], score=-0.019618

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.007439
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.074351
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.005609
    Step 4: arch=[[256, 256], [512, 512]], score=-0.013297
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.016660
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.007733
    Step 9: arch=[[128, 128]], score=-0.020178
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [512, 512]], score=0.132205

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028127
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069731
    Step 3: arch=[[128, 128, 128, 128]], score=-0.012581
    Step 4: arch=[[1024, 1024]], score=-0.014372
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002883
    Step 6: arch=[[512, 512]], score=-0.018228
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002355
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048], [64, 64, 64, 64, 64], [2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028127
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069731
    Step 3: arch=[[128, 128, 128, 128]], score=-0.012581
    Step 4: arch=[[1024, 1024]], score=-0.014372
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002883
    Step 6: arch=[[512, 512]], score=-0.018228
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002355
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128], [1024, 1024, 1024, 1024], [512, 512], [128, 128]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.028127
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.069731
    Step 3: arch=[[128, 128, 128, 128]], score=-0.012581
    Step 4: arch=[[1024, 1024]], score=-0.014372
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.002883
    Step 6: arch=[[512, 512]], score=-0.018228
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002355
    Step 10: arch=[[2048, 2048, 2048], [2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512, 512], [128, 128, 128, 128, 128]], score=-100.000000


=== Modifiers: modifiers_75 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.108048
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.108203
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.006005
    Step 5: arch=[[512, 512]], score=-0.015563
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.069372
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.120603
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.020638
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.107499
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.022145
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.010823
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.001788
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001385
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010093
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.035516
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.057824
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.046767

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.007323
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002086
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.008888
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014041
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.013638
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014041
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.018162
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.017496

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.065344
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.111232
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.052503
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.089128
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.110435
    Step 7: arch=[[128, 128, 128, 128]], score=-0.027450
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.045006
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.046231

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.116039
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027450
    Step 4: arch=[[1024, 1024]], score=0.023569
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013383
    Step 6: arch=[[512, 512]], score=-0.015563
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.108051
    Step 10: arch=[[256, 256]], score=-0.032936

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.039421
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.114013
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.032116
    Step 4: arch=[[256, 256], [512, 512]], score=-0.012912
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.038332
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.055749
    Step 9: arch=[[128, 128]], score=-0.041074
    Step 10: arch=[[2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.112417

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.116039
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027450
    Step 4: arch=[[1024, 1024]], score=0.023569
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013383
    Step 6: arch=[[512, 512]], score=-0.015563
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.108051
    Step 10: arch=[[2048, 2048], [64], [64, 64, 64, 64], [1024, 1024]], score=0.112181

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.116039
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027450
    Step 4: arch=[[1024, 1024]], score=0.023569
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013383
    Step 6: arch=[[512, 512]], score=-0.015563
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.108051
    Step 10: arch=[[512, 512, 512, 512], [256, 256], [256, 256], [2048, 2048, 2048]], score=0.112525

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.116039
    Step 3: arch=[[128, 128, 128, 128]], score=-0.027450
    Step 4: arch=[[1024, 1024]], score=0.023569
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.013383
    Step 6: arch=[[512, 512]], score=-0.015563
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.108051
    Step 10: arch=[[256, 256, 256], [1024, 1024], [1024, 1024], [128]], score=0.032807


=== Modifiers: modifiers_76 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.125339
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.097635
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.005689
    Step 5: arch=[[512, 512]], score=0.000394
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.101031
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.146511
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.005755
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.084166
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.044194

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.020335
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.018174
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.001120
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000152
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.005931
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.031192
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.051621
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.049197

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003469
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002357
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005400
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008015
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007047
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008015
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.010456
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006897

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.025452
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.008526
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.035753
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.139201
    Step 7: arch=[[128, 128, 128, 128]], score=-0.008806
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.017197
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.007673

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.008806
    Step 4: arch=[[1024, 1024]], score=0.024978
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002118
    Step 6: arch=[[512, 512]], score=0.000394
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.116233
    Step 9: arch=[[2048, 2048]], score=0.088480
    Step 10: arch=[[256, 256]], score=-0.010106

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.004623
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.004543
    Step 4: arch=[[256, 256], [512, 512]], score=-0.003112
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.014258
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.029638
    Step 9: arch=[[128, 128]], score=-0.014908
    Step 10: arch=[[256, 256, 256], [1024, 1024], [256, 256]], score=0.009933

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.008806
    Step 4: arch=[[1024, 1024]], score=0.024978
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002118
    Step 6: arch=[[512, 512]], score=0.000394
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.116233
    Step 9: arch=[[2048, 2048]], score=0.088480
    Step 10: arch=[[512], [2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [256, 256, 256, 256], [64]], score=0.134554

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.008806
    Step 4: arch=[[1024, 1024]], score=0.024978
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002118
    Step 6: arch=[[512, 512]], score=0.000394
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.116233
    Step 9: arch=[[2048, 2048]], score=0.088480
    Step 10: arch=[[512, 512]], score=0.000394

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.008806
    Step 4: arch=[[1024, 1024]], score=0.024978
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.002118
    Step 6: arch=[[512, 512]], score=0.000394
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.116233
    Step 9: arch=[[2048, 2048]], score=0.088480
    Step 10: arch=[[128], [2048, 2048, 2048]], score=0.019009


=== Modifiers: modifiers_77 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.081832
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.121792
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.026443
    Step 4: arch=[[512, 512, 512]], score=-0.014198
    Step 5: arch=[[512, 512]], score=-0.022593
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.064617
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.001972
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.062431
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.009934
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.002101
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003101
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001640
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.009045
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.008396
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.001614
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.005538

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.008039
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.006601
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001354
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006291
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004830
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006291
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.006859
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.004824

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.037202
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.016550
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.053867
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.085485
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009929
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.026334
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.041818

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.026443
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.092182
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009929
    Step 4: arch=[[1024, 1024]], score=-0.017443
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.009141
    Step 6: arch=[[512, 512]], score=-0.022593
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004345
    Step 10: arch=[[256, 256]], score=-0.024818

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.033861
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.059216
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.030081
    Step 4: arch=[[256, 256], [512, 512]], score=-0.010381
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.018399
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.035868
    Step 9: arch=[[128, 128]], score=-0.025843
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=0.090869

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.026443
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.092182
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009929
    Step 4: arch=[[1024, 1024]], score=-0.017443
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.009141
    Step 6: arch=[[512, 512]], score=-0.022593
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004345
    Step 10: arch=[[512, 512, 512, 512], [64, 64], [64, 64], [1024], [128, 128, 128]], score=0.063859

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.026443
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.092182
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009929
    Step 4: arch=[[1024, 1024]], score=-0.017443
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.009141
    Step 6: arch=[[512, 512]], score=-0.022593
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004345
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [2048, 2048], [512, 512]], score=0.124038

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.026443
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.092182
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009929
    Step 4: arch=[[1024, 1024]], score=-0.017443
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.009141
    Step 6: arch=[[512, 512]], score=-0.022593
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.004345
    Step 10: arch=[[2048, 2048, 2048, 2048]], score=0.026443


=== Modifiers: modifiers_78 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.105397
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.082760
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.038516
    Step 5: arch=[[512, 512]], score=-0.043697
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.054111
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.035098
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.051687
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.006915
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.009576
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004160
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.003657
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.008496
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.015349
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.008326
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.026691

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.004728
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002583
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002039
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007519
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007017
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007519
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008417
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006392

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.060150
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.012103
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.092570
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.106972
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.039722
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.049785
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.069439

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.081465
    Step 3: arch=[[128, 128, 128, 128]], score=-0.039722
    Step 4: arch=[[1024, 1024]], score=-0.035627
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027825
    Step 6: arch=[[512, 512]], score=-0.043697
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.015924
    Step 10: arch=[[256, 256]], score=-0.047287

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.064815
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.092909
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.052681
    Step 4: arch=[[256, 256], [512, 512]], score=-0.020342
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.045189
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.048016
    Step 9: arch=[[128, 128]], score=-0.048971
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.106124

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.081465
    Step 3: arch=[[128, 128, 128, 128]], score=-0.039722
    Step 4: arch=[[1024, 1024]], score=-0.035627
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027825
    Step 6: arch=[[512, 512]], score=-0.043697
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.015924
    Step 10: arch=[[2048, 2048, 2048, 2048], [256, 256], [128, 128, 128, 128, 128]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.081465
    Step 3: arch=[[128, 128, 128, 128]], score=-0.039722
    Step 4: arch=[[1024, 1024]], score=-0.035627
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027825
    Step 6: arch=[[512, 512]], score=-0.043697
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.015924
    Step 10: arch=[[1024, 1024], [512], [128, 128], [1024, 1024], [64, 64, 64, 64, 64]], score=0.072523

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.081465
    Step 3: arch=[[128, 128, 128, 128]], score=-0.039722
    Step 4: arch=[[1024, 1024]], score=-0.035627
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027825
    Step 6: arch=[[512, 512]], score=-0.043697
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.015924
    Step 10: arch=[[2048], [128]], score=-0.028065


=== Modifiers: modifiers_79 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.060373
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.088304
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.099065
    Step 4: arch=[[512, 512, 512]], score=0.032685
    Step 5: arch=[[512, 512]], score=-0.006042
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.086850
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.067094
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.064054
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.012795
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.010001
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002289
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001922
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.025445
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.046277
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.059195
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.057248

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.035458
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.023568
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.011128
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.022986
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.022620
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.022986
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.028014
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.026952

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.086930
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.094817
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.049884
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.023830
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.090763
    Step 7: arch=[[128, 128, 128, 128]], score=0.032384
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.041734
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.081187

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.099065
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097690
    Step 3: arch=[[128, 128, 128, 128]], score=0.032384
    Step 4: arch=[[1024, 1024]], score=0.042771
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.024338
    Step 6: arch=[[512, 512]], score=-0.006042
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.090040
    Step 10: arch=[[256, 256]], score=-0.027240

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.046478
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.095582
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.052811
    Step 4: arch=[[256, 256], [512, 512]], score=-0.005047
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.086999
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.093644
    Step 7: arch=[[64, 64, 64]], score=-0.007226
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.087516
    Step 9: arch=[[128, 128]], score=-0.037036
    Step 10: arch=[[2048], [2048], [2048, 2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.099065
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097690
    Step 3: arch=[[128, 128, 128, 128]], score=0.032384
    Step 4: arch=[[1024, 1024]], score=0.042771
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.024338
    Step 6: arch=[[512, 512]], score=-0.006042
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.090040
    Step 10: arch=[[2048], [64, 64, 64]], score=0.068669

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.099065
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097690
    Step 3: arch=[[128, 128, 128, 128]], score=0.032384
    Step 4: arch=[[1024, 1024]], score=0.042771
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.024338
    Step 6: arch=[[512, 512]], score=-0.006042
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.090040
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128], [512, 512, 512, 512], [256, 256]], score=0.100672

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.099065
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.097690
    Step 3: arch=[[128, 128, 128, 128]], score=0.032384
    Step 4: arch=[[1024, 1024]], score=0.042771
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.024338
    Step 6: arch=[[512, 512]], score=-0.006042
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.090040
    Step 10: arch=[[64], [128], [64, 64], [64]], score=-0.071380


=== Modifiers: modifiers_80 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.082799
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.085332
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.012083
    Step 5: arch=[[512, 512]], score=-0.022882
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.054799
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.004913
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.047589
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.008284
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.001604
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004109
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002003
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.013084
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.004202
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.012563
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.003357

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.009561
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.005454
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003819
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009950
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007844
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009950
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.011594
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.009827

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.045441
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.084721
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.048604
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.069846
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.115136
    Step 7: arch=[[128, 128, 128, 128]], score=-0.014191
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.034216
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.043175

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.014191
    Step 4: arch=[[1024, 1024]], score=-0.006893
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000728
    Step 6: arch=[[512, 512]], score=-0.022882
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.034802
    Step 10: arch=[[256, 256]], score=-0.029662

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.033897
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.032043
    Step 4: arch=[[256, 256], [512, 512]], score=-0.010721
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.025013
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.059009
    Step 9: arch=[[128, 128]], score=-0.032748
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.062956

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.014191
    Step 4: arch=[[1024, 1024]], score=-0.006893
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000728
    Step 6: arch=[[512, 512]], score=-0.022882
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.034802
    Step 10: arch=[[2048], [512, 512], [64, 64]], score=0.034955

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.014191
    Step 4: arch=[[1024, 1024]], score=-0.006893
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000728
    Step 6: arch=[[512, 512]], score=-0.022882
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.034802
    Step 10: arch=[[64, 64, 64, 64, 64]], score=-0.006609

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.014191
    Step 4: arch=[[1024, 1024]], score=-0.006893
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.000728
    Step 6: arch=[[512, 512]], score=-0.022882
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.034802
    Step 10: arch=[[512, 512, 512], [64, 64]], score=-0.002754


=== Modifiers: modifiers_81 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.085930
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.105695
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.026437
    Step 5: arch=[[512, 512]], score=-0.032763
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.039564
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.028775
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.013791
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.111643

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.011001
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.003323
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.008273
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.007077
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.008750
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.009230
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.001847
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.003657

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.004989
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.000967
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003710
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011116
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.009921
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011116
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.012744
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.011275

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.046659
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.092632
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.061694
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.110685
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.110537
    Step 7: arch=[[128, 128, 128, 128]], score=-0.033459
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.044311
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.031571

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.110332
    Step 3: arch=[[128, 128, 128, 128]], score=-0.033459
    Step 4: arch=[[1024, 1024]], score=-0.016285
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033304
    Step 6: arch=[[512, 512]], score=-0.032763
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027164
    Step 10: arch=[[256, 256]], score=-0.039690

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.026889
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.111452
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.018425
    Step 4: arch=[[256, 256], [512, 512]], score=-0.022123
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.039710
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.028468
    Step 9: arch=[[128, 128]], score=-0.042826
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.112433

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.110332
    Step 3: arch=[[128, 128, 128, 128]], score=-0.033459
    Step 4: arch=[[1024, 1024]], score=-0.016285
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033304
    Step 6: arch=[[512, 512]], score=-0.032763
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027164
    Step 10: arch=[[2048, 2048], [64], [64, 64, 64, 64], [1024, 1024]], score=0.105403

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.110332
    Step 3: arch=[[128, 128, 128, 128]], score=-0.033459
    Step 4: arch=[[1024, 1024]], score=-0.016285
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033304
    Step 6: arch=[[512, 512]], score=-0.032763
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027164
    Step 10: arch=[[1024, 1024, 1024, 1024], [1024], [256, 256, 256]], score=0.072830

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.110332
    Step 3: arch=[[128, 128, 128, 128]], score=-0.033459
    Step 4: arch=[[1024, 1024]], score=-0.016285
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033304
    Step 6: arch=[[512, 512]], score=-0.032763
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.027164
    Step 10: arch=[[2048, 2048]], score=0.027164


=== Modifiers: modifiers_82 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.104399
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.105171
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.111218
    Step 4: arch=[[512, 512, 512]], score=-0.008361
    Step 5: arch=[[512, 512]], score=-0.016551
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.045556
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.032881
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.093305
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.109245

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.024373
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.016090
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003117
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002739
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.027703
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.035786
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.060262
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.055870

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.005258
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.006376
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.010951
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.023955
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.023577
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.023955
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.028892
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.028199

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.045881
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.108770
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.012420
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.091822
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.104651
    Step 7: arch=[[128, 128, 128, 128]], score=-0.037469
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.051241
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.004559

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.111218
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.111965
    Step 3: arch=[[128, 128, 128, 128]], score=-0.037469
    Step 4: arch=[[1024, 1024]], score=0.030288
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018705
    Step 6: arch=[[512, 512]], score=-0.016551
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113241
    Step 9: arch=[[2048, 2048]], score=0.105801
    Step 10: arch=[[256, 256]], score=-0.037093

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=-0.000028
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.110185
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.001813
    Step 4: arch=[[256, 256], [512, 512]], score=-0.011231
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.046834
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.085908
    Step 9: arch=[[128, 128]], score=-0.046645
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=0.115212

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.111218
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.111965
    Step 3: arch=[[128, 128, 128, 128]], score=-0.037469
    Step 4: arch=[[1024, 1024]], score=0.030288
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018705
    Step 6: arch=[[512, 512]], score=-0.016551
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113241
    Step 9: arch=[[2048, 2048]], score=0.105801
    Step 10: arch=[[2048], [512, 512, 512, 512], [64, 64, 64, 64, 64], [2048, 2048, 2048, 2048], [2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.111218
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.111965
    Step 3: arch=[[128, 128, 128, 128]], score=-0.037469
    Step 4: arch=[[1024, 1024]], score=0.030288
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018705
    Step 6: arch=[[512, 512]], score=-0.016551
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113241
    Step 9: arch=[[2048, 2048]], score=0.105801
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [64, 64, 64, 64], [128, 128, 128, 128, 128], [1024, 1024, 1024]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.111218
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.111965
    Step 3: arch=[[128, 128, 128, 128]], score=-0.037469
    Step 4: arch=[[1024, 1024]], score=0.030288
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.018705
    Step 6: arch=[[512, 512]], score=-0.016551
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.113241
    Step 9: arch=[[2048, 2048]], score=0.105801
    Step 10: arch=[[1024, 1024], [1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=0.107765


=== Modifiers: modifiers_83 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.099795
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.036034
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.013933
    Step 5: arch=[[512, 512]], score=-0.030580
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.091594
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.115846
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.001638
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.020702
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.013208
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.008602
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003068
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002719
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.022420
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.006287
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.019642
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.006459

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.015661
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.010325
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005106
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016606
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.016258
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.016606
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.018951
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.016299

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.054221
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.049551
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.061191
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.105179
    Step 7: arch=[[128, 128, 128, 128]], score=-0.013797
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.046874
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055241

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013797
    Step 4: arch=[[1024, 1024]], score=-0.009539
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004024
    Step 6: arch=[[512, 512]], score=-0.030580
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040286
    Step 10: arch=[[256, 256]], score=-0.040133

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.039806
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.044009
    Step 4: arch=[[256, 256], [512, 512]], score=-0.007600
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.109419
    Step 7: arch=[[64, 64, 64]], score=-0.031499
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.084405
    Step 9: arch=[[128, 128]], score=-0.044667
    Step 10: arch=[[128, 128, 128], [256, 256, 256]], score=0.005265

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013797
    Step 4: arch=[[1024, 1024]], score=-0.009539
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004024
    Step 6: arch=[[512, 512]], score=-0.030580
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040286
    Step 10: arch=[[2048, 2048], [512, 512]], score=0.079346

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013797
    Step 4: arch=[[1024, 1024]], score=-0.009539
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004024
    Step 6: arch=[[512, 512]], score=-0.030580
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040286
    Step 10: arch=[[128, 128, 128, 128], [128, 128]], score=0.001929

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013797
    Step 4: arch=[[1024, 1024]], score=-0.009539
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004024
    Step 6: arch=[[512, 512]], score=-0.030580
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.040286
    Step 10: arch=[[64, 64, 64, 64], [512, 512]], score=0.015516


=== Modifiers: modifiers_84 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.113683
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.072089
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.026640
    Step 5: arch=[[512, 512]], score=-0.028338
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.072986
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.030310
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.042567
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.019561
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.010024
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004468
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.003247
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.011751
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.011567
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.008058
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.001842

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.001113
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000895
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001871
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008837
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007615
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008837
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009651
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006986

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.025353
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.031541
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.036229
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.075592
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.031289
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.033981
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.017668

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.031289
    Step 4: arch=[[1024, 1024]], score=-0.020452
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027259
    Step 6: arch=[[512, 512]], score=-0.028338
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000082
    Step 10: arch=[[256, 256]], score=-0.031706

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.016689
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.065827
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.012523
    Step 4: arch=[[256, 256], [512, 512]], score=-0.013862
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.125099
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.033038
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.026747
    Step 9: arch=[[128, 128]], score=-0.033247
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.007931

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.031289
    Step 4: arch=[[1024, 1024]], score=-0.020452
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027259
    Step 6: arch=[[512, 512]], score=-0.028338
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000082
    Step 10: arch=[[512, 512], [2048, 2048], [1024, 1024, 1024], [128]], score=0.098192

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.031289
    Step 4: arch=[[1024, 1024]], score=-0.020452
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027259
    Step 6: arch=[[512, 512]], score=-0.028338
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000082
    Step 10: arch=[[128, 128, 128], [128], [128, 128, 128, 128, 128]], score=0.007946

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.031289
    Step 4: arch=[[1024, 1024]], score=-0.020452
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.027259
    Step 6: arch=[[512, 512]], score=-0.028338
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.000082
    Step 10: arch=[[128, 128], [1024, 1024]], score=-0.001148


=== Modifiers: modifiers_85 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.064276
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120174
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.003871
    Step 5: arch=[[512, 512]], score=-0.010036
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.058541
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.017276
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.070807
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.085463

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.001591
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.000672
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003656
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001098
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.004557
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.014825
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.016503
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.008676

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.012239
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.008735
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003115
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.005184
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.002626
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.005184
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.006480
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.004501

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.041537
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.109937
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.040141
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.035369
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.005419
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.019434
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.044257

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.005419
    Step 4: arch=[[1024, 1024]], score=0.004797
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021383
    Step 6: arch=[[512, 512]], score=-0.010036
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.094468
    Step 9: arch=[[2048, 2048]], score=0.047566
    Step 10: arch=[[256, 256]], score=-0.015816

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.032400
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.125743
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.033143
    Step 4: arch=[[256, 256], [512, 512]], score=-0.004524
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.080196
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.007679
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.045897
    Step 9: arch=[[128, 128]], score=-0.018296
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=0.003310

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.005419
    Step 4: arch=[[1024, 1024]], score=0.004797
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021383
    Step 6: arch=[[512, 512]], score=-0.010036
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.094468
    Step 9: arch=[[2048, 2048]], score=0.047566
    Step 10: arch=[[64, 64, 64, 64], [1024, 1024, 1024, 1024, 1024], [128, 128, 128], [2048, 2048, 2048], [64]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.005419
    Step 4: arch=[[1024, 1024]], score=0.004797
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021383
    Step 6: arch=[[512, 512]], score=-0.010036
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.094468
    Step 9: arch=[[2048, 2048]], score=0.047566
    Step 10: arch=[[512, 512], [1024, 1024], [256, 256, 256, 256, 256], [64, 64, 64]], score=0.020151

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=0.005419
    Step 4: arch=[[1024, 1024]], score=0.004797
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.021383
    Step 6: arch=[[512, 512]], score=-0.010036
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.094468
    Step 9: arch=[[2048, 2048]], score=0.047566
    Step 10: arch=[[128], [2048, 2048, 2048]], score=0.024315


=== Modifiers: modifiers_86 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.039299
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.095674
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.013136
    Step 5: arch=[[512, 512]], score=-0.032744
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.038491
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.009118
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.022419
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.004600
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.013890
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004272
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.002277
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.019492
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.009255
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.004570
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.007641

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.018602
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.013542
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004826
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014995
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.013000
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.014995
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.017199
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.016740

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.078533
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.085322
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.085849
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.095893
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.095421
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009254
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.048065
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.072972

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.096423
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009254
    Step 4: arch=[[1024, 1024]], score=-0.012768
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040020
    Step 6: arch=[[512, 512]], score=-0.032744
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.035074
    Step 10: arch=[[256, 256]], score=-0.041745

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.054600
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.096906
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.044112
    Step 4: arch=[[256, 256], [512, 512]], score=-0.022228
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.029754
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.048399
    Step 9: arch=[[128, 128]], score=-0.045999
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.096533

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.096423
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009254
    Step 4: arch=[[1024, 1024]], score=-0.012768
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040020
    Step 6: arch=[[512, 512]], score=-0.032744
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.035074
    Step 10: arch=[[2048, 2048], [2048, 2048], [128, 128, 128, 128], [512]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.096423
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009254
    Step 4: arch=[[1024, 1024]], score=-0.012768
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040020
    Step 6: arch=[[512, 512]], score=-0.032744
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.035074
    Step 10: arch=[[512], [512, 512], [256, 256, 256]], score=0.008950

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.096423
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009254
    Step 4: arch=[[1024, 1024]], score=-0.012768
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.040020
    Step 6: arch=[[512, 512]], score=-0.032744
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.035074
    Step 10: arch=[[256, 256, 256], [256, 256, 256], [128, 128], [64]], score=0.009132


=== Modifiers: modifiers_87 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.073012
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.101696
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.048337
    Step 5: arch=[[512, 512]], score=-0.051172
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.008466
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.101990
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.049350
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.015556
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.009051
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.009447
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.010237
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.008666
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.011645
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.032551
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.023446
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.034004

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.002395
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.000316
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001977
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011495
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.009924
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011495
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.012362
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.012006

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.047498
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.031348
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.079386
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.104386
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.058188
    Step 7: arch=[[128, 128, 128, 128]], score=-0.051645
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.057015
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.039829

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.034357
    Step 3: arch=[[128, 128, 128, 128]], score=-0.051645
    Step 4: arch=[[1024, 1024]], score=-0.043416
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047945
    Step 6: arch=[[512, 512]], score=-0.051172
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.024449
    Step 10: arch=[[256, 256]], score=-0.054619

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.037535
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.091657
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.026423
    Step 4: arch=[[256, 256], [512, 512]], score=-0.028437
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.054747
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.030421
    Step 9: arch=[[128, 128]], score=-0.056234
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.103506

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.034357
    Step 3: arch=[[128, 128, 128, 128]], score=-0.051645
    Step 4: arch=[[1024, 1024]], score=-0.043416
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047945
    Step 6: arch=[[512, 512]], score=-0.051172
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.024449
    Step 10: arch=[[2048, 2048, 2048, 2048], [2048], [256, 256, 256, 256, 256], [256, 256], [256, 256, 256, 256, 256]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.034357
    Step 3: arch=[[128, 128, 128, 128]], score=-0.051645
    Step 4: arch=[[1024, 1024]], score=-0.043416
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047945
    Step 6: arch=[[512, 512]], score=-0.051172
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.024449
    Step 10: arch=[[256], [2048, 2048], [64, 64, 64]], score=0.073975

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.034357
    Step 3: arch=[[128, 128, 128, 128]], score=-0.051645
    Step 4: arch=[[1024, 1024]], score=-0.043416
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047945
    Step 6: arch=[[512, 512]], score=-0.051172
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.024449
    Step 10: arch=[[2048, 2048, 2048], [128]], score=-0.010260


=== Modifiers: modifiers_88 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.043455
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.106600
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.014806
    Step 5: arch=[[512, 512]], score=-0.032817
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.050959
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.006407
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.065660
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.004039
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.023904
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005981
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.005628
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.002744
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.013721
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.009649
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.011185

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.016563
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.012581
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003644
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006977
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.006623
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006977
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.008524
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.007039

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.097166
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.091626
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.102148
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.103743
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.101182
    Step 7: arch=[[128, 128, 128, 128]], score=-0.009824
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.043658
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.094438

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009824
    Step 4: arch=[[1024, 1024]], score=-0.016874
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.057808
    Step 6: arch=[[512, 512]], score=-0.032817
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.026388
    Step 10: arch=[[256, 256]], score=-0.039367

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.078207
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.053167
    Step 4: arch=[[256, 256], [512, 512]], score=-0.033362
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.027516
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.018559
    Step 9: arch=[[128, 128]], score=-0.042287
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024], [512], [512]], score=0.055291

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009824
    Step 4: arch=[[1024, 1024]], score=-0.016874
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.057808
    Step 6: arch=[[512, 512]], score=-0.032817
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.026388
    Step 10: arch=[[2048, 2048], [512, 512]], score=0.040600

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009824
    Step 4: arch=[[1024, 1024]], score=-0.016874
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.057808
    Step 6: arch=[[512, 512]], score=-0.032817
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.026388
    Step 10: arch=[[128, 128, 128, 128, 128], [512]], score=0.008373

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.009824
    Step 4: arch=[[1024, 1024]], score=-0.016874
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.057808
    Step 6: arch=[[512, 512]], score=-0.032817
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.026388
    Step 10: arch=[[128, 128], [512, 512]], score=-0.037025


=== Modifiers: modifiers_89 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.079278
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.124886
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.005776
    Step 4: arch=[[512, 512, 512]], score=-0.023176
    Step 5: arch=[[512, 512]], score=-0.026481
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.054530
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.130331
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.020239
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.078936
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.011782
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.000105
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003316
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001777
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010620
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.016611
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.004756
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.008687

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003026
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.001899
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001062
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006996
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.005456
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.006996
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.007450
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.005567

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.030390
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.007072
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.046255
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.082343
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.124235
    Step 7: arch=[[128, 128, 128, 128]], score=-0.023201
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.029528
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.026886

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.005776
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.081519
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023201
    Step 4: arch=[[1024, 1024]], score=-0.022315
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033663
    Step 6: arch=[[512, 512]], score=-0.026481
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011792
    Step 10: arch=[[256, 256]], score=-0.028290

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.023924
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.040164
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.016715
    Step 4: arch=[[256, 256], [512, 512]], score=-0.014842
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.131965
    Step 7: arch=[[64, 64, 64]], score=-0.026582
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.017449
    Step 9: arch=[[128, 128]], score=-0.029127
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128], [2048], [128]], score=0.049766

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.005776
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.081519
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023201
    Step 4: arch=[[1024, 1024]], score=-0.022315
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033663
    Step 6: arch=[[512, 512]], score=-0.026481
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011792
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [2048], [64, 64, 64, 64, 64], [2048]], score=0.127051

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.005776
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.081519
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023201
    Step 4: arch=[[1024, 1024]], score=-0.022315
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033663
    Step 6: arch=[[512, 512]], score=-0.026481
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011792
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [2048, 2048], [512, 512]], score=0.125975

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.005776
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.081519
    Step 3: arch=[[128, 128, 128, 128]], score=-0.023201
    Step 4: arch=[[1024, 1024]], score=-0.022315
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.033663
    Step 6: arch=[[512, 512]], score=-0.026481
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.011792
    Step 10: arch=[[128, 128, 128, 128], [1024, 1024, 1024], [512], [512, 512, 512], [2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_90 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.114004
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.046331
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.116555
    Step 4: arch=[[512, 512, 512]], score=-0.008413
    Step 5: arch=[[512, 512]], score=-0.013940
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.096180
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=0.127297
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.029734
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.045581
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.029729
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.017227
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002372
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.001660
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.013593
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.031805
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.061709
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.056238

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003621
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.005753
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.008929
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.015609
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.014897
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.015609
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.019757
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.017767

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.052534
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.114637
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.036766
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.095271
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.117761
    Step 7: arch=[[128, 128, 128, 128]], score=-0.032919
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.043241
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.023700

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.116555
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119167
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032919
    Step 4: arch=[[1024, 1024]], score=0.024224
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.026483
    Step 6: arch=[[512, 512]], score=-0.013940
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.112142
    Step 10: arch=[[256, 256]], score=-0.031151

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.020516
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.116596
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.013263
    Step 4: arch=[[256, 256], [512, 512]], score=-0.014626
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=0.122543
    Step 7: arch=[[64, 64, 64]], score=-0.040174
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.048019
    Step 9: arch=[[128, 128]], score=-0.039289
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [128, 128, 128], [2048], [128]], score=0.120259

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.116555
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119167
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032919
    Step 4: arch=[[1024, 1024]], score=0.024224
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.026483
    Step 6: arch=[[512, 512]], score=-0.013940
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.112142
    Step 10: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024], [256, 256, 256, 256, 256]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.116555
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119167
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032919
    Step 4: arch=[[1024, 1024]], score=0.024224
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.026483
    Step 6: arch=[[512, 512]], score=-0.013940
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.112142
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.121402

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.116555
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.119167
    Step 3: arch=[[128, 128, 128, 128]], score=-0.032919
    Step 4: arch=[[1024, 1024]], score=0.024224
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.026483
    Step 6: arch=[[512, 512]], score=-0.013940
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.112142
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048], [1024, 1024, 1024], [1024, 1024, 1024, 1024], [512, 512, 512], [64, 64, 64, 64]], score=-100.000000


=== Modifiers: modifiers_91 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.049138
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.094346
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.032033
    Step 5: arch=[[512, 512]], score=-0.038227
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.011443
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.027921
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.015315
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002644
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.011125
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005530
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.003222
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.021859
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.023574
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.020891
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.025304

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.005484
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.003002
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002316
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.013909
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.011601
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.013909
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.014880
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.013805

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.037141
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.032854
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.050296
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.107998
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.033243
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.044727
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.026475

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.033243
    Step 4: arch=[[1024, 1024]], score=-0.029057
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.041627
    Step 6: arch=[[512, 512]], score=-0.038227
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.005143
    Step 10: arch=[[256, 256]], score=-0.042116

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.021154
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.073811
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.016434
    Step 4: arch=[[256, 256], [512, 512]], score=-0.018880
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.039449
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.041409
    Step 9: arch=[[128, 128]], score=-0.043886
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64, 64], [128, 128]], score=0.077681

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.033243
    Step 4: arch=[[1024, 1024]], score=-0.029057
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.041627
    Step 6: arch=[[512, 512]], score=-0.038227
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.005143
    Step 10: arch=[[512, 512], [2048, 2048], [1024, 1024, 1024], [128]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.033243
    Step 4: arch=[[1024, 1024]], score=-0.029057
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.041627
    Step 6: arch=[[512, 512]], score=-0.038227
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.005143
    Step 10: arch=[[128, 128, 128], [128], [128, 128, 128, 128, 128]], score=0.018334

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.033243
    Step 4: arch=[[1024, 1024]], score=-0.029057
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.041627
    Step 6: arch=[[512, 512]], score=-0.038227
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.005143
    Step 10: arch=[[64, 64, 64]], score=-0.039449


=== Modifiers: modifiers_92 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.076679
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.067036
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.029446
    Step 4: arch=[[512, 512, 512]], score=-0.020000
    Step 5: arch=[[512, 512]], score=-0.024441
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.050716
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.016683
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.037036
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.125863

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.018440
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.012647
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003324
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000603
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.020849
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.015922
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.002612
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.000747

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003862
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.002203
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001524
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011211
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.008489
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011211
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.011812
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.011018

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.015504
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.024776
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.016421
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.050945
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.020412
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.028360
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.006445

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.029446
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.083568
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020412
    Step 4: arch=[[1024, 1024]], score=-0.018540
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.021959
    Step 6: arch=[[512, 512]], score=-0.024441
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002190
    Step 10: arch=[[256, 256]], score=-0.026823

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.002716
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.043872
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.004396
    Step 4: arch=[[256, 256], [512, 512]], score=-0.009003
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.024666
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.037611
    Step 9: arch=[[128, 128]], score=-0.027872
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=0.103500

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.029446
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.083568
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020412
    Step 4: arch=[[1024, 1024]], score=-0.018540
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.021959
    Step 6: arch=[[512, 512]], score=-0.024441
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002190
    Step 10: arch=[[2048, 2048, 2048], [64], [128, 128], [512], [128, 128, 128, 128, 128]], score=0.038096

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.029446
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.083568
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020412
    Step 4: arch=[[1024, 1024]], score=-0.018540
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.021959
    Step 6: arch=[[512, 512]], score=-0.024441
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002190
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [2048, 2048], [512, 512]], score=0.112901

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.029446
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.083568
    Step 3: arch=[[128, 128, 128, 128]], score=-0.020412
    Step 4: arch=[[1024, 1024]], score=-0.018540
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.021959
    Step 6: arch=[[512, 512]], score=-0.024441
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=-0.002190
    Step 10: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024, 1024], [256, 256, 256, 256, 256], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024]], score=-100.000000


=== Modifiers: modifiers_93 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.068598
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.116359
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.024848
    Step 5: arch=[[512, 512]], score=-0.032375
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.046854
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.018613
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.081903
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.117209

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.012812
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.008897
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.005650
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.005172
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.003088
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.017233
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.004355
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.009177

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.006664
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.004159
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002304
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.005397
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.004919
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.005397
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.006348
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.005555

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.064602
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=-100.000000
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.090192
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.113365
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.025080
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.038829
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.061544

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.025080
    Step 4: arch=[[1024, 1024]], score=-0.022882
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047891
    Step 6: arch=[[512, 512]], score=-0.032375
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119261
    Step 9: arch=[[2048, 2048]], score=0.002877
    Step 10: arch=[[256, 256]], score=-0.036274

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055078
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.035948
    Step 4: arch=[[256, 256], [512, 512]], score=-0.027137
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.032416
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.017643
    Step 9: arch=[[128, 128]], score=-0.038013
    Step 10: arch=[[1024, 1024, 1024], [1024, 1024], [512], [512]], score=0.032048

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.025080
    Step 4: arch=[[1024, 1024]], score=-0.022882
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047891
    Step 6: arch=[[512, 512]], score=-0.032375
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119261
    Step 9: arch=[[2048, 2048]], score=0.002877
    Step 10: arch=[[64], [64, 64, 64, 64], [256, 256, 256, 256], [1024, 1024, 1024, 1024, 1024], [128]], score=0.113764

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.025080
    Step 4: arch=[[1024, 1024]], score=-0.022882
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047891
    Step 6: arch=[[512, 512]], score=-0.032375
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119261
    Step 9: arch=[[2048, 2048]], score=0.002877
    Step 10: arch=[[64], [256, 256, 256, 256], [64, 64, 64, 64], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024]], score=0.120248

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.025080
    Step 4: arch=[[1024, 1024]], score=-0.022882
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.047891
    Step 6: arch=[[512, 512]], score=-0.032375
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119261
    Step 9: arch=[[2048, 2048]], score=0.002877
    Step 10: arch=[[256]], score=-0.042953


=== Modifiers: modifiers_94 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.113012
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.048445
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.055636
    Step 4: arch=[[512, 512, 512]], score=-0.019110
    Step 5: arch=[[512, 512]], score=-0.021921
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.069900
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.023669
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.045970
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.124888

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.018620
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.015734
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.001726
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000303
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.020009
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.001739
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.017037
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.009942

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.002016
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000957
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.002788
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011974
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.010550
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.011974
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.013188
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.011528

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.014711
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.041105
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.010880
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.048263
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.025503
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.030266
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.006027

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.055636
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.124175
    Step 3: arch=[[128, 128, 128, 128]], score=-0.025503
    Step 4: arch=[[1024, 1024]], score=-0.010432
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.009295
    Step 6: arch=[[512, 512]], score=-0.021921
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129797
    Step 9: arch=[[2048, 2048]], score=0.018788
    Step 10: arch=[[256, 256]], score=-0.026885

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.004193
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.072248
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.008379
    Step 4: arch=[[256, 256], [512, 512]], score=-0.004518
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=0.121243
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.028481
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.051098
    Step 9: arch=[[128, 128]], score=-0.029171
    Step 10: arch=[[256], [64, 64, 64, 64, 64]], score=-0.000484

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.055636
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.124175
    Step 3: arch=[[128, 128, 128, 128]], score=-0.025503
    Step 4: arch=[[1024, 1024]], score=-0.010432
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.009295
    Step 6: arch=[[512, 512]], score=-0.021921
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129797
    Step 9: arch=[[2048, 2048]], score=0.018788
    Step 10: arch=[[2048], [512, 512, 512, 512], [64, 64, 64, 64, 64], [2048, 2048, 2048, 2048], [2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.055636
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.124175
    Step 3: arch=[[128, 128, 128, 128]], score=-0.025503
    Step 4: arch=[[1024, 1024]], score=-0.010432
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.009295
    Step 6: arch=[[512, 512]], score=-0.021921
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129797
    Step 9: arch=[[2048, 2048]], score=0.018788
    Step 10: arch=[[2048, 2048, 2048], [1024, 1024], [128, 128, 128, 128], [2048, 2048, 2048, 2048, 2048], [1024]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.055636
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.124175
    Step 3: arch=[[128, 128, 128, 128]], score=-0.025503
    Step 4: arch=[[1024, 1024]], score=-0.010432
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.009295
    Step 6: arch=[[512, 512]], score=-0.021921
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.129797
    Step 9: arch=[[2048, 2048]], score=0.018788
    Step 10: arch=[[1024, 1024], [1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=0.084842


=== Modifiers: modifiers_95 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.027419
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.134439
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.029021
    Step 4: arch=[[512, 512, 512]], score=-0.012582
    Step 5: arch=[[512, 512]], score=-0.016115
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.008564
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.010510
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.089790
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.002943
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=-0.003173
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.004420
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000948
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.009213
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=-0.009341
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=-0.006355
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.007471

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003072
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.001589
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001376
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.005752
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.002279
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.005752
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.006319
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006109

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.018649
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.033859
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.025202
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.053934
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=-0.013477
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.019894
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.011782

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.029021
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.082042
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013477
    Step 4: arch=[[1024, 1024]], score=-0.010665
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.014565
    Step 6: arch=[[512, 512]], score=-0.016115
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.003854
    Step 10: arch=[[256, 256]], score=-0.018388

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.008815
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.049282
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.006155
    Step 4: arch=[[256, 256], [512, 512]], score=-0.010393
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.016956
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.018304
    Step 9: arch=[[128, 128]], score=-0.019411
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [128, 128]], score=0.080690

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.029021
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.082042
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013477
    Step 4: arch=[[1024, 1024]], score=-0.010665
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.014565
    Step 6: arch=[[512, 512]], score=-0.016115
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.003854
    Step 10: arch=[[2048, 2048, 2048], [64], [128, 128], [512], [128, 128, 128, 128, 128]], score=0.108688

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.029021
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.082042
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013477
    Step 4: arch=[[1024, 1024]], score=-0.010665
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.014565
    Step 6: arch=[[512, 512]], score=-0.016115
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.003854
    Step 10: arch=[[1024, 1024, 1024], [64, 64], [64, 64, 64, 64], [2048, 2048], [512, 512]], score=0.094601

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.029021
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.082042
    Step 3: arch=[[128, 128, 128, 128]], score=-0.013477
    Step 4: arch=[[1024, 1024]], score=-0.010665
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.014565
    Step 6: arch=[[512, 512]], score=-0.016115
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.003854
    Step 10: arch=[[2048, 2048, 2048, 2048], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024], [2048, 2048, 2048, 2048, 2048], [2048, 2048, 2048, 2048]], score=-100.000000


=== Modifiers: modifiers_96 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.124344
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.058950
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.117376
    Step 4: arch=[[512, 512, 512]], score=0.006164
    Step 5: arch=[[512, 512]], score=-0.007632
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.124823
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.019801
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.054959
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.022379
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.019848
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.000990
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000254
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.011081
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.014169
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.036694
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.034200

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.012736
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.008853
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003636
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008588
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007853
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.008588
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.010225
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.006780

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.037375
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.086095
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.025338
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.014759
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=-100.000000
    Step 7: arch=[[128, 128, 128, 128]], score=0.007307
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.019204
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.034990

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.117376
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.129434
    Step 3: arch=[[128, 128, 128, 128]], score=0.007307
    Step 4: arch=[[1024, 1024]], score=0.008193
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004406
    Step 6: arch=[[512, 512]], score=-0.007632
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.048164
    Step 10: arch=[[256, 256]], score=-0.014504

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.022497
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.098820
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.023753
    Step 4: arch=[[256, 256], [512, 512]], score=-0.003549
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.006775
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.041965
    Step 9: arch=[[128, 128]], score=-0.017681
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [128, 128], [128, 128]], score=0.125338

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.117376
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.129434
    Step 3: arch=[[128, 128, 128, 128]], score=0.007307
    Step 4: arch=[[1024, 1024]], score=0.008193
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004406
    Step 6: arch=[[512, 512]], score=-0.007632
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.048164
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64]], score=0.124459

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.117376
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.129434
    Step 3: arch=[[128, 128, 128, 128]], score=0.007307
    Step 4: arch=[[1024, 1024]], score=0.008193
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004406
    Step 6: arch=[[512, 512]], score=-0.007632
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.048164
    Step 10: arch=[[2048, 2048, 2048], [512, 512, 512], [512, 512, 512, 512], [512, 512]], score=0.127211

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.117376
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.129434
    Step 3: arch=[[128, 128, 128, 128]], score=0.007307
    Step 4: arch=[[1024, 1024]], score=0.008193
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.004406
    Step 6: arch=[[512, 512]], score=-0.007632
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.048164
    Step 10: arch=[[64], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024], [1024, 1024, 1024], [256, 256, 256, 256, 256]], score=-100.000000


=== Modifiers: modifiers_97 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.056878
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.098054
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=0.130722
    Step 4: arch=[[512, 512, 512]], score=-0.006521
    Step 5: arch=[[512, 512]], score=-0.012551
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.020285
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=-0.013001
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.050110
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.004698
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.001128
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.003216
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.000622
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010122
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.014121
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.018871
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.011829

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.003662
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=-0.000681
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.003792
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007749
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.003911
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.007749
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.009271
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.008471

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.029681
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.121087
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.029003
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.078487
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.065721
    Step 7: arch=[[128, 128, 128, 128]], score=-0.016122
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.023661
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.017882

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.130722
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.131498
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016122
    Step 4: arch=[[1024, 1024]], score=0.005956
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003425
    Step 6: arch=[[512, 512]], score=-0.012551
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.061560
    Step 10: arch=[[256, 256]], score=-0.019481

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.014763
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.130288
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.014497
    Step 4: arch=[[256, 256], [512, 512]], score=-0.006297
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.020686
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.043954
    Step 9: arch=[[128, 128]], score=-0.022364
    Step 10: arch=[[2048, 2048, 2048], [64, 64, 64, 64, 64], [2048], [64], [64, 64]], score=0.130370

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.130722
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.131498
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016122
    Step 4: arch=[[1024, 1024]], score=0.005956
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003425
    Step 6: arch=[[512, 512]], score=-0.012551
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.061560
    Step 10: arch=[[2048, 2048, 2048, 2048, 2048]], score=-100.000000

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.130722
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.131498
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016122
    Step 4: arch=[[1024, 1024]], score=0.005956
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003425
    Step 6: arch=[[512, 512]], score=-0.012551
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.061560
    Step 10: arch=[[2048, 2048, 2048, 2048], [128, 128, 128, 128], [256, 256, 256, 256], [128, 128], [64, 64]], score=0.133107

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=0.130722
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.131498
    Step 3: arch=[[128, 128, 128, 128]], score=-0.016122
    Step 4: arch=[[1024, 1024]], score=0.005956
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.003425
    Step 6: arch=[[512, 512]], score=-0.012551
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.061560
    Step 10: arch=[[128, 128], [1024, 1024, 1024, 1024], [512, 512, 512, 512, 512], [512, 512, 512], [64, 64, 64, 64]], score=0.080489


=== Modifiers: modifiers_98 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.061303
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.091795
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=-0.007030
    Step 5: arch=[[512, 512]], score=-0.022058
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.054301
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.016514
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.058421
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=0.118670

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.004115
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.000586
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002731
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=0.000614
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.007550
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.000173
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.004325
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=-0.010055

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.014129
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.012520
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.001400
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004214
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.000870
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.004214
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.004735
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.003273

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.051320
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.043369
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.068191
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.065597
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.091445
    Step 7: arch=[[128, 128, 128, 128]], score=0.002591
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.025660
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.069697

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113657
    Step 3: arch=[[128, 128, 128, 128]], score=0.002591
    Step 4: arch=[[1024, 1024]], score=-0.015734
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020219
    Step 6: arch=[[512, 512]], score=-0.022058
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119483
    Step 9: arch=[[2048, 2048]], score=0.003974
    Step 10: arch=[[256, 256]], score=-0.024337

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.055774
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=0.098957
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.054610
    Step 4: arch=[[256, 256], [512, 512]], score=-0.005940
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.011792
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.058326
    Step 9: arch=[[128, 128]], score=-0.025256
    Step 10: arch=[[2048, 2048, 2048, 2048], [64, 64, 64, 64, 64], [1024], [64, 64, 64, 64]], score=-100.000000

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113657
    Step 3: arch=[[128, 128, 128, 128]], score=0.002591
    Step 4: arch=[[1024, 1024]], score=-0.015734
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020219
    Step 6: arch=[[512, 512]], score=-0.022058
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119483
    Step 9: arch=[[2048, 2048]], score=0.003974
    Step 10: arch=[[1024, 1024, 1024], [2048, 2048, 2048], [128, 128, 128], [512, 512, 512], [64]], score=0.117603

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113657
    Step 3: arch=[[128, 128, 128, 128]], score=0.002591
    Step 4: arch=[[1024, 1024]], score=-0.015734
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020219
    Step 6: arch=[[512, 512]], score=-0.022058
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119483
    Step 9: arch=[[2048, 2048]], score=0.003974
    Step 10: arch=[[1024, 1024, 1024], [128, 128, 128, 128, 128], [64, 64, 64, 64], [2048, 2048, 2048, 2048, 2048], [2048]], score=-100.000000

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=0.113657
    Step 3: arch=[[128, 128, 128, 128]], score=0.002591
    Step 4: arch=[[1024, 1024]], score=-0.015734
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=-0.020219
    Step 6: arch=[[512, 512]], score=-0.022058
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=0.119483
    Step 9: arch=[[2048, 2048]], score=0.003974
    Step 10: arch=[[1024, 1024, 1024], [2048, 2048, 2048, 2048, 2048], [512, 512]], score=0.121915


=== Modifiers: modifiers_99 ===
Method: Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[512], [512, 512, 512, 512], [512, 512], [1024, 1024, 1024], [64]], score=0.086526
    Step 2: arch=[[128, 128, 128], [128], [2048, 2048], [128], [512, 512, 512, 512, 512]], score=0.120077
    Step 3: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 4: arch=[[512, 512, 512]], score=0.002572
    Step 5: arch=[[512, 512]], score=-0.010369
    Step 6: arch=[[64, 64, 64, 64], [128, 128], [64, 64], [1024, 1024, 1024]], score=0.079323
    Step 7: arch=[[256, 256, 256, 256], [256, 256, 256, 256, 256], [64], [2048, 2048, 2048, 2048, 2048]], score=-100.000000
    Step 8: arch=[[128, 128, 128, 128, 128]], score=0.010682
    Step 9: arch=[[256, 256], [64, 64, 64], [128, 128], [128, 128], [512, 512, 512, 512]], score=0.085008
    Step 10: arch=[[64, 64, 64, 64], [2048, 2048, 2048, 2048], [128, 128, 128, 128, 128]], score=-100.000000

Method: SimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256], [512, 512], [256, 256], [64, 64], [64]], score=0.019090
    Step 4: arch=[[256, 256], [512, 512], [256], [64, 64], [64]], score=0.012515
    Step 5: arch=[[256, 256], [512, 512], [64, 64], [64]], score=-0.002749
    Step 6: arch=[[256, 256], [512, 512], [64, 64], [64], [128]], score=-0.000854
    Step 7: arch=[[256, 256], [1024, 1024], [64, 64], [64], [128]], score=0.010275
    Step 8: arch=[[1024, 1024], [64, 64], [64], [128]], score=0.013868
    Step 9: arch=[[1024, 1024], [64, 64], [64], [128, 128]], score=0.033095
    Step 10: arch=[[1024, 1024], [64], [64], [128, 128]], score=0.030353

Method: LogSpaceSimulatedAnnealing
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 3: arch=[[256, 256, 256], [512, 512], [256, 256], [64], [64]], score=0.011717
    Step 4: arch=[[128, 128, 128], [512, 512], [256, 256], [64], [64]], score=0.006613
    Step 5: arch=[[128, 128], [512, 512], [256, 256], [64], [64]], score=-0.004820
    Step 6: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009426
    Step 7: arch=[[128, 128], [256, 256], [256, 256], [64], [128]], score=-0.007531
    Step 8: arch=[[128, 128], [256, 256], [256, 256], [64], [64]], score=-0.009426
    Step 9: arch=[[64, 64], [256, 256], [256, 256], [64], [64]], score=-0.011607
    Step 10: arch=[[64, 64], [256, 256], [256, 256], [128], [64]], score=-0.010647

Method: TPE
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 2: arch=[[512, 512, 512, 512], [256, 256, 256], [256, 256, 256, 256]], score=0.046647
    Step 3: arch=[[2048, 2048, 2048], [64], [1024]], score=0.106992
    Step 4: arch=[[64, 64, 64, 64], [64, 64, 64, 64], [512, 512, 512, 512, 512]], score=0.038724
    Step 5: arch=[[512], [512, 512, 512, 512], [1024, 1024, 1024, 1024, 1024]], score=0.048315
    Step 6: arch=[[128, 128, 128, 128], [128], [512, 512], [2048, 2048, 2048]], score=0.123366
    Step 7: arch=[[128, 128, 128, 128]], score=-0.000755
    Step 8: arch=[[2048], [2048], [2048, 2048, 2048], [1024, 1024, 1024, 1024], [128]], score=-100.000000
    Step 9: arch=[[64, 64]], score=-0.025665
    Step 10: arch=[[128, 128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.038758

Method: Skopt-Random
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.000755
    Step 4: arch=[[1024, 1024]], score=0.010115
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.003532
    Step 6: arch=[[512, 512]], score=-0.010369
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.060686
    Step 10: arch=[[256, 256]], score=-0.019410

Method: Skopt-GP
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[128, 128, 128, 128], [64, 64, 64, 64], [128, 128, 128, 128]], score=0.027321
    Step 2: arch=[[2048, 2048, 2048], [128, 128, 128, 128], [1024, 1024]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128], [256, 256, 256, 256], [128, 128, 128]], score=0.024374
    Step 4: arch=[[256, 256], [512, 512]], score=-0.009228
    Step 5: arch=[[64, 64], [512, 512], [2048, 2048, 2048, 2048], [512, 512, 512]], score=-100.000000
    Step 6: arch=[[512, 512, 512], [256, 256, 256], [1024, 1024, 1024], [2048, 2048, 2048], [512, 512]], score=-100.000000
    Step 7: arch=[[64, 64, 64]], score=-0.014303
    Step 8: arch=[[512, 512, 512], [1024, 1024, 1024, 1024]], score=0.042238
    Step 9: arch=[[128, 128]], score=-0.023630
    Step 10: arch=[[128, 128, 128, 128], [128, 128, 128, 128, 128], [128, 128, 128, 128], [128, 128, 128]], score=0.070425

Method: Skopt-RF
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.000755
    Step 4: arch=[[1024, 1024]], score=0.010115
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.003532
    Step 6: arch=[[512, 512]], score=-0.010369
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.060686
    Step 10: arch=[[2048], [512, 512], [64, 64]], score=0.048481

Method: Skopt-ET
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.000755
    Step 4: arch=[[1024, 1024]], score=0.010115
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.003532
    Step 6: arch=[[512, 512]], score=-0.010369
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.060686
    Step 10: arch=[[64, 64, 64, 64, 64]], score=0.008421

Method: Skopt-GBRT
  Seed 0:
    Step 0: arch=[[256, 256], [512, 512], [256, 256], [64], [64]], score=0.000000
    Step 1: arch=[[2048, 2048, 2048, 2048]], score=-100.000000
    Step 2: arch=[[2048, 2048, 2048], [64, 64], [128], [1024, 1024], [512, 512]], score=-100.000000
    Step 3: arch=[[128, 128, 128, 128]], score=-0.000755
    Step 4: arch=[[1024, 1024]], score=0.010115
    Step 5: arch=[[128], [1024], [128, 128, 128, 128, 128]], score=0.003532
    Step 6: arch=[[512, 512]], score=-0.010369
    Step 7: arch=[[1024, 1024], [1024, 1024, 1024], [512, 512, 512, 512, 512], [1024, 1024, 1024, 1024], [1024, 1024, 1024, 1024, 1024]], score=-100.000000
    Step 8: arch=[[128], [2048, 2048, 2048, 2048, 2048], [128, 128, 128, 128], [512, 512, 512], [64]], score=-100.000000
    Step 9: arch=[[2048, 2048]], score=0.060686
    Step 10: arch=[[512, 512, 512], [64, 64]], score=0.005433


